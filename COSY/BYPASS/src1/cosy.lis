      1 BEGIN ;
      2   VARIABLE AMU 1 ;
      3   VARIABLE AMUMEV 1 ;
      4   VARIABLE EZERO 1 ;
      5   VARIABLE CLIGHT 1 ;
      6   VARIABLE PI  1 ;
      7   VARIABLE DEGRAD 1 ;
      8   VARIABLE TRUE 1 ;
      9   VARIABLE FALSE 1 ;
     10   VARIABLE E0 100 ;
     11   VARIABLE M0 100 ;
     12   VARIABLE Z0 100 ;
     13   VARIABLE V0 100 ;
     14   VARIABLE P0 100 ;
     15   VARIABLE G0 100 ;
     16   VARIABLE CHIM 500 ;
     17   VARIABLE CHIE 500 ;
     18   VARIABLE ETA 500 ;
     19   VARIABLE HFAC 500 ;
     20   VARIABLE TFAC 1 ;
     21   VARIABLE MAP 4000 8 ;
     22   VARIABLE MSC 4000 8 ;
     23   VARIABLE SPNR 4000 3 3 ;
     24   VARIABLE SSCR 4000 3 3 ;
     25   VARIABLE LSPN 1 ;
     26   VARIABLE RAY 10001 8 ;
     27   VARIABLE RSC 10001 8 ;
     28   VARIABLE RCOL 10001 ;
     29   VARIABLE SPI 10001 3 ;
     30   VARIABLE SSC 10001 3 ;
     31   VARIABLE REMAIN 10001 ;
     32   VARIABLE REMOVE 10001 ;
     33   VARIABLE NRAY 1 ;
     34   VARIABLE NSPN 1 ;
     35   VARIABLE XCUT 1 2 ;
     36   VARIABLE LCUT 1 ;
     37   VARIABLE NCT 1 ;
     38   VARIABLE NCCT 1 ;
     39   VARIABLE XCT 1 2 10 ;
     40   VARIABLE LCT 1 10 ;
     41   VARIABLE MCT 4000 20 ;
     42   VARIABLE ESC 1 ;
     43   VARIABLE ENC 1 ;
     44   VARIABLE ERAY 1 4 ;
     45   VARIABLE ERSC 1 4 ;
     46   VARIABLE EMAX 1 2 ;
     47   VARIABLE AXP 1000 3 ;
     48   VARIABLE AXD 1000 6 ;
     49   VARIABLE SPOS 1000 ;
     50   VARIABLE XLOC 20 ;
     51   VARIABLE ZLOC 20 ;
     52   VARIABLE PLOC 20 ;
     53   VARIABLE SLOC 20 ;
     54   VARIABLE VLOC 20 ;
     55   VARIABLE TLOC 20 ;
     56   VARIABLE SYS 20000 ;
     57   VARIABLE CE 10 ;
     58   VARIABLE TRA 1000 251 ;
     59   VARIABLE NRAYTRA0 1 ;
     60   VARIABLE NRAYTRA 1 ;
     61   VARIABLE ETRA 1000 ;
     62   VARIABLE SYS0 200 ;
     63   VARIABLE TRTST 200 ;
     64   VARIABLE GPLOC 1 ;
     65   VARIABLE LSCR 1 ;
     66   VARIABLE LSCT 1 ;
     67   VARIABLE LTRA 20 3 ;
     68   VARIABLE GTRA 20 3 ;
     69   VARIABLE EFX 4000 ;
     70   VARIABLE EFY 4000 ;
     71   VARIABLE EFZ 4000 ;
     72   VARIABLE V 4000 ;
     73   VARIABLE BFX 4000 ;
     74   VARIABLE BFY 4000 ;
     75   VARIABLE BFZ 4000 ;
     76   VARIABLE W 4000 ;
     77   VARIABLE H 4000 ;
     78   VARIABLE CHIM1 1 ;
     79   VARIABLE CHIE1 1 ;
     80   VARIABLE TP1 1 ;
     81   VARIABLE PMM 20 40 ;
     82   VARIABLE PEM 20 40 ;
     83   VARIABLE LM 1 ;
     84   VARIABLE PPOL 20 36 ;
     85   VARIABLE MPOL 20 30 ;
     86   VARIABLE NPOL 1 ;
     87   VARIABLE LS 1 ;
     88   VARIABLE NSDP 1 ;
     89   VARIABLE LCCT 1 ;
     90   VARIABLE LOFF 1 ;
     91   VARIABLE ENGEC 2 20 2 2 6 ;
     92   VARIABLE LE 1 ;
     93   VARIABLE GFF2 40 2 6 10 ;
     94   VARIABLE LFF2 400 2 6 10 ;
     95   VARIABLE DATFF2 1 2 6 10 ;
     96   VARIABLE INP 1 ;
     97   VARIABLE NN 1 ;
     98   VARIABLE SN 10  100 ;
     99   VARIABLE HN 25 100 ;
    100   VARIABLE VN 25 100 ;
    101   VARIABLE WN 25 100 ;
    102   VARIABLE PN 1 40 ;
    103   VARIABLE NPG 1 ;
    104   VARIABLE DR 10 ;
    105   VARIABLE DMAX 1 ;
    106   VARIABLE MFP 1 8 ;
    107   VARIABLE MFD 6 700 30;
    108   VARIABLE BETHEBLOCHC 1 6 ;
    109   VARIABLE BXNOB 1 5 ;
    110   VARIABLE BXBDT 1 5 7 ;
    111   VARIABLE BXNOD 1 5 ;
    112   VARIABLE BXDDT 1 5 7 ;
    113   VARIABLE BXBOXID 1 70 ;
    114   VARIABLE BXIBOX 1 ;
    115   VARIABLE BX1BOXPN 1 70 4 ;
    116   VARIABLE BX1BOXP 1 70 4 2 3 ;
    117   VARIABLE A 1 13 ;
    118   VARIABLE B 1 13 12 ;
    119   VARIABLE C 1 13 ;
    120   VARIABLE D 1 13 ;
    121   VARIABLE HSQR 1 ;
    122   VARIABLE LRKCO 1 ;
    123   VARIABLE LRKO 1 ;
    124   VARIABLE RKO 2 ;
    125   VARIABLE EPS 1 ;
    126   VARIABLE WAF 1 ;
    127   VARIABLE DD 1 20 ;
    128   VARIABLE DX 1 20 ;
    129   VARIABLE XX 15 30 ;
    130   VARIABLE DEPS 1 ;
    131   VARIABLE NO  1 ;
    132   VARIABLE NV  1 ;
    133   VARIABLE ND 1 ;
    134   VARIABLE TWOND 1 ;
    135   VARIABLE NOC 1 ;
    136   VARIABLE NM1 1 ;
    137   VARIABLE NM2 1 ;
    138   VARIABLE NM3 1 ;
    139   VARIABLE NMP 1 ;
    140   VARIABLE NP 1 ;
    141   VARIABLE LOV 1 ;
    142   VARIABLE LRP 1 ;
    143   VARIABLE LUM 1 ;
    144   VARIABLE LFR 1 ;
    145   VARIABLE LPS 1 ;
    146   VARIABLE LPI 1 ;
    147   VARIABLE LPG 1 ;
    148   VARIABLE LCB 1 ;
    149   VARIABLE LFR2 1 ;
    150   VARIABLE LCR 1 ;
    151   VARIABLE LKC 1 ;
    152   VARIABLE LENV 1 ;
    153   VARIABLE LSYS 1 ;
    154   VARIABLE LCE 1 ;
    155   VARIABLE LAX 1 ;
    156   VARIABLE LWA 1 ;
    157   VARIABLE LCO 1 ;
    158   VARIABLE LTR 1 ;
    159   VARIABLE LTRR 1 ;
    160   VARIABLE LTRI 1 ;
    161   VARIABLE LTRPRAY 1 ;
    162   VARIABLE LTRPRAYU 1 ;
    163   VARIABLE LTRPSPI 1 ;
    164   VARIABLE LTRPSPIU 1 ;
    165   VARIABLE LWNDANF 1 ;
    166   VARIABLE LWNTS 1 ;
    167   VARIABLE LWNTR 1 ;
    168   VARIABLE PHSP 1 8 ;
    169   VARIABLE PARS 1 8 ;
    170   VARIABLE PHSR 1 3 ;
    171   FUNCTION MAX I J ;
    172     MAX := VMAX(I&J) ;
    173     ENDFUNCTION ;
    174   FUNCTION MIN I J ;
    175     MIN := VMIN(I&J) ;
    176     ENDFUNCTION ;
    177   FUNCTION MOD I1 I2 ;
    178     MOD := I1-INT(I1/I2)*I2 ;
    179     ENDFUNCTION ;
    180   FUNCTION SIG I ;
    181     SIG := 1 ;
    182     IF I#0 ;
    183       SIG := I/ABS(CONS(I)) ;
    184       ENDIF ;
    185     ENDFUNCTION ;
    186   FUNCTION IM X ;
    187     IM := CM(0&1)*X ;
    188     ENDFUNCTION ;
    189   FUNCTION ATAN2 Y X ;
    190     VARIABLE XC 1 ;
    191     VARIABLE YC 1 ;
    192     XC := CONS(X) ;
    193     YC := CONS(Y) ;
    194     IF (XC=0)*(YC=0) ;
    195       ATAN2 := 0 ;
    196       ELSEIF ABS(YC)>ABS(XC) ;
    197       ATAN2 := ATAN(X/Y) ;
    198       IF YC>0 ;
    199         ATAN2 := PI*0.5-ATAN2 ;
    200         ELSEIF 1=1 ;
    201         ATAN2 := -PI*0.5-ATAN2 ;
    202         ENDIF ;
    203       ELSEIF 1=1 ;
    204       ATAN2 := ATAN(Y/X) ;
    205       IF XC<0 ;
    206         IF YC<0 ;
    207           ATAN2 := -PI+ATAN2 ;
    208           ELSEIF 1=1 ;
    209           ATAN2 := PI+ATAN2 ;
    210           ENDIF ;
    211         ENDIF ;
    212       ENDIF ;
    213     ENDFUNCTION ;
    214   FUNCTION VATAN2 Y X ;
    215     VARIABLE I 1 ;
    216     VATAN2 := Y ;
    217     LOOP I 1 LENGTH(Y) ;
    218       VELSET VATAN2 I ATAN2(Y|I,X|I) ; %ATAN2:  189
    219       ENDLOOP ;
    220     ENDFUNCTION ;
    221   FUNCTION SS A I1 I2 ;
    222     SS := A|(I1&I2) ;
    223     ENDFUNCTION ;
    224   FUNCTION R S I1 I2 ;
    225     STCRE (S|(I1&I2)) R ;
    226     ENDFUNCTION ;
    227   FUNCTION S  R ;
    228     RECST R '(G23.16)' S ;
    229     ENDFUNCTION ;
    230   FUNCTION SF R FORM ;
    231     RECST R FORM SF ;
    232     ENDFUNCTION ;
    233   FUNCTION SI I ;
    234     VARIABLE J 1 ;
    235     VARIABLE K 1 ;
    236     K := ABS(I) ;
    237     SI := SF(K-10*INT(K/10),'(I1)') ; %SF:  230
    238     LOOP J 1 LOG(K+.1)/LOG(10) ;
    239       K := INT(K/10) ;
    240       SI := SF(K-10*INT(K/10),'(I1)')&SI ; %SF:  230
    241       ENDLOOP ;
    242     IF I<0 ;
    243       SI := '-'&SI ;
    244       ENDIF ;
    245     ENDFUNCTION ;
    246   FUNCTION COEF X I ;
    247     DAPEE X I COEF ;
    248     ENDFUNCTION ;
    249   FUNCTION WABS X W ;
    250     DANOW X+0*DD(1) W WABS ;
    251     ENDFUNCTION ;
    252   FUNCTION DER I V ;
    253     DER := V%I ;
    254     ENDFUNCTION ;
    255   FUNCTION INTEG I V ;
    256     INTEG := V%(-I) ;
    257     ENDFUNCTION ;
    258   PROCEDURE CONTINUE ;
    259     PI := PI ;
    260     ENDPROCEDURE ;
    261   PROCEDURE SVSCR ;
    262     LSCR := -1 ;
    263     SCRLEN LSCR ;
    264     ENDPROCEDURE ;
    265   FUNCTION ILAST A IA1 IA2 ;
    266     VARIABLE I 1 ;
    267     VARIABLE CH 1 ;
    268     CH := ' ' ;
    269     I := IA2+1 ;
    270     WHILE (CH=' ')*(I>IA1) ;
    271       I := I-1 ;
    272       CH := SS(A,I,I) ; %SS:  221
    273       ENDWHILE ;
    274     ILAST := I ;
    275     ENDFUNCTION ;
    276   FUNCTION IPOS C A ;
    277     VARIABLE LEN 1 ;
    278     VARIABLE I 1 ;
    279     LEN := LENGTH(A) ;
    280     IPOS := 0 ;
    281     I := 0 ;
    282     WHILE I<LEN ;
    283       I := I+1 ;
    284       IF C=(A|I) ;
    285         IPOS := I ;
    286         I := LEN ;
    287         ENDIF ;
    288       ENDWHILE ;
    289     ENDFUNCTION ;
    290   PROCEDURE TRCAP A ;
    291     VARIABLE AC 26 ;
    292     VARIABLE AS 26 ;
    293     VARIABLE LS 1 ;
    294     VARIABLE IA 1 ;
    295     VARIABLE I 1 ;
    296     AC := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' ;
    297     AS := 'abcdefghijklmnopqrstuvwxyz' ;
    298     LS := ILAST(A,1,LENGTH(A)) ; %ILAST:  265
    299     IF LS>1 ;
    300       LOOP I 2 LS-1 ;
    301         IA := IPOS((A|I),AS) ; %IPOS:  276
    302         IF IA>0 ;
    303           A := (A|(1&(I-1)))&(AC|IA)&(A|((I+1)&LS)) ;
    304           ENDIF ;
    305         ENDLOOP ;
    306       I := 1 ;
    307       IA := IPOS((A|I),AS) ; %IPOS:  276
    308       IF IA>0 ;
    309         A := (AC|IA)&(A|((I+1)&LS)) ;
    310         ENDIF ;
    311       I := LS ;
    312       IA := IPOS((A|I),AS) ; %IPOS:  276
    313       IF IA>0 ;
    314         A := (A|(1&(I-1)))&(AC|IA) ;
    315         ENDIF ;
    316       ELSEIF LS=1 ;
    317       IA := IPOS((A|1),AS) ; %IPOS:  276
    318       IF IA>0 ;
    319         A := (AC|IA) ;
    320         ENDIF ;
    321       ENDIF ;
    322     ENDPROCEDURE ;
    323   PROCEDURE WORDS A N WORD SEP ;
    324     VARIABLE I 1 ;
    325     VARIABLE J 1 ;
    326     VARIABLE L 1 ;
    327     L := ILAST(A,1,LENGTH(A)) ; %ILAST:  265
    328     N := 0 ;
    329     J := 0 ;
    330     I := 0 ;
    331     WHILE I<L ;
    332       I := I+1 ;
    333       IF     (J=0)*((A|I)#SEP) ;
    334         J := 1 ;
    335         N := N+1 ;
    336         WORD(N) := I ;
    337         ELSEIF (J=1)*((A|I)=SEP) ;
    338         J := 0 ;
    339         WORD(N) := WORD(N)&(I-1) ;
    340         ENDIF ;
    341       ENDWHILE ;
    342     IF J=0 ;
    343       N := N+1 ;
    344       WORD(N) := I ;
    345       ENDIF ;
    346     WORD(N) := WORD(N)&I ;
    347     ENDPROCEDURE ;
    348   PROCEDURE FIELDS A N FIELD SEP ;
    349     VARIABLE I 1 ;
    350     VARIABLE J 1 ;
    351     VARIABLE L 1 ;
    352     L := LENGTH(A) ;
    353     N := 0 ;
    354     J := 1 ;
    355     I := 0 ;
    356     WHILE I<L ;
    357       I := I+1 ;
    358       IF ((A|I)=SEP) ;
    359         N := N + 1;
    360         IF I>J ;
    361           FIELD(N) := J&(I-1) ;
    362           ELSEIF LO(1) ;
    363           FIELD(N) := 0&0 ;
    364           ENDIF ;
    365         J := I+1 ;
    366         ENDIF ;
    367       ENDWHILE ;
    368     N := N + 1;
    369     IF I>J ;
    370       FIELD(N) := J&I ;
    371       ELSEIF LO(1) ;
    372       FIELD(N) := 0&0 ;
    373       ENDIF ;
    374     ENDPROCEDURE ;
    375   PROCEDURE MI M N L IER NO NV NM1 ;
    376     VARIABLE C 2 L ;
    377     VARIABLE AL 1 L L ;
    378     VARIABLE AI 1 L L ;
    379     VARIABLE CL 1 L ;
    380     VARIABLE AN NM1 L ;
    381     VARIABLE SM NM1 L ;
    382     VARIABLE DDA 1 L ;
    383     VARIABLE SCR NM1 ;
    384     VARIABLE I 1 ;
    385     VARIABLE J 1 ;
    386     VARIABLE K 1 ;
    387     IF L>NV ;
    388       WRITE 6 ' *** ERROR in MI, dim too large' ;
    389       QUIT 0 ;
    390       ENDIF ;
    391     LOOP I 1 L ;
    392       DDA(I) := DA(I) ;
    393       DANOT 1 ;
    394       SCR := M(I) ;
    395       DANOT NO ;
    396       C(I) := CONS(SCR) ;
    397       AN(I) := M(I)-SCR ;
    398       DACLIW SCR L CL ;
    399       LOOP J 1 L ;
    400         AL(I,J) := CL(J) ;
    401         ENDLOOP ;
    402       N(I) := 0 ;
    403       ENDLOOP ;
    404     LINV AL AI L L IER ;
    405     IF IER#0 ;
    406       IER := 1 ;
    407       ENDIF ;
    408     IF NO>1 ;
    409       POLVAL 101 AN L N L N L ;
    410       ENDIF ;
    411     LOOP I 1 L ;
    412       N(I) := 0 ;
    413       LOOP J 1 L ;
    414         N(I) := N(I) + AI(I,J)*DDA(J) ;
    415         ENDLOOP ;
    416       ENDLOOP ;
    417     LOOP I 2 NO ;
    418       DANOT I ;
    419       POLVAL 0 AN L N L N L ;
    420       LOOP J 1 L ;
    421         SM(J) := 0 ;
    422         LOOP K 1 L ;
    423           SM(J) := SM(J) + AI(J,K)*(DDA(K)-N(K)) ;
    424           ENDLOOP ;
    425         ENDLOOP ;
    426       LOOP J 1 L ;
    427         N(J) := SM(J) ;
    428         ENDLOOP ;
    429       ENDLOOP ;
    430     LOOP I 1 L ;
    431       SM(I) := DDA(I) - C(I) ;
    432       ENDLOOP ;
    433     POLVAL 1 N L SM L N L ;
    434     ENDPROCEDURE ;
    435   PROCEDURE FOURIERTRANS D L FTO FTA FTP ;
    436     VARIABLE I 1 ;
    437     VARIABLE J 1 ;
    438     VARIABLE DEL 1 ;
    439     VARIABLE RS LENGTH(D(1)) ;
    440     VARIABLE RC LENGTH(D(1)) ;
    441     RS := 0 ;
    442     LOOP J 1 L ;
    443       RS := RS + D(J) ;
    444       ENDLOOP ;
    445     FTA(1) := RS/L ;
    446     FTP(1) := 0*RS+PI/2 ;
    447     LOOP I 1 FTO ;
    448       DEL := I*2*PI/L ;
    449       RS := (D(1)-D(L))*COS(-0.5*DEL) ;
    450       RC := (D(L)-D(1))*SIN(-0.5*DEL) ;
    451       LOOP J 1 L-1 ;
    452         RS := RS + (D(J+1)-D(J))*COS((J-0.5)*DEL) ;
    453         RC := RC + (D(J)-D(J+1))*SIN((J-0.5)*DEL) ;
    454         ENDLOOP ;
    455       RS := RS/(PI*I) ;
    456       RC := RC/(PI*I) ;
    457       FTA(I+1) := SQRT(SQR(RS)+SQR(RC)) ;
    458       FTP(I+1) := VATAN2(RC,RS) ; %VATAN2:  214
    459       ENDLOOP ;
    460     ENDPROCEDURE ;
    461   FUNCTION ME M I ;
    462     DAPEE MAP(M) I ME ;
    463     ENDFUNCTION ;
    464   FUNCTION MEP M I ;
    465     DAPEP MAP(M) I TWOND MEP ;
    466     ENDFUNCTION ;
    467   FUNCTION MA M II ;
    468     VARIABLE I 1 ;
    469     VARIABLE K 1 ;
    470     I := II ;
    471     DAPEE MAP(M) I MA ;
    472     WHILE I#0 ;
    473       I := I/10 ;
    474       K := I ;
    475       I := INT(I+.01) ;
    476       K := NINT(10*(K-I)) ;
    477       IF K>TWOND ;
    478         MA := MA*PARS(K-TWOND) ;
    479         ELSEIF TRUE ;
    480         MA := MA*PHSP(K) ;
    481         ENDIF ;
    482       ENDWHILE ;
    483     ENDFUNCTION ;
    484   FUNCTION PB X Y ;
    485     VARIABLE I 1 ;
    486     PB := 0 ;
    487     LOOP I 1 TWOND 2 ;
    488       PB := PB + DER(I,X)*DER(I+1,Y) - DER(I+1,X)*DER(I,Y) ; %DER:  25
                  2 %DER:  252 %DER:  252 %DER:  252
    489       ENDLOOP ;
    490     ENDFUNCTION ;
    491   FUNCTION LEXP A B ;
    492     VARIABLE I 1 ;
    493     VARIABLE XP NM1 TWOND ;
    494     LOOP I 1 TWOND 2 ;
    495       XP(I) := -DER(I+1,A) ; %DER:  252
    496       XP(I+1) := DER(I,A) ; %DER:  252
    497       ENDLOOP ;
    498     DAFLO XP B LEXP TWOND ;
    499     ENDFUNCTION ;
    500   PROCEDURE CPOLVAL LTR POL NPOL ARG NARG RES NRES ;
    501     VARIABLE RIPOL NM1 2*NPOL ;
    502     VARIABLE RIRES 2*NM1 2*NRES ;
    503     VARIABLE J 1 ;
    504     VARIABLE I 2 ;
    505     IMUNIT I ;
    506     LOOP J 1 NPOL ;
    507       RIPOL(2*J-1) := REAL(POL(J)) ;
    508       RIPOL(2*J  ) := IMAG(POL(J)) ;
    509       ENDLOOP ;
    510     POLVAL LTR RIPOL 2*NPOL ARG NARG RIRES 2*NRES ;
    511     LOOP J 1 NPOL ;
    512       RES(J) := RIRES(2*J-1) + I*RIRES(2*J  ) ;
    513       ENDLOOP ;
    514     ENDPROCEDURE ;
    515   FUNCTION POLY X Y P IS ;
    516     VARIABLE I 1 ;
    517     VARIABLE J 1 ;
    518     VARIABLE X1 NM1 ;
    519     VARIABLE Y1 NM1 ;
    520     POLY := 0 ;
    521     X1 := 1 ;
    522     LOOP I 1 IS+1 ;
    523       Y1 := 1 ;
    524       LOOP J 1 IS+1 ;
    525         POLY := POLY + P(I,J)*X1*Y1 ;
    526         Y1 := Y*Y1 ;
    527         ENDLOOP ;
    528       X1 := X*X1 ;
    529       ENDLOOP ;
    530     ENDFUNCTION ;
    531   PROCEDURE POTI F NF P ;
    532     VARIABLE I 1 ;
    533     VARIABLE K 1 ;
    534     VARIABLE FF NM1 ;
    535     VARIABLE SCR NM1 ;
    536     P := 0 ;
    537     LOOP I 1 NF ;
    538       FF := F(I) ;
    539       LOOP K I+1 NF ;
    540         DAPLU FF K 0 SCR ;
    541         FF := SCR ;
    542         ENDLOOP ;
    543       P := P + INTEG(I,FF) ; %INTEG:  255
    544       ENDLOOP ;
    545     DANOT NOC-1 ;
    546     SCR := 0 ;
    547     LOOP I 1 NF ;
    548       SCR := SCR + WABS(DER(I,P)-F(I),WAF) ; %WABS:  249 %DER:  252
    549       ENDLOOP ;
    550     IF SCR>1E-5 ;
    551       WRITE 6 ' --- WARNING in POTI, error norm = '&S(SCR) ; %S:  227
    552       ENDIF;
    553     DANOT NOC ;
    554     ENDPROCEDURE ;
    555   FUNCTION FACT N ;
    556     VARIABLE I 1 ;
    557     FACT := 1 ;
    558     LOOP I 1 N ;
    559       FACT := FACT*I ;
    560       ENDLOOP ;
    561     ENDFUNCTION ;
    562   FUNCTION NMON NO NV ;
    563     VARIABLE I 1 ;
    564     NMON := 1 ;
    565     LOOP I 1 NO ;
    566       NMON := NMON*(NV+I)/I ;
    567       ENDLOOP ;
    568     ENDFUNCTION ;
    569   FUNCTION GAUSS1 X NX DX SIGMA IP MFD ERR ;
    570     VARIABLE NG  1 ;
    571     VARIABLE IXN 1 ;
    572     VARIABLE IX  1 ;
    573     VARIABLE IXM 1 ;
    574     NG := NINT(8*SIGMA) ;
    575     GAUSS1 := 0 ;
    576     IXN := NINT(1+CONS(X)/DX) ;
    577     IF ((IXN-NG<1)+(IXN+NG>NX)) ;
    578       ERR := 1 ;
    579       LOOP IX IXN-NG IXN+NG ;
    580         IXM := IX ;
    581         IF IX<1 ;
    582           IXM := 1 ;
    583           ELSEIF IX>NX ;
    584           IXM := NX ;
    585           ENDIF ;
    586         GAUSS1 := GAUSS1+MFD(IP,IXM)*EXP(-SQR((IX-1-X/DX)/SIGMA)) ;
    587         ENDLOOP ;
    588       ELSEIF TRUE ;
    589       ERR := 0 ;
    590       LOOP IX IXN-NG IXN+NG ;
    591         GAUSS1 := GAUSS1+MFD(IP,IX)*EXP(-SQR((IX-1-X/DX)/SIGMA)) ;
    592         ENDLOOP ;
    593       ENDIF ;
    594     GAUSS1 := GAUSS1/(SQRT(PI)*SIGMA) ;
    595     ENDFUNCTION ;
    596   FUNCTION GAUSS X Z NX NZ DX DZ SIGMA MFD ERR ;
    597     VARIABLE NG  1 ;
    598     VARIABLE IXN 1 ;
    599     VARIABLE IZN 1 ;
    600     VARIABLE SUMZ NM2 ;
    601     VARIABLE IX  1 ;
    602     VARIABLE IZ  1 ;
    603     VARIABLE IXM 1 ;
    604     VARIABLE IZM 1 ;
    605     NG := NINT(8*SIGMA) ;
    606     GAUSS := 0 ;
    607     IXN := NINT(1+CONS(X)/DX) ;
    608     IZN := NINT(1+CONS(Z)/DZ) ;
    609     IF ((IXN-NG<1)+(IXN+NG>NX)+(IZN-NG<1)+(IZN+NG>NZ)) ;
    610       ERR := 1 ;
    611       LOOP IX IXN-NG IXN+NG ;
    612         SUMZ := 0 ;
    613         IXM := IX ;
    614         IF IX<1 ;
    615           IXM := 1 ;
    616           ELSEIF IX>NX ;
    617           IXM := NX ;
    618           ENDIF ;
    619         LOOP IZ IZN-NG IZN+NG ;
    620           IZM := IZ ;
    621           IF IZ<1 ;
    622             IZM := 1 ;
    623             ELSEIF IZ>NZ ;
    624             IZM := NZ ;
    625             ENDIF ;
    626           SUMZ := SUMZ+MFD(IXM,IZM)*EXP(-SQR((IZ-1-Z/DZ)/SIGMA)) ;
    627           ENDLOOP ;
    628         GAUSS := GAUSS+SUMZ*EXP(-SQR((IX-1-X/DX)/SIGMA)) ;
    629         ENDLOOP ;
    630       ELSEIF TRUE ;
    631       ERR := 0 ;
    632       LOOP IX IXN-NG IXN+NG ;
    633         SUMZ := 0 ;
    634         LOOP IZ IZN-NG IZN+NG ;
    635           SUMZ := SUMZ+MFD(IX,IZ)*EXP(-SQR((IZ-1-Z/DZ)/SIGMA)) ;
    636           ENDLOOP ;
    637         GAUSS := GAUSS+SUMZ*EXP(-SQR((IX-1-X/DX)/SIGMA)) ;
    638         ENDLOOP ;
    639       ENDIF ;
    640     GAUSS := GAUSS/(PI*SIGMA*SIGMA) ;
    641     ENDFUNCTION ;
    642   PROCEDURE WSET W ;
    643     WAF := W ;
    644     ENDPROCEDURE ;
    645   PROCEDURE ESET E ;
    646     EPS := E ;
    647     ENDPROCEDURE ;
    648   PROCEDURE DSET E ;
    649     DAEPS E ;
    650     DEPS := E ;
    651     ENDPROCEDURE ;
    652   PROCEDURE CG PIC X Y N ;
    653     VARIABLE I 1 ;
    654     GRMOVE X(1) Y(1) 0 PIC ;
    655     LOOP I 2 N ;
    656       GRDRAW X(I) Y(I) 0 PIC ;
    657       ENDLOOP ;
    658     ENDPROCEDURE ;
    659   FUNCTION ENGE IMP IEE IEM S ;
    660     IF CONS(S)<-3 ;
    661       ENGE := 1+0*S ;
    662       ELSEIF CONS(S)>5 ;
    663       ENGE := 0*S ;
    664       ELSEIF LO(1) ;
    665       ENGE :=      ENGEC(IMP,IEE,IEM,1) + S*( ENGEC(IMP,IEE,IEM,2)    
                              + S*( ENGEC(IMP,IEE,IEM,3) + S*( ENGEC(IMP,IEE,I
                  EM,4)                + S*( ENGEC(IMP,IEE,IEM,5) + S*  ENGEC(
                  IMP,IEE,IEM,6) )))) ;
    666       IF     CONS(ENGE)<-60 ;
    667         ENGE := -60 ;
    668         ELSEIF CONS(ENGE)>30  ;
    669         ENGE :=  30 ;
    670         ENDIF ;
    671       ENGE := 1/(1+EXP(ENGE)) ;
    672       ENDIF ;
    673     ENDFUNCTION ;
    674   PROCEDURE FC IMP IEE IEM C1 C2 C3 C4 C5 C6 ;
    675     VARIABLE S 1 ;
    676     VARIABLE IFER 1 ;
    677     VARIABLE F0 1 ;
    678     VARIABLE F 1 ;
    679     ENGEC(IMP,IEE,IEM,1) := C1 ;
    680     ENGEC(IMP,IEE,IEM,2) := C2 ;
    681     ENGEC(IMP,IEE,IEM,3) := C3 ;
    682     ENGEC(IMP,IEE,IEM,4) := C4 ;
    683     ENGEC(IMP,IEE,IEM,5) := C5 ;
    684     ENGEC(IMP,IEE,IEM,6) := C6 ;
    685     IFER := 0 ;
    686     F0 := ENGE(IMP,IEE,IEM,5) ; %ENGE:  659
    687     LOOP S 4 -3 -1 ;
    688       F:= ENGE(IMP,IEE,IEM,S) ; %ENGE:  659
    689       IF F<F0 ;
    690         IFER := 1 ;
    691         ENDIF ;
    692       F0 := F ;
    693       ENDLOOP ;
    694     IF IFER=1 ;
    695       WRITE 6 ' *** ERROR in FC, not monotonic.' ;
    696       ENDIF ;
    697     IF ABS(ENGE(IMP,IEE,IEM,5))>0.001 ; %ENGE:  659
    698       IFER := 1 ;
    699       WRITE 6 ' *** ERROR in FC, not 0 outside.' ;
    700       ENDIF ;
    701     IF ABS(ENGE(IMP,IEE,IEM,-3)-1)>0.001 ; %ENGE:  659
    702       IFER := 1 ;
    703       WRITE 6 ' *** ERROR in FC, not 1 inside.' ;
    704       ENDIF ;
    705     IF IFER=1 ;
    706       WRITE 6 '   S=z/D   Enge function: outside(S=5) to inside(S=-3)'
                   ;
    707       LOOP S 5 -3 -1 ;
    708         F:= ENGE(IMP,IEE,IEM,S) ; %ENGE:  659
    709         WRITE 6 SF(S,'(F6.0)')&SF(F,'(G16.4)') ; %SF:  230 %SF:  230
    710         ENDLOOP ;
    711       ENDIF ;
    712     ENDPROCEDURE ;
    713   PROCEDURE FP IMP IEE IEM TL ID IU ;
    714     VARIABLE PIC 1000 ;
    715     VARIABLE X1 1 ;
    716     VARIABLE X2 1 ;
    717     VARIABLE XD 1 ;
    718     VARIABLE X10 1 ;
    719     VARIABLE X20 1 ;
    720     VARIABLE XP 10 ;
    721     VARIABLE I 1 ;
    722     VARIABLE Y1 1 ;
    723     VARIABLE Y2 1 ;
    724     VARIABLE YD 1 ;
    725     VARIABLE YP 30 ;
    726     VARIABLE X 1 201 ;
    727     VARIABLE Y 1 201 ;
    728     VARIABLE NI 1 ;
    729     VARIABLE JD 1 NV ;
    730     VARIABLE T 100 ;
    731     VARIABLE TMP 10 ;
    732     T := 'Enge Function' ;
    733     IF ID>0 ;
    734       IF LOV=0 ;
    735         WRITE 6 ' *** ERROR, call OV before FP.' ;
    736         QUIT 0 ;
    737         ELSEIF ID>NO ;
    738         WRITE 6 ' *** ERROR in FP, order > NO.' ;
    739         QUIT 0 ;
    740         ENDIF ;
    741       LOOP I 1 NV ;
    742         JD(I) := 0 ;
    743         ENDLOOP ;
    744       JD(1) := ID ;
    745       T := T&' Derivative '&SI(ID) ; %SI:  233
    746       ENDIF ;
    747     IF      IMP=1 ;
    748       TMP := 'Di' ;
    749       ELSEIF IMP=2 ;
    750       TMP := 'Quadru' ;
    751       ELSEIF IMP=3 ;
    752       TMP := 'Sextu' ;
    753       ELSEIF IMP=4 ;
    754       TMP := 'Octu' ;
    755       ELSEIF IMP=5 ;
    756       TMP := 'Deca' ;
    757       ELSEIF IMP=6 ;
    758       TMP := 'Duodeca' ;
    759       ELSEIF (IMP>6)*(IMP<16) ;
    760       TMP := SI(2*IMP)&'-' ; %SI:  233
    761       ELSEIF 1=1 ;
    762       WRITE 6         ' *** ERROR in FP, not supported. IMP='&SI(IMP) 
                  ; %SI:  233
    763       QUIT 0 ;
    764       ENDIF ;
    765     T := T&', ' ;
    766     IF IEM=2 ;
    767       T := T&'E-' ;
    768       ENDIF ;
    769     T := T&TMP&'pole, ' ;
    770     IF IEE=1 ;
    771       T := T&'Entrance' ;
    772       ELSEIF IEE=2 ;
    773       T := T&'Exit' ;
    774       ENDIF ;
    775     IF TYPE(TL)=TYPE(' ') ;
    776       IF TL#' ' ;
    777         T := T&': '&TL ;
    778         ENDIF ;
    779       ENDIF ;
    780     NI := 200 ;
    781     X1 := -3.5 ;
    782     X2 := 5.5 ;
    783     XD := X2-X1 ;
    784     X10 := -3 ;
    785     X20 := 5 ;
    786     IF ID>0 ;
    787       Y1 := 1.D30 ;
    788       Y2 := -1.D30 ;
    789       XP := X1+DA(1) ;
    790       LOOP I 1 NI+1 ;
    791         X(I) := CONS(XP) ;
    792         YP := ENGE(IMP,IEE,IEM,XP) ; %ENGE:  659
    793         DAPEA YP JD NV TMP ;
    794         Y(I) := TMP ;
    795         Y1 := MIN(Y1,TMP) ; %MIN:  174
    796         Y2 := MAX(Y2,TMP) ; %MAX:  171
    797         XP := XP+XD/NI ;
    798         ENDLOOP ;
    799       ELSEIF 1=1 ;
    800       Y1 := 0 ;
    801       Y2 := 1 ;
    802       XP := X1 ;
    803       LOOP I 1 NI+1 ;
    804         X(I) := XP ;
    805         Y(I) := ENGE(IMP,IEE,IEM,XP) ; %ENGE:  659
    806         XP := XP+XD/NI ;
    807         ENDLOOP ;
    808       ENDIF ;
    809     YD := Y2-Y1 ;
    810     CLEAR PIC ;
    811     GRCOLR 5 PIC ;
    812     GRMOVE X1 0 0 PIC ;
    813     GRDRAW X2 0 0 PIC ;
    814     GRMOVE   0 Y1-0.1*YD 0 PIC ;
    815     GRDRAW   0 Y2+0.1*YD 0 PIC ;
    816     GRMOVE X10 Y1-0.1*YD 0 PIC ;
    817     GRDRAW X10 Y2+0.1*YD 0 PIC ;
    818     GRMOVE X20 Y1-0.1*YD 0 PIC ;
    819     GRDRAW X20 Y2+0.1*YD 0 PIC ;
    820     IF ID<1 ;
    821       GRMOVE X1 Y2 0 PIC ;
    822       GRDRAW X2 Y2 0 PIC ;
    823       ENDIF ;
    824     GRCOLR 1 PIC ;
    825     GRMOVE X1 Y1-0.1*YD 0 PIC ;
    826     GRDRAW X2 Y1-0.1*YD 0 PIC ;
    827     GRDRAW X2 Y2+0.1*YD 0 PIC ;
    828     GRDRAW X1 Y2+0.1*YD 0 PIC ;
    829     GRDRAW X1 Y1-0.1*YD 0 PIC ;
    830     CG PIC X Y NI+1 ; %CG:  652
    831     GRCOLR 2 PIC ;
    832     IF ID>0 ;
    833       TMP := '(G10.3)' ;
    834       ELSEIF ID<1 ;
    835       TMP := '(I2)' ;
    836       ENDIF ;
    837     GRMOVE   X2+0.005*XD Y2-0.01*YD 0 PIC ;
    838     GRCHAR SF(Y2,TMP) PIC ; %SF:  230
    839     GRMOVE   X2+0.005*XD Y1-0.01*YD 0 PIC ;
    840     GRCHAR SF(Y1,TMP) PIC ; %SF:  230
    841     GRMOVE   X2+0.005*XD   -0.01*YD 0 PIC ;
    842     GRCHAR ' 0'       PIC ;
    843     GRMOVE   X2-0.025*XD Y1-0.15*YD 0 PIC ;
    844     GRCHAR SF(X2,'(F3.1)') PIC ; %SF:  230
    845     GRMOVE   X1-0.035*XD Y1-0.15*YD 0 PIC ;
    846     GRCHAR SF(X1,'(F4.1)') PIC ; %SF:  230
    847     GRMOVE  X20-0.007*XD Y1-0.15*YD 0 PIC ;
    848     GRCHAR SI(X20)    PIC ; %SI:  233
    849     GRMOVE  X10-0.015*XD Y1-0.15*YD 0 PIC ;
    850     GRCHAR SI(X10)    PIC ; %SI:  233
    851     GRMOVE     -0.007*XD Y1-0.15*YD 0 PIC ;
    852     GRCHAR '0'        PIC ;
    853     GRMOVE X20/2-0.05*XD Y1-0.15*YD 0 PIC ;
    854     GRCHAR 'outside'  PIC ;
    855     GRMOVE X10/2-0.04*XD Y1-0.15*YD 0 PIC ;
    856     GRCHAR 'inside'   PIC ;
    857     GRMOVE X2+0.07*XD    Y1-0.15*YD 0 PIC ;
    858     GRCHAR 'x 2d'     PIC ;
    859     GRMOVE X2+0.15*XD 0 0 PIC ;
    860     GRMOVE X1 Y2+0.15*YD 0 PIC ;
    861     GRCHAR T PIC ;
    862     WRITE IU PIC ;
    863     ENDPROCEDURE ;
    864   PROCEDURE FD ;
    865     VARIABLE I 1 ;
    866     VARIABLE J 1 ;
    867     VARIABLE K 1 ;
    868     LOOP J 1 2 ;
    869       LOOP K 1 2 ;
    870         FC 1 J K 0.478959 1.911289 -1.185953 1.630554 -1.082657 0.3181
                  11 ; %FC:  674
    871         FC 2 J K 0.296471 4.533219 -2.270982 1.068627 -0.036391 0.0222
                  61 ; %FC:  674
    872         LOOP I 3 15 ;
    873           FC I J K 0.176659 7.153079 -3.113116 3.444311 -1.976740 0.54
                  0068 ; %FC:  674
    874           ENDLOOP ;
    875         ENDLOOP ;
    876       ENDLOOP ;
    877     LE := 1 ;
    878     ENDPROCEDURE ;
    879   PROCEDURE DEF ;
    880     AMU := 1.66053873D-27 ;
    881     EZERO := 1.602176462D-19 ;
    882     CLIGHT:= 2.99792458D8 ;
    883     AMUMEV := AMU*SQR(CLIGHT)/EZERO*1D-6 ;
    884     PI := 3.1415926535897932384626433832795028842 ;
    885     DEGRAD := PI / 180 ;
    886     ESET 1E-10 ; %ESET:  645
    887     WSET .1 ; %WSET:  642
    888     DSET 1E-16 ; %DSET:  648
    889     LTRUE TRUE ;
    890     LFALSE FALSE ;
    891     ENDPROCEDURE ;
    892   PROCEDURE CR ;
    893     VARIABLE I 1 ;
    894     LOOP I 1 8 ;
    895       RAY(I) := 0 ;
    896       RSC(I) := 0 ;
    897       ENDLOOP ;
    898     NRAY := 0 ;
    899     LOOP I 1 3 ;
    900       SPI(I) := 0 ;
    901       SSC(I) := 0 ;
    902       ENDLOOP ;
    903     NSPN := 0 ;
    904     LCR := 1 ;
    905     RCOL := 1 ;
    906     REMAIN := 1 ;
    907     REMOVE := 0 ;
    908     LENV := 0 ;
    909     ENDPROCEDURE ;
    910   PROCEDURE CO NNO ;
    911     NOC := NNO ;
    912     DANOT NOC ;
    913     ENDPROCEDURE ;
    914   PROCEDURE OV ORD NND NNP ;
    915     VARIABLE I 1 ;
    916     IF NND>3 ;
    917       WRITE 6 ' *** ERROR in OV, ND > 3 ' ;
    918       QUIT 0 ;
    919       ELSEIF NND<0 ;
    920       WRITE 6 ' *** ERROR in OV, ND < 0 ' ;
    921       QUIT 0 ;
    922       ELSEIF NNP<0 ;
    923       WRITE 6 ' *** ERROR in OV, NP < 0 ' ;
    924       QUIT 0 ;
    925       ENDIF ;
    926     NO := ORD ;
    927     ND := NND ;
    928     TWOND := 2*ND ;
    929     NP := NNP ;
    930     NV := TWOND + NP ;
    931     IF LWA<0 ;
    932       LWA := -LWA ;
    933       NV := NV+1 ;
    934       ENDIF ;
    935     IF NV>40 ;
    936       IF LWA=0 ;
    937         WRITE 6 '*** ERROR in OV, 2*ND+NP > 40 ' ;
    938         ELSEIF LWA#0 ;
    939         WRITE 6 '*** ERROR in OV, 2*ND+NP > 39 ' ;
    940         ENDIF ;
    941       QUIT 0 ;
    942       ENDIF ;
    943     DEF ; %DEF:  879
    944     IF ND=0 ;
    945       DAINI NO NV 0 NM1 ;
    946       ELSEIF TRUE ;
    947       DAINI NO+1 MAX(NV,3) 0 NM1 ; %MAX:  171
    948       ENDIF ;
    949     NM2 := NMON(NO,TWOND+NP) ; %NMON:  562
    950     NM3 := NMON(NO+1,3) ; %NMON:  562
    951     NMP := NMON(NO,NP) ; %NMON:  562
    952     LOOP I NV+1 20 ;
    953       DD(I) := 0 ;
    954       ENDLOOP ;
    955     SVSCR ; %SVSCR:  261
    956     LSCR := MAX(50000,LSCR) ; %MAX:  171
    957     LSCR := MAX(LSCR,2*NM1) ; %MAX:  171
    958     SCRLEN LSCR ;
    959     LSCT := 50000 ;
    960     LOOP I 1 MAX(NV,3) ; %MAX:  171
    961       DD(I) := DA(I) ;
    962       ENDLOOP ;
    963     DSET 1E-16 ; %DSET:  648
    964     CO NO ; %CO:  910
    965     LOV := 1 ;
    966     LRP := 0 ;
    967     LUM := 0 ;
    968     LPI := 0 ;
    969     LCB := 1 ;
    970     LPG := 0 ;
    971     LPS := 0 ;
    972     LM := 0 ;
    973     LFR := 0 ;
    974     LFR2 := 0 ;
    975     LENV := 0 ;
    976     LSYS := 1 ;
    977     LCR := 0 ;
    978     LCE := 1 ;
    979     LAX := 1 ;
    980     LTRR := 0 ;
    981     LTRI := 0 ;
    982     LTRPRAY := 0 ;
    983     LTRPSPI := 0 ;
    984     CR ; %CR:  892
    985     NRAYTRA0 := 251 ;
    986     NRAYTRA := NRAY ;
    987     FD ; %FD:  864
    988     ENDPROCEDURE ;
    989   FUNCTION PARA I ;
    990     PARA := 1 ;
    991     IF     LWA=1 ;
    992       IF TWOND+I<NV ;
    993         PARA := 1+DA(TWOND+I) ;
    994         ENDIF ;
    995       ELSEIF LWA#1 ;
    996       IF TWOND+I<NV+1 ;
    997         PARA := 1+DA(TWOND+I) ;
    998         ENDIF ;
    999       ENDIF ;
   1000     ENDFUNCTION ;
   1001   PROCEDURE SB PX PA R12 PY PB R34 PT PD R56 PG PZ ;
   1002     IF LOV=0 ;
   1003       WRITE 6 ' *** ERROR, call OV before SB' ;
   1004       QUIT 0 ;
   1005       ENDIF ;
   1006     PHSP(1) := PX ;
   1007     PHSP(2) := PA ;
   1008     PHSP(3) := PY ;
   1009     PHSP(4) := PB ;
   1010     PHSP(5) := PT ;
   1011     PHSP(6) := PD ;
   1012     PHSP(7) := PG ;
   1013     PHSP(8) := PZ ;
   1014     PHSR(1) := R12 ;
   1015     PHSR(2) := R34 ;
   1016     PHSR(3) := R56 ;
   1017     LPS := 1 ;
   1018     ENDPROCEDURE ;
   1019   PROCEDURE SP P1 P2 P3 P4 P5 P6 ;
   1020     PARS(1) := P1 ;
   1021     PARS(2) := P2 ;
   1022     PARS(3) := P3 ;
   1023     PARS(4) := P4 ;
   1024     PARS(5) := P5 ;
   1025     PARS(6) := P6 ;
   1026     ENDPROCEDURE ;
   1027   PROCEDURE LOCTRA X Y Z T P A NAP ;
   1028     VARIABLE CT NMP ;
   1029     VARIABLE ST NMP ;
   1030     VARIABLE CP NMP ;
   1031     VARIABLE SP NMP ;
   1032     VARIABLE CA NMP ;
   1033     VARIABLE SA NMP ;
   1034     VARIABLE CB NMP ;
   1035     VARIABLE SB NMP ;
   1036     VARIABLE CM NMP ;
   1037     VARIABLE SM NMP ;
   1038     VARIABLE N NMP ;
   1039     CT := COS(T) ;
   1040     ST := SIN(T) ;
   1041     CP := COS(P) ;
   1042     SP := SIN(P) ;
   1043     CA := COS(A) ;
   1044     SA := SIN(A) ;
   1045     IF ABS(ST*SP)=1 ;
   1046       CB := 0 ;
   1047       SB := 1 ;
   1048       ELSEIF TRUE ;
   1049       N := SQRT(1-SQR(ST)*SQR(SP)) ;
   1050       CB := CP/N ;
   1051       SB := CT*SP/N ;
   1052       ENDIF ;
   1053     CM := CA*CB+SA*SB ;
   1054     SM := SA*CB-CA*SB ;
   1055     NAP(1) := X+(CM*CT*CP-SM*SP)*DD(1)-(CM*SP+SM*CT*CP)*DD(2)+(ST*CP)*
                  DD(3) ;
   1056     NAP(2) := Y+(CM*CT*SP+SM*CP)*DD(1)+(CM*CP-SM*CT*SP)*DD(2)+(ST*SP)*
                  DD(3) ;
   1057     NAP(3) := Z-(CM*ST         )*DD(1)+(      SM*ST   )*DD(2)+(CT   )*
                  DD(3) ;
   1058     ENDPROCEDURE ;
   1059   PROCEDURE LOCSET X Z P S V T ;
   1060     XLOC := X ;
   1061     ZLOC := Z ;
   1062     PLOC := P ;
   1063     SLOC := S ;
   1064     VLOC := V ;
   1065     TLOC := T ;
   1066     ENDPROCEDURE ;
   1067   PROCEDURE MR NAP LAP ;
   1068     VARIABLE COD 1 NV ;
   1069     VARIABLE NUM 1 ;
   1070     VARIABLE I 1 ;
   1071     VARIABLE MM NM1 NV ;
   1072     NUM := MIN(TWOND,4) ; %MIN:  174
   1073     LOOP I 1 TWOND ;
   1074       MM(I) := NAP(I) ;
   1075       ENDLOOP ;
   1076     LOOP I TWOND+1 NV ;
   1077       MM(I) := DD(I) ;
   1078       ENDLOOP ;
   1079     MI MM MM NV I NOC NV NM1 ; %MI:  375
   1080     IF I#0 ;
   1081       WRITE 6 ' *** ERROR in REV, no inverse' ;
   1082       QUIT 0 ;
   1083       ENDIF ;
   1084     LOOP I 2 NUM 2 ;
   1085       COD(I-1) := DD(I-1) ;
   1086       COD(I) := -DD(I) ;
   1087       MM(I) := -MM(I) ;
   1088       ENDLOOP ;
   1089     LOOP I NUM+1 NV ;
   1090       COD(I) := DD(I) ;
   1091       ENDLOOP ;
   1092     IF ND>2 ;
   1093       COD(5) := -DD(5) ;
   1094       MM(5) := -MM(5) ;
   1095       ENDIF ;
   1096     POLVAL 1 MM TWOND COD NV LAP TWOND ;
   1097     ENDPROCEDURE ;
   1098   PROCEDURE MT IAP NAP PHI ;
   1099     VARIABLE R 1 4 4 ;
   1100     VARIABLE COD NM1 NV ;
   1101     VARIABLE I 1 ;
   1102     VARIABLE J 1 ;
   1103     VARIABLE S 1 ;
   1104     VARIABLE C 1 ;
   1105     IF PHI=0 ;
   1106       C := 1 ;
   1107       S := 0 ;
   1108       ELSEIF ABS(PHI+90)=180 ;
   1109       C := 0 ;
   1110       S := 1 ;
   1111       ELSEIF ABS(PHI)=180 ;
   1112       C := -1 ;
   1113       S := 0 ;
   1114       ELSEIF ABS(PHI-90)=180 ;
   1115       C := 0 ;
   1116       S := -1 ;
   1117       ELSEIF TRUE ;
   1118       C := COS(PHI*DEGRAD) ;
   1119       S := SIN(PHI*DEGRAD) ;
   1120       ENDIF ;
   1121     IF (TWOND=1)*(S#0) ;
   1122       WRITE 6 ' *** ERROR in MT, ND too low' ;
   1123       QUIT 0 ;
   1124       ENDIF ;
   1125     LOOP I 1 4 ;
   1126       LOOP J 1 4 ;
   1127         R(I,J) := 0 ;
   1128         ENDLOOP ;
   1129       R(I,I) := C ;
   1130       ENDLOOP ;
   1131     LOOP I 1 2 ;
   1132       R(I,I+2) := S ;
   1133       R(I+2,I) := -S ;
   1134       ENDLOOP ;
   1135     LOOP I 1 4 ;
   1136       COD(I) := 0 ;
   1137       LOOP J 1 4 ;
   1138         COD(I) := COD(I)+R(I,J)*DD(J) ;
   1139         ENDLOOP ;
   1140       ENDLOOP ;
   1141     LOOP I 5 NV ;
   1142       COD(I) := DD(I) ;
   1143       ENDLOOP ;
   1144     POLVAL 1 IAP TWOND COD NV NAP TWOND ;
   1145     LOOP I 1 4 ;
   1146       COD(I) := 0 ;
   1147       LOOP J 1 4 ;
   1148         COD(I) := COD(I)+R(J,I)*NAP(J) ;
   1149         ENDLOOP ;
   1150       ENDLOOP ;
   1151     LOOP I 1 4 ;
   1152       NAP(I) := COD(I) ;
   1153       ENDLOOP ;
   1154     ENDPROCEDURE ;
   1155   FUNCTION SIGMA I J ;
   1156     VARIABLE K 1 ;
   1157     IF (I=J)*(INT(I/2)#I/2) ;
   1158       SIGMA := SQR(PHSP(I)*ME(I,I))+SQR(PHSP(I+1)*ME(I,I+1))         +
                  2*PHSP(I)*PHSP(I+1)*PHSR((I+1)/2)*ME(I,I)*ME(I,I+1) ; %ME:  
                  461 %ME:  461 %ME:  461 %ME:  461
   1159       ELSEIF (I=J)*(INT(I/2)=I/2) ;
   1160       SIGMA := SQR(PHSP(I-1)*ME(I,I-1))+SQR(PHSP(I)*ME(I,I))         +
                  2*PHSP(I-1)*PHSP(I)*PHSR(I/2)*ME(I,I-1)*ME(I,I) ; %ME:  461 
                  %ME:  461 %ME:  461 %ME:  461
   1161       ELSEIF (ABS(I-J)=1)*(INT(MAX(J,I)/2)*2=MAX(J,I)) ; %MAX:  171 %M
                  AX:  171
   1162       K := MIN(I,J) ; %MIN:  174
   1163       SIGMA := SQR(PHSP(K))*ME(K,K)*ME(K+1,K)         +SQR(PHSP(K+1))*
                  ME(K,K+1)*ME(K+1,K+1) ; %ME:  461 %ME:  461 %ME:  461 %ME:  
                  461
   1164       SIGMA := SIGMA         +PHSP(K)*PHSP(K+1)*PHSR((K+1)/2)*(ME(K,K)
                  *ME(K+1,K+1)         +ME(K,K+1)*ME(K+1,K)) ; %ME:  461 %ME: 
                   461 %ME:  461 %ME:  461
   1165       ELSEIF TRUE ;
   1166       WRITE 6 ' *** ERROR in SIGMA, wrong element' ;
   1167       QUIT 0 ;
   1168       ENDIF ;
   1169     ENDFUNCTION ;
   1170   PROCEDURE UPDATEMAP MAPT MAPO MAPU SPNT SPNO SPNU ;
   1171     VARIABLE MS NM1 MAX(8,NV) ; %MAX:  171
   1172     VARIABLE I 1 ;
   1173     PROCEDURE SPNMUL ;
   1174       VARIABLE J 1 ;
   1175       VARIABLE K 1 ;
   1176       VARIABLE SM NM2 3 3 ;
   1177       VARIABLE SV NM2 9 ;
   1178       VARIABLE SVO NM2 9 ;
   1179       LOOP I 1 3 ;
   1180         LOOP J 1 3 ;
   1181           SM(I,J) := SPNO(I,J) ;
   1182           SVO(3*(I-1)+J) := SPNT(I,J) ;
   1183           ENDLOOP ;
   1184         ENDLOOP ;
   1185       POLVAL 2 SVO 9 MS NV SV 9 ;
   1186       LOOP I 1 3 ;
   1187         LOOP J 1 3 ;
   1188           SPNU(I,J) := 0 ;
   1189           LOOP K 1 3 ;
   1190             SPNU(I,J) := SPNU(I,J) + SV(3*(I-1)+K)*SM(K,J) ;
   1191             ENDLOOP ;
   1192           ENDLOOP ;
   1193         ENDLOOP ;
   1194       ENDPROCEDURE ;
   1195     LOOP I 1 TWOND ;
   1196       MS(I) := MAPO(I) ;
   1197       ENDLOOP ;
   1198     LOOP I TWOND+1 NV ;
   1199       MS(I) := DD(I) ;
   1200       ENDLOOP ;
   1201     POLVAL 1 MAPT TWOND MS NV MAPU TWOND ;
   1202     IF LSPN=1 ;
   1203       SPNMUL ; %SPNMUL: 1173
   1204       ENDIF ;
   1205     ENDPROCEDURE ;
   1206   PROCEDURE UPDATE IM IR ;
   1207     VARIABLE PIC LSCT ;
   1208     VARIABLE RB 1 ;
   1209     VARIABLE COD 1 3 ;
   1210     VARIABLE XF 1 ;
   1211     VARIABLE YF 1 ;
   1212     VARIABLE ZF 1 ;
   1213     VARIABLE SF 1 ;
   1214     VARIABLE I 1 ;
   1215     VARIABLE J 1 ;
   1216     PROCEDURE SPNVEC ;
   1217       VARIABLE SVO NM2 9 ;
   1218       VARIABLE SSCM NRAY 9 ;
   1219       VARIABLE SCRV NRAY 3 ;
   1220       VARIABLE SCR NRAY ;
   1221       IF LCR=1 ;
   1222         LCR := 0 ;
   1223         SCR := 0 ;
   1224         LOOP I 1 3 ;
   1225           SCR := SCR+SQR(SPI(I)) ;
   1226           ENDLOOP ;
   1227         VELSET SCR 1 1 ;
   1228         IF VMIN(SCR)<1E-3 ;
   1229           WRITE 6 ' *** ERROR in UPDATE, there is a zero spin vector' 
                  ;
   1230           QUIT 0 ;
   1231           ENDIF ;
   1232         ENDIF ;
   1233       LOOP I 1 3 ;
   1234         LOOP J 1 3 ;
   1235           SVO(3*(I-1)+J) := SSCR(I,J) ;
   1236           ENDLOOP ;
   1237         ENDLOOP ;
   1238       POLVAL 2 SVO 9 RAY 8 SSCM 9 ;
   1239       SCR := 0 ;
   1240       LOOP I 1 3 ;
   1241         SCRV(I) := 0 ;
   1242         LOOP J 1 3 ;
   1243           SCRV(I) := SCRV(I)+SSCM(3*(I-1)+J)*SPI(J) ;
   1244           ENDLOOP ;
   1245         SCR := SCR+SQR(SCRV(I)) ;
   1246         ENDLOOP ;
   1247       SCR := SQRT(SCR) ;
   1248       VELSET SCR 1 1 ;
   1249       LOOP I 1 3 ;
   1250         SPI(I) := SCRV(I)/SCR ;
   1251         ENDLOOP ;
   1252       ENDPROCEDURE ;
   1253     PROCEDURE NEWENV ;
   1254       LOOP I 1 MIN(TWOND,4) 2 ; %MIN:  174
   1255         J := (I+1)/2 ;
   1256         ERAY(I) := SQRT(SQR(PHSP(I)*ME(I,I))+SQR(PHSP(I+1)*ME(I,I+1)) 
                                        +2*PHSP(I)*PHSP(I+1)*PHSR(J)*ME(I,I)*M
                  E(I,I+1)) ; %ME:  461 %ME:  461 %ME:  461 %ME:  461
   1257         ERAY(I+1) := SQR(PHSP(I))*ME(I,I)*ME(I+1,I)                   
                       +SQR(PHSP(I+1))*ME(I,I+1)*ME(I+1,I+1) ; %ME:  461 %ME: 
                   461 %ME:  461 %ME:  461
   1258         ERAY(I+1) := (PHSP(I)*PHSP(I+1)*PHSR(J)*                      
                     (ME(I,I)*ME(I+1,I+1)+ME(I,I+1)*ME(I+1,I))                
                          +ERAY(I+1))/ERAY(I) ; %ME:  461 %ME:  461 %ME:  461 
                  %ME:  461
   1259         EMAX(J) := MAX(EMAX(J),ERAY(I)) ; %MAX:  171
   1260         ENDLOOP ;
   1261       ENDPROCEDURE ;
   1262     PROCEDURE CTR X Y Z ;
   1263       COD(1) := X ;
   1264       COD(2) := Y ;
   1265       COD(3) := Z ;
   1266       POLVAL -1 GTRA 3 COD 3 COD 3 ;
   1267       XF := COD(1) ;
   1268       YF := COD(2) ;
   1269       ZF := COD(3) ;
   1270       ENDPROCEDURE ;
   1271     PROCEDURE CURV X2 Y2 A1 B1 A2 B2 PIC ;
   1272       VARIABLE T1X 1 ;
   1273       VARIABLE T1Y 1 ;
   1274       VARIABLE T1Z 1 ;
   1275       VARIABLE T2X 1 ;
   1276       VARIABLE T2Y 1 ;
   1277       VARIABLE T2Z 1 ;
   1278       IF LPG#0 ;
   1279         CTR X2*LPG Y2*LPG 0 ; %CTR: 1262
   1280         T1X := COS(GPLOC-PLOC)*A1*LPG-SIN(GPLOC-PLOC) ;
   1281         T1Y := B1*LPG ;
   1282         T1Z := COS(GPLOC-PLOC)+SIN(GPLOC-PLOC)*A1*LPG ;
   1283         T2X := COS(GPLOC)*A2*LPG-SIN(GPLOC) ;
   1284         T2Y := B2*LPG ;
   1285         T2Z := COS(GPLOC) +SIN(GPLOC)*A2*LPG ;
   1286         ELSEIF TRUE ;
   1287         XF := X2 ;
   1288         YF := Y2 ;
   1289         ZF := SF ;
   1290         T1X := A1 ;
   1291         T1Y := B1 ;
   1292         T1Z := 1 ;
   1293         T2X := A2 ;
   1294         T2Y := B2 ;
   1295         T2Z := 1 ;
   1296         ENDIF ;
   1297       GRCURV ZF XF YF T1Z T1X T1Y T2Z T2X T2Y PIC ;
   1298       ENDPROCEDURE ;
   1299     PROCEDURE LINE IS P X Y Z SZ ;
   1300       IF LPG#0 ;
   1301         IF P#0 ;
   1302           CTR (RB+X*LPG)*COS(PLOC)-RB Y*LPG -(RB+X*LPG)*SIN(PLOC) ; %C
                  TR: 1262
   1303           ELSEIF TRUE ;
   1304           CTR X*LPG Y*LPG Z ; %CTR: 1262
   1305           ENDIF ;
   1306         ELSEIF TRUE ;
   1307         XF := X ;
   1308         YF := Y ;
   1309         ZF := SZ ;
   1310         ENDIF ;
   1311       IF IS=0 ;
   1312         GRMOVE ZF XF YF SYS ;
   1313         ELSEIF TRUE ;
   1314         GRDRAW ZF XF YF SYS ;
   1315         ENDIF ;
   1316       ENDPROCEDURE ;
   1317     PROCEDURE ELEM ;
   1318       IF MAX(ABS(DR*LPG),ABS(DR))>1E-10 ; %MAX:  171
   1319         RB := 1D6 ;
   1320         IF PLOC#0 ;
   1321           RB := SLOC/PLOC ;
   1322           ENDIF ;
   1323         LINE 0 PLOC -DR -DR -SLOC SPOS ; %LINE: 1299
   1324         LINE 1 PLOC  DR -DR -SLOC SPOS ; %LINE: 1299
   1325         LINE 1 PLOC  DR  DR -SLOC SPOS ; %LINE: 1299
   1326         LINE 1 PLOC -DR  DR -SLOC SPOS ; %LINE: 1299
   1327         LINE 1 PLOC -DR -DR -SLOC SPOS ; %LINE: 1299
   1328         IF ABS(SLOC)>1E-5 ;
   1329           LINE 0 PLOC  DR  DR -SLOC SPOS ; %LINE: 1299
   1330           CURV  DR  DR 0 0 0 0 SYS ; %CURV: 1271
   1331           LINE 0 PLOC -DR -DR -SLOC SPOS ; %LINE: 1299
   1332           CURV -DR -DR 0 0 0 0 SYS ; %CURV: 1271
   1333           LINE 0 PLOC  DR -DR -SLOC SPOS ; %LINE: 1299
   1334           CURV  DR -DR 0 0 0 0 SYS ; %CURV: 1271
   1335           LINE 0 PLOC -DR  DR -SLOC SPOS ; %LINE: 1299
   1336           CURV -DR  DR 0 0 0 0 SYS ; %CURV: 1271
   1337           IF LCE#0 ;
   1338             XF := -DR*.98 ;
   1339             YF := -DR*.98 ;
   1340             ZF := DR/10 ;
   1341             IF LPG=0 ;
   1342               ZF := ZF+SPOS ;
   1343               ELSEIF PLOC=0 ;
   1344               CTR XF*LPG YF*LPG ZF*LPG-SLOC ; %CTR: 1262
   1345               ELSEIF TRUE ;
   1346               CTR (RB+XF*LPG)*COS(PLOC*(1-ZF*LPG/SLOC))-RB            
                               YF*LPG -(RB+XF*LPG)*SIN(PLOC*(1-ZF*LPG/SLOC)) ;
                   %CTR: 1262
   1347               ENDIF ;
   1348             GRMOVE ZF XF YF SYS ;
   1349             GRCHAR CE SYS ;
   1350             ENDIF ;
   1351           LINE 0 0 -DR  DR 0 SF ; %LINE: 1299
   1352           LINE 1 0 -DR -DR 0 SF ; %LINE: 1299
   1353           LINE 1 0  DR -DR 0 SF ; %LINE: 1299
   1354           LINE 1 0  DR  DR 0 SF ; %LINE: 1299
   1355           LINE 1 0 -DR  DR 0 SF ; %LINE: 1299
   1356           ENDIF ;
   1357         ENDIF ;
   1358       ENDPROCEDURE ;
   1359     IF IM#0 ;
   1360       UPDATEMAP MSC MAP MAP SSCR SPNR SPNR ; %UPDATEMAP: 1170
   1361       ENDIF ;
   1362     IF IR*NRAY#0 ;
   1363       IF (LSPN=1)*(NSPN>0) ;
   1364         SPNVEC ; %SPNVEC: 1216
   1365         ENDIF ;
   1366       POLVAL 1 MSC TWOND RAY 8 RAY TWOND ;
   1367       ENDIF ;
   1368     IF LENV=1 ;
   1369       NEWENV ; %NEWENV: 1253
   1370       ENDIF ;
   1371     XLOC := XLOC*LCB ;
   1372     PLOC := PLOC*LCB ;
   1373     GPLOC := GPLOC+PLOC ;
   1374     SF := SPOS+SLOC ;
   1375     LOCTRA XLOC 0 ZLOC -PLOC 0 0 LTRA ; %LOCTRA: 1027
   1376     POLVAL 1 GTRA 3 LTRA 3 GTRA 3 ;
   1377     IF LPI#0 ;
   1378       POLVAL 101 GTRA 3 LTRA 3 COD 3 ;
   1379       IF LSYS#0 ;
   1380         ELEM ; %ELEM: 1317
   1381         ENDIF ;
   1382       RAY(1) := RAY(1)*LCB ;
   1383       RAY(2) := RAY(2)*LCB ;
   1384       RSC(2) := RSC(2)*LCB ;
   1385       LOOP I 1 NRAYTRA ;
   1386         PIC := TRA(I) ;
   1387         CURV RAY(1)|I RAY(3)|I RSC(2)|I RSC(4)|I RAY(2)|I RAY(4)|I PIC
                   ; %CURV: 1271
   1388         TRA(I) := PIC ;
   1389         ENDLOOP ;
   1390       RAY(1) := RAY(1)*LCB ;
   1391       RAY(2) := RAY(2)*LCB ;
   1392       RSC(2) := RSC(2)*LCB ;
   1393       IF LENV=1 ;
   1394         CURV ERAY(1) ERAY(3) ERSC(2) ERSC(4) ERAY(2) ERAY(4) ETRA ; %C
                  URV: 1271
   1395         ENDIF ;
   1396       ENDIF ;
   1397     SPOS := SF ;
   1398     XLOC := XLOC*LCB ;
   1399     PLOC := PLOC*LCB ;
   1400     IF LPI*IR#0 ;
   1401       LOOP I 1 8 ;
   1402         RSC(I) := RAY(I) ;
   1403         ENDLOOP ;
   1404       LOOP I 1 4 ;
   1405         ERSC(I) := ERAY(I) ;
   1406         ENDLOOP ;
   1407       IF NSPN>0 ;
   1408         LOOP I 1 3 ;
   1409           SSC(I) := SPI(I) ;
   1410           ENDLOOP ;
   1411         ENDIF ;
   1412       ENDIF ;
   1413     ENDPROCEDURE ;
   1414   PROCEDURE UMS ;
   1415     VARIABLE I 1 ;
   1416     VARIABLE J 1 ;
   1417     IF LRP=0 ;
   1418       WRITE 6 ' *** ERROR, call RP before UMS ' ;
   1419       QUIT 0 ;
   1420       ENDIF ;
   1421     LOOP I 1 8 ;
   1422       MSC(I) := XX(I) ;
   1423       ENDLOOP ;
   1424     IF LSPN=1 ;
   1425       LOOP I 1 3 ;
   1426         LOOP J 1 3 ;
   1427           SSCR(I,J) := 0*DD(1) ;
   1428           ENDLOOP ;
   1429         SSCR(I,I) := 1 + 0*DD(1) ;
   1430         ENDLOOP ;
   1431       ENDIF ;
   1432     ENDPROCEDURE ;
   1433   PROCEDURE UM ;
   1434     VARIABLE I 1 ;
   1435     VARIABLE J 1 ;
   1436     IF LRP=0 ;
   1437       WRITE 6 ' *** ERROR, call RP before UM ' ;
   1438       QUIT 0 ;
   1439       ENDIF ;
   1440     LOOP I 1 8 ;
   1441       MAP(I) := XX(I) ;
   1442       MSC(I) := MAP(I) ;
   1443       ENDLOOP ;
   1444     LOOP I 1 3 ;
   1445       AXP(I) := 0 ;
   1446       AXD(I) := 0 ;
   1447       ENDLOOP ;
   1448     LTRA(1) := DD(1) ;
   1449     LTRA(2) := DD(2) ;
   1450     LTRA(3) := DD(3) ;
   1451     GTRA(1) := DD(1) ;
   1452     GTRA(2) := DD(2) ;
   1453     GTRA(3) := DD(3) ;
   1454     IF LSPN=1 ;
   1455       LOOP I 1 3 ;
   1456         LOOP J 1 3 ;
   1457           SPNR(I,J) := 0 ;
   1458           SSCR(I,J) := 0 ;
   1459           ENDLOOP ;
   1460         SPNR(I,I) := 1 ;
   1461         SSCR(I,I) := 1 ;
   1462         ENDLOOP ;
   1463       ENDIF ;
   1464     LUM := 1 ;
   1465     SPOS := 0 ;
   1466     GPLOC := 0 ;
   1467     NCT := 0 ;
   1468     NCCT := 0 ;
   1469     ENDPROCEDURE ;
   1470   PROCEDURE SM M ;
   1471     VARIABLE I 1 ;
   1472     LOOP I 1 TWOND ;
   1473       M(I) := MAP(I) ;
   1474       ENDLOOP ;
   1475     ENDPROCEDURE ;
   1476   PROCEDURE SNM N M ;
   1477     VARIABLE I 1 ;
   1478     LOOP I 1 TWOND ;
   1479       M(I) := N(I) ;
   1480       ENDLOOP ;
   1481     ENDPROCEDURE ;
   1482   PROCEDURE SSM M ;
   1483     VARIABLE I 1 ;
   1484     VARIABLE J 1 ;
   1485     LOOP I 1 3 ;
   1486       LOOP J 1 3 ;
   1487         M(I,J) := SPNR(I,J) ;
   1488         ENDLOOP ;
   1489       ENDLOOP ;
   1490     ENDPROCEDURE ;
   1491   PROCEDURE SSNM N M ;
   1492     VARIABLE I 1 ;
   1493     VARIABLE J 1 ;
   1494     LOOP I 1 3 ;
   1495       LOOP J 1 3 ;
   1496         M(I,J) := N(I,J) ;
   1497         ENDLOOP ;
   1498       ENDLOOP ;
   1499     ENDPROCEDURE ;
   1500   PROCEDURE AM M ;
   1501     VARIABLE I 1 ;
   1502     LOOP I 1 TWOND ;
   1503       MSC(I) := M(I) ;
   1504       ENDLOOP ;
   1505     LOCSET 0 0 0 0 0 0 ; %LOCSET: 1059
   1506     UPDATE 1 1 ; %UPDATE: 1206
   1507     ENDPROCEDURE ;
   1508   PROCEDURE ANM N M O ;
   1509     VARIABLE I 1 ;
   1510     VARIABLE MM NM1 NV ;
   1511     LOOP I 1 TWOND ;
   1512       MM(I) := M(I) ;
   1513       ENDLOOP ;
   1514     LOOP I TWOND+1 NV ;
   1515       MM(I) := DD(I)+0*MM(1) ;
   1516       ENDLOOP ;
   1517     POLVAL 1 N TWOND MM NV O TWOND ;
   1518     ENDPROCEDURE ;
   1519   PROCEDURE PM IU ;
   1520     VARIABLE I 1 ;
   1521     VARIABLE M NM1 5 ;
   1522     LOOP I 1 5 ;
   1523       M(I) := MAP(I) + 0*DD(1) ;
   1524       ENDLOOP ;
   1525     DAPRV M 5 6 TWOND IU ;
   1526     ENDPROCEDURE ;
   1527   PROCEDURE PSM IU ;
   1528     VARIABLE I 1 ;
   1529     VARIABLE J 1 ;
   1530     VARIABLE M NM2 3 ;
   1531     LOOP I 1 3 ;
   1532       LOOP J 1 3 ;
   1533         M(J) := SPNR(I,J) + 0*DD(1) ;
   1534         ENDLOOP ;
   1535       DAPRV M 3 6 TWOND IU ;
   1536       ENDLOOP ;
   1537     ENDPROCEDURE ;
   1538   PROCEDURE WM IU ;
   1539     VARIABLE I 10 ;
   1540     I := '(E24.16)' ;
   1541     WRITE IU ' L  '&SF(SPOS,I) ; %SF:  230
   1542     WRITE IU ' P ('&SF(XLOC,I)&','&SF(0,I)&','&SF(ZLOC,I)&')' ; %SF:  
                  230 %SF:  230 %SF:  230
   1543     WRITE IU ' A ('&SF(PLOC,I)&','&SF(0,I)&','&SF(0,I)&')' ; %SF:  230
                   %SF:  230 %SF:  230
   1544     LOOP I 1 8 ;
   1545       WRITE IU MAP(I)+0*DD(1) ;
   1546       ENDLOOP ;
   1547     ENDPROCEDURE ;
   1548   PROCEDURE PNM IU NAP ;
   1549     VARIABLE I 1 ;
   1550     VARIABLE M NM1 5 ;
   1551     LOOP I 1 MIN(5,TWOND) ; %MIN:  174
   1552       M(I) := NAP(I) + 0*DD(1) ;
   1553       ENDLOOP ;
   1554     LOOP I TWOND+1 5 ;
   1555       M(I) := 0*DD(1) ;
   1556       ENDLOOP ;
   1557     DAPRV M 5 6 TWOND IU ;
   1558     ENDPROCEDURE ;
   1559   PROCEDURE WNM IU NAP ;
   1560     VARIABLE I 10 ;
   1561     I := '(E24.16)' ;
   1562     WRITE IU ' L  '&SF(0,I) ; %SF:  230
   1563     WRITE IU ' P ('&SF(0,I)&','&SF(0,I)&','&SF(0,I)&')' ; %SF:  230 %S
                  F:  230 %SF:  230
   1564     WRITE IU ' A ('&SF(0,I)&','&SF(0,I)&','&SF(0,I)&')' ; %SF:  230 %S
                  F:  230 %SF:  230
   1565     LOOP I 1 TWOND ;
   1566       WRITE IU NAP(I)+0*DD(1) ;
   1567       ENDLOOP ;
   1568     ENDPROCEDURE ;
   1569   PROCEDURE DMAP IU MAPA MAPB AC ;
   1570     VARIABLE I 1 ;
   1571     VARIABLE C NM1 MAX(5,TWOND) ; %MAX:  171
   1572     VARIABLE DEPSP 1 ;
   1573     DEPSP := DEPS ;
   1574     DAEPS AC ;
   1575     LOOP I 1 TWOND ;
   1576       C(I) := MAPA(I)-MAPB(I)+0*DD(1) ;
   1577       ENDLOOP ;
   1578     LOOP I TWOND+1 5 ;
   1579       C(I) := 0*DD(1) ;
   1580       ENDLOOP ;
   1581     DAPRV C 5 6 TWOND IU ;
   1582     IF ND>2 ;
   1583       WRITE IU MAPA(6)-MAPB(6) ;
   1584       ENDIF ;
   1585     DSET DEPSP ; %DSET:  648
   1586     ENDPROCEDURE ;
   1587   PROCEDURE DSMAP IU MAPA MAPB AC ;
   1588     VARIABLE I 1 ;
   1589     VARIABLE J 1 ;
   1590     VARIABLE DEPSP 1 ;
   1591     VARIABLE M NM2 3 ;
   1592     DEPSP := DEPS ;
   1593     DAEPS AC ;
   1594     LOOP I 1 3 ;
   1595       LOOP J 1 3 ;
   1596         M(J) := MAPA(I,J)-MAPB(I,J)+0*DD(1) ;
   1597         ENDLOOP ;
   1598       DAPRV M 3 6 TWOND IU ;
   1599       ENDLOOP ;
   1600     DSET DEPSP ; %DSET:  648
   1601     ENDPROCEDURE ;
   1602   PROCEDURE CATR IAP NAP LGH ;
   1603     VARIABLE NC 1 ;
   1604     VARIABLE PC 1 ;
   1605     VARIABLE VN NM1 ;
   1606     VARIABLE LT NM1 ;
   1607     VARIABLE GM NM1 ;
   1608     VARIABLE MG NM1 ;
   1609     VARIABLE COP NM1 NV ;
   1610     VARIABLE DOP NM1 NV ;
   1611     IF LUM#1 ;
   1612       WRITE 6 ' *** ERROR, call UM before CATR' ;
   1613       QUIT 0 ;
   1614       ENDIF ;
   1615     PC := CONS(P0) ;
   1616     IF ND>2 ;
   1617       GM := SQRT(1+SQR(DD(2))+SQR(DD(4)))/(1+DD(6)) ;
   1618       ELSEIF ND>0 ;
   1619       GM := SQRT(1+SQR(DD(2))+SQR(DD(4)))*PC/P0 ;
   1620       ENDIF ;
   1621     IF ND>1 ;
   1622       MG := SQRT(SQR(P0/PC)-SQR(IAP(2))-SQR(IAP(4))) ;
   1623       ELSEIF ND>0 ;
   1624       MG := SQRT(SQR(P0/PC)-SQR(IAP(2))) ;
   1625       ENDIF ;
   1626     IF ND>0 ;
   1627       COP(1) :=  DD(1) ;
   1628       COP(2) :=  DD(2)/GM ;
   1629       DOP(1) := IAP(1) ;
   1630       DOP(2) := IAP(2)/MG ;
   1631       IF ND>1 ;
   1632         COP(3) :=  DD(3) ;
   1633         COP(4) :=  DD(4)/GM ;
   1634         DOP(3) := IAP(3) ;
   1635         DOP(4) := IAP(4)/MG ;
   1636         IF ND>2 ;
   1637           COP(5) := DD(5) ;
   1638           NC := CONS(ETA) ;
   1639           VN := V0/CONS(V0) ;
   1640           LT := -(1+NC)/(2+NC)/VN ;
   1641           COP(6) := (SQRT(SQR(PC*(1+DD(6))/M0/AMUMEV)+1)-1)*M0*AMUMEV/
                  CONS(E0)-1 ;
   1642           DOP(5) := DD(5)-(IAP(5)-DD(5))/LT-(VN-1)*LGH ;
   1643           DOP(6) := P0/PC-1 ;
   1644           ENDIF ;
   1645         ENDIF ;
   1646       ENDIF ;
   1647     ANM DOP COP NAP ; %ANM: 1508
   1648     ENDPROCEDURE ;
   1649   PROCEDURE TRCA IAP NAP LGH ;
   1650     VARIABLE NC 1 ;
   1651     VARIABLE PC 1 ;
   1652     VARIABLE VN NM1 ;
   1653     VARIABLE LT NM1 ;
   1654     VARIABLE GM NM1 ;
   1655     VARIABLE MG NM1 ;
   1656     VARIABLE COP NM1 NV ;
   1657     VARIABLE I 1 ;
   1658     VARIABLE DOP NM1 NV ;
   1659     IF LUM#1 ;
   1660       WRITE 6 ' *** ERROR, call UM before TRCA' ;
   1661       QUIT 0 ;
   1662       ENDIF ;
   1663     PC := CONS(P0) ;
   1664     IF ND>2 ;
   1665       GM := SQRT(1+SQR(IAP(2))+SQR(IAP(4)))/(1+DD(6)) ;
   1666       ELSEIF ND>1 ;
   1667       GM := SQRT(1+SQR(IAP(2))+SQR(IAP(4)))*PC/P0 ;
   1668       ELSEIF ND>0 ;
   1669       GM := SQRT(1+SQR(IAP(2)))*PC/P0 ;
   1670       ENDIF ;
   1671     MG := SQRT(SQR(P0/PC)-SQR(DD(2))-SQR(DD(4))) ;
   1672     IF ND>0 ;
   1673       COP(1) :=  DD(1) ;
   1674       COP(2) :=  DD(2)/MG ;
   1675       DOP(1) := IAP(1) ;
   1676       DOP(2) := IAP(2)/GM ;
   1677       IF ND>1 ;
   1678         COP(3) :=  DD(3) ;
   1679         COP(4) :=  DD(4)/MG ;
   1680         DOP(3) := IAP(3) ;
   1681         DOP(4) := IAP(4)/GM ;
   1682         IF ND>2 ;
   1683           COP(5) := DD(5) ;
   1684           COP(6) := P0/PC-1 ;
   1685           NC := CONS(ETA) ;
   1686           VN := PC/M0/AMUMEV*(1+DD(6)) ;
   1687           VN := VN/SQRT(1+SQR(VN)) ;
   1688           VN := VN/CONS(VN) ;
   1689           LT := -(1+NC)/(2+NC)/VN ;
   1690           DOP(6) := (SQRT(SQR(PC*(1+IAP(6))/M0/AMUMEV)+1)-1)*M0*AMUMEV
                  /CONS(E0)-1 ;
   1691           DOP(5) := DD(5)-(IAP(5)-DD(5)+(VN-1)*LGH)*LT ;
   1692           ENDIF ;
   1693         ENDIF ;
   1694       ENDIF ;
   1695     ANM DOP COP NAP ; %ANM: 1508
   1696     ENDPROCEDURE ;
   1697   PROCEDURE COCR IAP NAP ;
   1698     VARIABLE LAP 2*NM1 TWOND ;
   1699     VARIABLE COD 5 NV ;
   1700     VARIABLE I 2 ;
   1701     IMUNIT I ;
   1702     IF ND<2 ;
   1703       WRITE 6 ' *** ERROR in COCR, ND too small' ;
   1704       QUIT 0 ;
   1705       ENDIF ;
   1706     COD(1) := (DD(1)+DD(2))/2 ;
   1707     COD(3) := (DD(1)-DD(2))/2/I ;
   1708     COD(2) := (DD(3)+DD(4))/2 ;
   1709     COD(4) := (DD(3)-DD(4))/2/I ;
   1710     LAP(1) := IAP(1)+I*IAP(3) ;
   1711     LAP(2) := IAP(1)-I*IAP(3) ;
   1712     LAP(3) := IAP(2)+I*IAP(4) ;
   1713     LAP(4) := IAP(2)-I*IAP(4) ;
   1714     LOOP I 5 TWOND ;
   1715       COD(I) := DD(I) ;
   1716       LAP(I) := IAP(I) ;
   1717       ENDLOOP ;
   1718     LOOP I TWOND+1 NV ;
   1719       COD(I) := DD(I) ;
   1720       ENDLOOP ;
   1721     CPOLVAL 1 LAP TWOND COD NV NAP TWOND ; %CPOLVAL:  500
   1722     ENDPROCEDURE ;
   1723   PROCEDURE CRCO IAP NAP ;
   1724     VARIABLE DUM 1 ;
   1725     VARIABLE LAP 2*NM1 TWOND ;
   1726     VARIABLE COD 5 NV ;
   1727     VARIABLE I 2 ;
   1728     IMUNIT I ;
   1729     IF ND<2 ;
   1730       WRITE 6 ' *** ERROR in CRCO, ND too small' ;
   1731       QUIT 0 ;
   1732       ENDIF ;
   1733     COD(1) := DD(1)+I*DD(3) ;
   1734     COD(2) := DD(1)-I*DD(3) ;
   1735     COD(3) := DD(2)+I*DD(4) ;
   1736     COD(4) := DD(2)-I*DD(4) ;
   1737     LAP(1) := (IAP(1)+IAP(2))/2 ;
   1738     LAP(3) := (IAP(1)-IAP(2))/2/I ;
   1739     LAP(2) := (IAP(3)+IAP(4))/2 ;
   1740     LAP(4) := (IAP(3)-IAP(4))/2/I ;
   1741     LOOP I 5 TWOND ;
   1742       COD(I) := DD(I) ;
   1743       LAP(I) := IAP(I) ;
   1744       ENDLOOP ;
   1745     LOOP I TWOND+1 NV ;
   1746       COD(I) := DD(I) ;
   1747       ENDLOOP ;
   1748     CPOLVAL 1 LAP TWOND COD NV NAP TWOND ; %CPOLVAL:  500
   1749     DUM := 0 ;
   1750     LOOP I 1 TWOND ;
   1751       DUM := DUM + ABS(IMAG(NAP(I))) ;
   1752       NAP(I) := REAL(NAP(I)) ;
   1753       ENDLOOP ;
   1754     IF DUM>1E-12 ;
   1755       WRITE 6 ' --- WARNING in CRCO, map not in circular representatio
                  n' ;
   1756       ENDIF ;
   1757     ENDPROCEDURE ;
   1758   PROCEDURE PT IU ;
   1759     VARIABLE M NM1 TWOND ;
   1760     VARIABLE I 1 ;
   1761     VARIABLE MM NM1 MAX(NV,6) ; %MAX:  171
   1762     CATR MAP M SPOS ; %CATR: 1602
   1763     LOOP I TWOND NV ;
   1764       MM(I) := DD(I) ;
   1765       ENDLOOP ;
   1766     LOOP I 1 TWOND 2 ;
   1767       MM(I) := .01*DD(I) ;
   1768       MM(I+1) := .001*DD(I+1) ;
   1769       ENDLOOP ;
   1770     IF ND>2 ;
   1771       MM(6) := .01*DD(6) ;
   1772       ENDIF ;
   1773     POLVAL 1 M TWOND MM NV MM TWOND ;
   1774     LOOP I 1 TWOND 2 ;
   1775       MM(I) :=  100*MM(I) ;
   1776       MM(I+1) :=  1000*MM(I+1) ;
   1777       ENDLOOP ;
   1778     IF ND>2 ;
   1779       MM(6) := .1*MM(6) ;
   1780       ENDIF ;
   1781     LOOP I 1 5 ;
   1782       MM(I) := MM(I) + 0*DD(1) ;
   1783       ENDLOOP ;
   1784     DAPRV MM 5 6 TWOND IU ;
   1785     ENDPROCEDURE ;
   1786   PROCEDURE PA IU ;
   1787     VARIABLE I 1 ;
   1788     VARIABLE MM NM1 MAX(NV,5) ; %MAX:  171
   1789     LOOP I 1 TWOND ;
   1790       MM(I) := PHSP(I)*DD(I) ;
   1791       ENDLOOP ;
   1792     LOOP I TWOND+1 NV ;
   1793       MM(I) := PARS(I-TWOND)*DD(I) ;
   1794       ENDLOOP ;
   1795     POLVAL 1 MAP TWOND MM NV MM TWOND ;
   1796     LOOP I TWOND+1 5 ;
   1797       MM(I) := 0*DD(1) ;
   1798       ENDLOOP ;
   1799     DAPRV MM 5 6 TWOND IU ;
   1800     ENDPROCEDURE ;
   1801   PROCEDURE FM M XF MF IER ;
   1802     VARIABLE N NM1 NV ;
   1803     VARIABLE NI NM1 NV ;
   1804     VARIABLE C NM1 NV ;
   1805     VARIABLE I 1 ;
   1806     VARIABLE PEP NM1 ;
   1807     VARIABLE COR 1 ;
   1808     VARIABLE GEO 1 ;
   1809     VARIABLE P 1 ;
   1810     P := 0 ;
   1811     IF TWOND=5 ;
   1812       COR := 4 ;
   1813       ELSEIF TRUE ;
   1814       COR := TWOND ;
   1815       ENDIF ;
   1816     LOOP I 1 COR ;
   1817       DAPEP M(I) 0 COR PEP ;
   1818       P:= P + ABS(PEP) ;
   1819       ENDLOOP ;
   1820     IF P=0 ;
   1821       LOOP I 1 TWOND ;
   1822         MF(I) := M(I) ;
   1823         XF(I) := 0 ;
   1824         ENDLOOP ;
   1825       IER := 0 ;
   1826       ELSEIF P#0 ;
   1827       LOOP I 1 COR ;
   1828         C(I) := 0*DD(1) ;
   1829         N(I) := M(I)-DD(I) ;
   1830         ENDLOOP ;
   1831       LOOP I COR+1 NV ;
   1832         C(I) := DD(I) ;
   1833         N(I) := DD(I) ;
   1834         ENDLOOP ;
   1835       MI N NI NV IER NOC NV NM1 ; %MI:  375
   1836       IF IER#0 ;
   1837         WRITE 6 ' --- WARNING in FM, no fixed point' ;
   1838         ENDIF ;
   1839       POLVAL 1 NI NV C NV XF NV ;
   1840       POLVAL 1 M TWOND XF NV C TWOND ;
   1841       LOOP I 1 COR ;
   1842         XF(I) := XF(I) + DD(I) ;
   1843         ENDLOOP ;
   1844       POLVAL 0 M TWOND XF NV MF TWOND ;
   1845       LOOP I 1 COR ;
   1846         MF(I) := MF(I)-C(I) ;
   1847         XF(I) := XF(I)-DD(I) ;
   1848         ENDLOOP ;
   1849       IF TWOND=5 ;
   1850         XF(5) := C(5) ;
   1851         MF(5) := MF(5)-C(5)+DD(5) ;
   1852         MF(6) := DD(6) ;
   1853         ENDIF ;
   1854       ENDIF ;
   1855     ENDPROCEDURE ;
   1856   PROCEDURE RR M   X A Y B D  PR AR N   OR MR RES ;
   1857     PROCEDURE REC ;
   1858       VARIABLE NN 1 ;
   1859       VARIABLE S MAX(NM1,N+1) ; %MAX:  171
   1860       VARIABLE I 1 ;
   1861       VARIABLE M4 NM1 4 ;
   1862       VARIABLE CM 1 6 ;
   1863       VARIABLE RI N 6 ;
   1864       VARIABLE RO N 4 ;
   1865       VARIABLE RB N 4 ;
   1866       VARIABLE RE N 4 ;
   1867       VARIABLE IRAN 1 ;
   1868       VARIABLE J NM1 ;
   1869       VARIABLE NOM 1 ;
   1870       VARIABLE IER 1 ;
   1871       FUNCTION RAN IRAN ;
   1872         RAN := 98765*IRAN+.12345 ;
   1873         RAN := 2*(RAN-NINT(RAN)) ;
   1874         IRAN := RAN ;
   1875         ENDFUNCTION ;
   1876       IRAN := 0 ;
   1877       IF OR>0 ;
   1878         LOOP I 1 4 ;
   1879           DAPLU M(I) 1 0 S ;
   1880           M4(I) := S ;
   1881           CM(I+1) := DD(I) ;
   1882           ENDLOOP ;
   1883         NOM := NOC ;
   1884         CO OR ; %CO:  910
   1885         CM(1) := 0*DD(1) ;
   1886         CM(6) := 0*DD(1) ;
   1887         IF ND=3 ;
   1888           CM(6) := DD(4) ;
   1889           CM(5) := 0*DD(1) ;
   1890           ENDIF ;
   1891         POLVAL 1 M4 4 CM 6 M4 4 ;
   1892         MI M4 MR 4 IER NOC NV NM1 ; %MI:  375
   1893         CO NOM ; %CO:  910
   1894         ENDIF ;
   1895       S := 0 ;
   1896       LOOP I 1 N-1 ;
   1897         S := S&0 ;
   1898         ENDLOOP ;
   1899       LOOP I 1 N ;
   1900         VELSET S I X*RAN(IRAN) ; %RAN: 1871
   1901         ENDLOOP ;
   1902       RI(1) := S ;
   1903       LOOP I 1 N ;
   1904         VELSET S I A*RAN(IRAN) ; %RAN: 1871
   1905         ENDLOOP ;
   1906       RI(2) := S ;
   1907       LOOP I 1 N ;
   1908         VELSET S I Y*RAN(IRAN) ; %RAN: 1871
   1909         ENDLOOP ;
   1910       RI(3) := S ;
   1911       LOOP I 1 N ;
   1912         VELSET S I B*RAN(IRAN) ; %RAN: 1871
   1913         ENDLOOP ;
   1914       RI(4) := S ;
   1915       LOOP I 1 N ;
   1916         VELSET S I D*RAN(IRAN) ; %RAN: 1871
   1917         ENDLOOP ;
   1918       RI(5) := S ;
   1919       RI(6) := S ;
   1920       POLVAL 1 M 4 RI 6 RO 4 ;
   1921       LOOP I 1 N ;
   1922         VELSET S I PR*RAN(IRAN) ; %RAN: 1871
   1923         ENDLOOP ;
   1924       RE(1) := S ;
   1925       LOOP I 1 N ;
   1926         VELSET S I AR*RAN(IRAN) ; %RAN: 1871
   1927         ENDLOOP ;
   1928       RE(2) := S ;
   1929       LOOP I 1 N ;
   1930         VELSET S I PR*RAN(IRAN) ; %RAN: 1871
   1931         ENDLOOP ;
   1932       RE(3) := S ;
   1933       LOOP I 1 N ;
   1934         VELSET S I AR*RAN(IRAN) ; %RAN: 1871
   1935         ENDLOOP ;
   1936       RE(4) := S ;
   1937       RO(1) := RO(1) + RE(1) ;
   1938       RO(2) := RO(2) + RE(2) ;
   1939       RO(3) := RO(3) + RE(3) ;
   1940       RO(4) := RO(4) + RE(4) ;
   1941       POLVAL 1 MR 4 RO 4 RB 4 ;
   1942       RE(1) := RI(2)-RB(1) ;
   1943       RE(2) := RI(3)-RB(2) ;
   1944       RE(3) := RI(4)-RB(3) ;
   1945       RE(4) := RI(6)-RB(4) ;
   1946       LOOP J 1 4 ;
   1947         RES(J) := 0 ;
   1948         NN := 0 ;
   1949         LOOP I 1 N ;
   1950           VELGET RE(J) I S ;
   1951           IF S#0 ;
   1952             RES(J) := RES(J) + ABS(S) ;
   1953             NN := NN + 1 ;
   1954             ENDIF ;
   1955           ENDLOOP ;
   1956         RES(J) := NN/(RES(J)+1E-20)/4 ;
   1957         IF IER#0 ;
   1958           RES(J) := 0 ;
   1959           ENDIF ;
   1960         ENDLOOP ;
   1961       ENDPROCEDURE ;
   1962     SVSCR ; %SVSCR:  261
   1963     NM1 := MAX(NM1,N) ; %MAX:  171
   1964     SCRLEN 2*NM1 ;
   1965     REC ; %REC: 1857
   1966     NM1 := NMON(NO+1,NV) ; %NMON:  562
   1967     SCRLEN LSCR ;
   1968     ENDPROCEDURE ;
   1969   PROCEDURE AR M   X A Y B D   PR N   RES ;
   1970     VARIABLE I 1 ;
   1971     VARIABLE MR NM1 4 ;
   1972     VARIABLE RS 1 4 ;
   1973     DAPEE M(1) 2 RES ;
   1974     RR M X A Y B D PR RES*A N 1 MR RS ; %RR: 1856
   1975     RES := RS(4) ;
   1976     ENDPROCEDURE ;
   1977   PROCEDURE RM IU ;
   1978     VARIABLE LIN 80 ;
   1979     VARIABLE DUM NM1 ;
   1980     VARIABLE I 1 ;
   1981     READ IU LIN ;
   1982     IF SS(LIN,1,3)=' L ' ; %SS:  221
   1983       SLOC := R(LIN,5,28) ; %R:  224
   1984       READ IU LIN ;
   1985       XLOC := R(LIN,5,28) ; %R:  224
   1986       I := R(LIN,30,53) ; %R:  224
   1987       ZLOC := R(LIN,55,78) ; %R:  224
   1988       READ IU LIN ;
   1989       PLOC := R(LIN,5,28) ; %R:  224
   1990       I := R(LIN,30,53) ; %R:  224
   1991       I := R(LIN,55,78) ; %R:  224
   1992       LOCSET XLOC ZLOC PLOC SLOC 0 0 ; %LOCSET: 1059
   1993       LOOP I 1 8 ;
   1994         DAREA IU DUM NV ;
   1995         MSC(I) := DUM ;
   1996         ENDLOOP ;
   1997       ELSEIF TRUE ;
   1998       BACKF IU ;
   1999       DAREV MSC 5 6 TWOND IU ;
   2000       MSC(6) := DD(6) ;
   2001       LOCSET 0 0 0 0 0 0 ; %LOCSET: 1059
   2002       ENDIF ;
   2003     UPDATE 1 1 ; %UPDATE: 1206
   2004     ENDPROCEDURE ;
   2005   PROCEDURE RNM IU NAP ;
   2006     VARIABLE LIN 80 ;
   2007     VARIABLE DUM NM1 ;
   2008     VARIABLE I 1 ;
   2009     VARIABLE IAP NM1 8 ;
   2010     READ IU LIN ;
   2011     IF SS(LIN,1,3)=' L ' ; %SS:  221
   2012       READ IU LIN ;
   2013       READ IU LIN ;
   2014       LOOP I 1 8 ;
   2015         DAREA IU DUM NV ;
   2016         IAP(I) := DUM ;
   2017         ENDLOOP ;
   2018       ELSEIF TRUE ;
   2019       BACKF IU ;
   2020       DAREV IAP 5 6 TWOND IU ;
   2021       IAP(6) := DD(6) ;
   2022       ENDIF ;
   2023     LOOP I 1 TWOND ;
   2024       NAP(I) := IAP(I) ;
   2025       ENDLOOP ;
   2026     ENDPROCEDURE ;
   2027   PROCEDURE SR X A Y B T D G Z COL ;
   2028     VARIABLE I 1 ;
   2029     IF LOV=0 ;
   2030       WRITE 6 ' *** ERROR, call OV before SR' ;
   2031       QUIT 0 ;
   2032       ENDIF ;
   2033     IF LPI=1 ;
   2034       WRITE 6 ' *** ERROR, call SR before BP' ;
   2035       QUIT 0 ;
   2036       ENDIF ;
   2037     NRAY := NRAY + 1 ;
   2038     IF NRAY=1 ;
   2039       NRAY := 2 ;
   2040       ENDIF ;
   2041     RAY(1) := RAY(1)&X ;
   2042     RAY(2) := RAY(2)&A ;
   2043     RAY(3) := RAY(3)&Y ;
   2044     RAY(4) := RAY(4)&B ;
   2045     RAY(5) := RAY(5)&T ;
   2046     RAY(6) := RAY(6)&D ;
   2047     RAY(7) := RAY(7)&G ;
   2048     RAY(8) := RAY(8)&Z ;
   2049     RCOL := RCOL&COL ;
   2050     LOOP I 1 8 ;
   2051       RSC(I) := RAY(I) ;
   2052       ENDLOOP ;
   2053     REMAIN := REMAIN&1 ;
   2054     REMOVE := REMOVE&0 ;
   2055     ENDPROCEDURE ;
   2056   PROCEDURE SBE EX EY ET ;
   2057     VARIABLE E 1 3 ;
   2058     VARIABLE I 1 ;
   2059     VARIABLE J 1 ;
   2060     VARIABLE K 1 ;
   2061     VARIABLE DUM 1 ;
   2062     VARIABLE X 1 3 ;
   2063     VARIABLE A 1 3 ;
   2064     VARIABLE R 1 3 ;
   2065     E(1) := EX ;
   2066     E(2) := EY ;
   2067     E(3) := ET ;
   2068     LOOP I 1 ND ;
   2069       K := 2*I ;
   2070       J := K-1 ;
   2071       IF ABS(ME(J,J)+ME(K,K))<(2-1E-10) ; %ME:  461 %ME:  461
   2072         DUM := E(I)/PI/SQRT(1-SQR(ME(J,J)+ME(K,K))/4) ; %ME:  461 %ME:
                    461
   2073         X(I) := SQRT(DUM*ABS(ME(J,K))) ; %ME:  461
   2074         A(I) := SQRT(DUM*ABS(ME(K,J))) ; %ME:  461
   2075         R(I) := (ME(K,K)-ME(J,J))/2*SIG(ME(J,K))/SQRT(ABS(ME(J,K)*ME(K
                  ,J))) ; %ME:  461 %ME:  461 %SIG:  180 %ME:  461 %ME:  461 %
                  ME:  461
   2076         ELSEIF TRUE ;
   2077         X(I) := 0 ;
   2078         A(I) := 0 ;
   2079         R(I) := 0 ;
   2080         WRITE 6 ' --- WARNING in SBE, map unstable' ;
   2081         ENDIF ;
   2082       ENDLOOP ;
   2083     SB X(1) A(1) R(1) X(2) A(2) R(2) X(3) A(3) R(3) 0 0 ; %SB: 1001
   2084     ENDPROCEDURE ;
   2085   PROCEDURE ENVEL ;
   2086     VARIABLE I 1 ;
   2087     SR 0 0 0 0 0 0 0 0 1 ; %SR: 2027
   2088     IF LOV=0 ;
   2089       WRITE 6 ' *** ERROR, call OV before ENVEL' ;
   2090       QUIT 0 ;
   2091       ENDIF ;
   2092     ERAY(1) := PHSP(1) ;
   2093     EMAX(1) := PHSP(1) ;
   2094     ERAY(2) := PHSR(1)*PHSP(2) ;
   2095     ERAY(3) := PHSP(3) ;
   2096     EMAX(2) := PHSP(3) ;
   2097     ERAY(4) := PHSR(2)*PHSP(4) ;
   2098     LOOP I 1 4 ;
   2099       ERSC(I) := ERAY(I) ;
   2100       ENDLOOP ;
   2101     LENV := 1 ;
   2102     ENDPROCEDURE ;
   2103   PROCEDURE ENCL DISP ;
   2104     VARIABLE I 1 ;
   2105     VARIABLE MF NM1 8 ;
   2106     VARIABLE XF NM1 8 ;
   2107     TWOND := 5 ;
   2108     FM MAP XF MF I ; %FM: 1801
   2109     TWOND := 2*ND ;
   2110     LOOP I 1 NV ;
   2111       MF(I) := 0 ;
   2112       ENDLOOP ;
   2113     MF(6) := DISP ;
   2114     POLVAL 1 XF NV MF NV MF NV ;
   2115     SR 0 0 0 0 0 0 0 0 1 ; %SR: 2027
   2116     SR MF(1) MF(2) MF(3) MF(4) MF(5) MF(6) 0 0 1 ; %SR: 2027
   2117     ENDPROCEDURE ;
   2118   PROCEDURE SCDE ;
   2119     VARIABLE I 1 ;
   2120     IF LOV=0 ;
   2121       WRITE 6 ' *** ERROR, call OV before SCDE' ;
   2122       QUIT 0 ;
   2123       ENDIF ;
   2124     I := SQRT(1-SQR(PHSR(1))) ;
   2125     SR PHSP(1)*I 0 0 0 0 0 0 0 1 ; %SR: 2027
   2126     SR 0 PHSP(2)*I 0 0 0 0 0 0 1 ; %SR: 2027
   2127     I := SQRT(1-SQR(PHSR(2))) ;
   2128     SR 0 0 PHSP(3)*I 0 0 0 0 0 1 ; %SR: 2027
   2129     SR 0 0 0 PHSP(4)*I 0 0 0 0 1 ; %SR: 2027
   2130     SR 0 0 0 0 0 PHSP(6) 0 0 2 ; %SR: 2027
   2131     ERAY(1) := PHSP(1) ;
   2132     EMAX(1) := PHSP(1) ;
   2133     ERAY(2) := PHSR(1)*PHSP(2) ;
   2134     ERAY(3) := PHSP(3) ;
   2135     EMAX(2) := PHSP(3) ;
   2136     ERAY(4) := PHSR(2)*PHSP(4) ;
   2137     LOOP I 1 4 ;
   2138       ERSC(I) := ERAY(I) ;
   2139       ENDLOOP ;
   2140     LENV := 1 ;
   2141     ENDPROCEDURE ;
   2142   PROCEDURE SSR X Y Z ;
   2143     VARIABLE SCR 3 ;
   2144     VARIABLE I 1 ;
   2145     IF LOV=0 ;
   2146       WRITE 6 ' *** ERROR, call OV before SSR' ;
   2147       QUIT 0 ;
   2148       ENDIF ;
   2149     IF LPI=1 ;
   2150       WRITE 6 ' *** ERROR, call SSR before BP' ;
   2151       QUIT 0 ;
   2152       ENDIF ;
   2153     NSPN := NSPN + 1 ;
   2154     IF NSPN=1 ;
   2155       NSPN := 2 ;
   2156       ENDIF ;
   2157     SCR := X&Y&Z ;
   2158     IF NSPN#NRAY ;
   2159       WRITE 6 ' *** ERROR, call SSR after each matching SR' ;
   2160       QUIT 0 ;
   2161       ENDIF ;
   2162     IF CONS(SCR)=0 ;
   2163       WRITE 6 ' *** ERROR in SSR, give non zero spin vector.' ;
   2164       QUIT 0 ;
   2165       ENDIF ;
   2166     VEUNIT SCR SCR ;
   2167     LOOP I 1 3 ;
   2168       SPI(I) := SPI(I)&(SCR|I) ;
   2169       SSC(I) := SPI(I) ;
   2170       ENDLOOP ;
   2171     ENDPROCEDURE ;
   2172   PROCEDURE ER NX NA NY NB NT ND NG NZ ;
   2173     VARIABLE IX 1 ;
   2174     VARIABLE IA 1 ;
   2175     VARIABLE IY 1 ;
   2176     VARIABLE IB 1 ;
   2177     VARIABLE IT 1 ;
   2178     VARIABLE ID 1 ;
   2179     VARIABLE IG 1 ;
   2180     VARIABLE IZ 1 ;
   2181     VARIABLE VX 1 ;
   2182     VARIABLE VA 1 ;
   2183     VARIABLE VY 1 ;
   2184     VARIABLE VB 1 ;
   2185     VARIABLE VT 1 ;
   2186     VARIABLE VD 1 ;
   2187     VARIABLE VG 1 ;
   2188     VARIABLE VZ 1 ;
   2189     VARIABLE I  1 ;
   2190     VARIABLE COL 1 ND ;
   2191     IF LOV=0 ;
   2192       WRITE 6 ' *** ERROR, call OV before ER' ;
   2193       QUIT 0 ;
   2194       ENDIF ;
   2195     IF LPI=1 ;
   2196       WRITE 6 ' *** ERROR, call ER before BP' ;
   2197       QUIT 0 ;
   2198       ENDIF ;
   2199     IF LPS=0 ;
   2200       WRITE 6 ' *** ERROR, call SB before ER ' ;
   2201       QUIT 0 ;
   2202       ENDIF ;
   2203     IF INT(ND/2)#ND/2 ;
   2204       COL((ND+1)/2) := 5 ;
   2205       ENDIF ;
   2206     LOOP I 1 ND/2 ;
   2207       COL(I) := 3 ;
   2208       ENDLOOP ;
   2209     LOOP I ND ND/2+1 -1 ;
   2210       COL(I) :=  2 ;
   2211       ENDLOOP ;
   2212     LOOP IX 1 NX ;
   2213       LOOP IA 1 NA ;
   2214         LOOP IY 1 NY ;
   2215           LOOP IB 1 NB ;
   2216             LOOP IT 1 NT ;
   2217               LOOP ID 1 ND ;
   2218                 LOOP IG 1 NG ;
   2219                   LOOP IZ 1 NZ ;
   2220                     VX := PHSP(1)*(2*IX-NX-1)/MAX(1,NX-1) ; %MAX:  171

   2221                     VA := PHSP(2)*(2*IA-NA-1)/MAX(1,NA-1) ; %MAX:  171

   2222                     VY := PHSP(3)*(2*IY-NY-1)/MAX(1,NY-1) ; %MAX:  171

   2223                     VB := PHSP(4)*(2*IB-NB-1)/MAX(1,NB-1) ; %MAX:  171

   2224                     VT := PHSP(5)*(2*IT-NT-1)/MAX(1,NT-1) ; %MAX:  171

   2225                     VD := PHSP(6)*(2*ID-ND-1)/MAX(1,ND-1) ; %MAX:  171

   2226                     VG := PHSP(7)*(2*IG-NG-1)/MAX(1,NG-1) ; %MAX:  171

   2227                     VZ := PHSP(8)*(2*IZ-NZ-1)/MAX(1,NZ-1) ; %MAX:  171

   2228                     SR VX VA VY VB VT VD VG VZ COL(ID) ; %SR: 2027
   2229                     ENDLOOP ;
   2230                   ENDLOOP ;
   2231                 ENDLOOP ;
   2232               ENDLOOP ;
   2233             ENDLOOP ;
   2234           ENDLOOP ;
   2235         ENDLOOP ;
   2236       ENDLOOP ;
   2237     ENDPROCEDURE ;
   2238   PROCEDURE PR IU ;
   2239     VARIABLE I 1 ;
   2240     LOOP I 1 8 ;
   2241       WRITE IU RAY(I) ;
   2242       ENDLOOP ;
   2243     ENDPROCEDURE ;
   2244   PROCEDURE PRAY IU ;
   2245     VARIABLE NR 1 ;
   2246     VARIABLE STR 150 ;
   2247     VARIABLE I 1 ;
   2248     VARIABLE J 1 ;
   2249     NR := LENGTH(RAY(1)) ;
   2250     IF NR=1 ;
   2251       NR := 0 ;
   2252       ENDIF ;
   2253     WRITE IU '# number of rays:'&SF(NR,'(I8)')&'  (including the refer
                  ence)' ; %SF:  230
   2254     IF NR>0 ;
   2255       WRITE IU ('#   X              A              Y              B'& 
                          '              T              D              G      
                          Z'&         '              REMAIN    REMOVE') ;
   2256       LOOP J 1 NR ;
   2257         I := 1 ;
   2258         STR := SF((RAY(I)|J),'(E15.7)') ; %SF:  230
   2259         LOOP I 2 8 ;
   2260           STR := STR&SF((RAY(I)|J),'(E15.7)') ; %SF:  230
   2261           ENDLOOP ;
   2262         STR := STR&SF(REMAIN|J,'(I10)')&SF(REMOVE|J,'(I10)') ; %SF:  2
                  30 %SF:  230
   2263         WRITE IU STR ;
   2264         ENDLOOP ;
   2265       ENDIF ;
   2266     ENDPROCEDURE ;
   2267   PROCEDURE WRAY IU ;
   2268     VARIABLE NR 1 ;
   2269     VARIABLE LABL 1 8 ;
   2270     VARIABLE I 1 ;
   2271     VARIABLE J 1 ;
   2272     LABL(1) := 'X' ;
   2273     LABL(2) := 'A' ;
   2274     LABL(3) := 'Y' ;
   2275     LABL(4) := 'B' ;
   2276     LABL(5) := 'T' ;
   2277     LABL(6) := 'D' ;
   2278     LABL(7) := 'G' ;
   2279     LABL(8) := 'Z' ;
   2280     NR := LENGTH(RAY(1)) ;
   2281     IF NR=1 ;
   2282       NR := 0 ;
   2283       ENDIF ;
   2284     WRITE IU '# number of rays:'&SF(NR,'(I8)')&'  (including the refer
                  ence)' ; %SF:  230
   2285     IF NR>0 ;
   2286       LOOP I 1 8 ;
   2287         WRITE IU '# '&LABL(I) ;
   2288         LOOP J 1 NR ;
   2289           WRITE IU RAY(I)|J ;
   2290           ENDLOOP ;
   2291         WRITE IU '' ;
   2292         ENDLOOP ;
   2293       WRITE IU '#   REMAIN    REMOVE' ;
   2294       LOOP J 1 NR ;
   2295         WRITE IU SF(REMAIN|J,'(I10)')&SF(REMOVE|J,'(I10)') ; %SF:  230
                   %SF:  230
   2296         ENDLOOP ;
   2297       WRITE IU '' ;
   2298       ENDIF ;
   2299     ENDPROCEDURE ;
   2300   PROCEDURE RRAY IU ;
   2301     VARIABLE STR 200 ;
   2302     VARIABLE LABL 1 8 ;
   2303     VARIABLE I 1 ;
   2304     VARIABLE J 1 ;
   2305     VARIABLE LHEAD 1 ;
   2306     VARIABLE LRR 1 ;
   2307     READ IU STR ;
   2308     NRAY := R(STR,18,25) ; %R:  224
   2309     LRR := LO(0) ;
   2310     IF NRAY>0 ;
   2311       READS IU STR ;
   2312       LHEAD := LENGTH(STR) ;
   2313       IF LHEAD>3 ;
   2314         IF (STR|((LHEAD-3)&(LHEAD)))='MOVE' ;
   2315           LRR := LO(1) ;
   2316           ENDIF ;
   2317         READ IU STR ;
   2318         LOOP I 1 8 ;
   2319           RAY(I) := R(STR,15*(I-1)+1,15*I) ; %R:  224
   2320           ENDLOOP ;
   2321         IF LRR ;
   2322           REMAIN := R(STR,121,130) ; %R:  224
   2323           REMOVE := R(STR,131,140) ; %R:  224
   2324           ENDIF ;
   2325         LOOP J 2 NRAY ;
   2326           READ IU STR ;
   2327           LOOP I 1 8 ;
   2328             RAY(I) := RAY(I)&R(STR,15*(I-1)+1,15*I) ; %R:  224
   2329             ENDLOOP ;
   2330           IF LRR ;
   2331             REMAIN := REMAIN&R(STR,121,130) ; %R:  224
   2332             REMOVE := REMOVE&R(STR,131,140) ; %R:  224
   2333             ENDIF ;
   2334           ENDLOOP ;
   2335         ELSEIF LO(1) ;
   2336         LABL(1) := 'X' ;
   2337         LABL(2) := 'A' ;
   2338         LABL(3) := 'Y' ;
   2339         LABL(4) := 'B' ;
   2340         LABL(5) := 'T' ;
   2341         LABL(6) := 'D' ;
   2342         LABL(7) := 'G' ;
   2343         LABL(8) := 'Z' ;
   2344         IF STR#('# '&LABL(1)) ;
   2345           WRITE 6 (' *** ERROR in RRAY, '&               'the wrong li
                  ne is input:') STR ;
   2346           QUIT 0 ;
   2347           ENDIF ;
   2348         LOOP I 1 8 ;
   2349           IF I>1 ;
   2350             READS IU STR ;
   2351             IF STR#('# '&LABL(I)) ;
   2352               WRITE 6 (' *** ERROR in RRAY, '&                     'th
                  e wrong line is input:') STR ;
   2353               QUIT 0 ;
   2354               ENDIF ;
   2355             ENDIF ;
   2356           READ IU STR ;
   2357           RAY(I) := STR ;
   2358           LOOP J 2 NRAY ;
   2359             READ IU STR ;
   2360             RAY(I) := RAY(I)&STR ;
   2361             ENDLOOP ;
   2362           READ IU STR ;
   2363           ENDLOOP ;
   2364         READS IU STR ;
   2365         IF STR='#   REMAIN    REMOVE' ;
   2366           LRR := LO(1) ;
   2367           READS IU STR ;
   2368           REMAIN := R(STR,1,10) ; %R:  224
   2369           REMOVE := R(STR,11,20) ; %R:  224
   2370           LOOP J 2 NRAY ;
   2371             READS IU STR ;
   2372             REMAIN := REMAIN&R(STR,1,10) ; %R:  224
   2373             REMOVE := REMOVE&R(STR,11,20) ; %R:  224
   2374             ENDLOOP ;
   2375           ENDIF ;
   2376         ENDIF ;
   2377       ENDIF ;
   2378     IF NOT(LRR) ;
   2379       REMOVE := 0*RAY(1) ;
   2380       REMAIN := 1+REMOVE ;
   2381       ENDIF ;
   2382     LOOP I 1 8 ;
   2383       RSC(I) := RAY(I) ;
   2384       ENDLOOP ;
   2385     RCOL := 1+0*RAY(1) ;
   2386     ENDPROCEDURE ;
   2387   PROCEDURE SRAY R ;
   2388     VARIABLE I 1 ;
   2389     LOOP I 1 8 ;
   2390       R(I) := RAY(I) ;
   2391       ENDLOOP ;
   2392     ENDPROCEDURE ;
   2393   PROCEDURE LRAY R ;
   2394     VARIABLE I 1 ;
   2395     NRAY := LENGTH(R(1)) ;
   2396     IF NRAY=1 ;
   2397       NRAY := 0 ;
   2398       ENDIF ;
   2399     LOOP I 1 8 ;
   2400       RAY(I) := R(I) ;
   2401       RSC(I) := R(I) ;
   2402       ENDLOOP ;
   2403     REMOVE := 0*RAY(1) ;
   2404     REMAIN := 1+REMOVE ;
   2405     RCOL := REMAIN ;
   2406     ENDPROCEDURE ;
   2407   PROCEDURE DRAY IU RAYA RAYB AC ;
   2408     VARIABLE I 1 ;
   2409     VARIABLE SCR LENGTH(RAYA(1)) ;
   2410     LOOP I 1 TWOND ;
   2411       SCR := RAYA(I)-RAYB(I) ;
   2412       IF ABS(SCR)>AC ;
   2413         WRITE IU SCR ;
   2414         ELSEIF LO(1) ;
   2415         WRITE IU '    ---' ;
   2416         ENDIF ;
   2417       ENDLOOP ;
   2418     ENDPROCEDURE ;
   2419   PROCEDURE ARAY IU ;
   2420     VARIABLE NRAY0 1 ;
   2421     VARIABLE I 1 ;
   2422     VARIABLE RANGE 2 ;
   2423     VARIABLE RAY0 NRAY+1 8 ;
   2424     VARIABLE RSC0 NRAY+1 8 ;
   2425     VARIABLE RCOL0 NRAY+1 ;
   2426     VARIABLE REMAIN0 NRAY+1 ;
   2427     VARIABLE REMOVE0 NRAY+1 ;
   2428     NRAY0 := NRAY ;
   2429     RCOL0 := RCOL ;
   2430     REMAIN0 := REMAIN ;
   2431     REMOVE0 := REMOVE ;
   2432     LOOP I 1 8 ;
   2433       RAY0(I) := RAY(I) ;
   2434       RSC0(I) := RSC(I) ;
   2435       ENDLOOP ;
   2436     RRAY IU ; %RRAY: 2300
   2437     IF NRAY=0 ;
   2438       NRAY := NRAY0 ;
   2439       LOOP I 1 8 ;
   2440         RAY(I) := RAY0(I) ;
   2441         RSC(I) := RSC0(I) ;
   2442         ENDLOOP ;
   2443       RCOL := RCOL0 ;
   2444       REMAIN := REMAIN0 ;
   2445       REMOVE := REMOVE0 ;
   2446       ELSEIF LO(1) ;
   2447       IF NRAY0>0 ;
   2448         NRAY := NRAY+NRAY0-1 ;
   2449         RANGE := 2&NRAY0 ;
   2450         LOOP I 1 8 ;
   2451           RAY(I) := RAY(I)&(RAY0(I)|RANGE) ;
   2452           RSC(I) := RSC(I)&(RSC0(I)|RANGE) ;
   2453           ENDLOOP ;
   2454         RCOL := RCOL&(RCOL0|RANGE) ;
   2455         REMAIN := REMAIN&(REMAIN0|RANGE) ;
   2456         REMOVE := REMOVE&(REMOVE0|RANGE) ;
   2457         ENDIF ;
   2458       ENDIF ;
   2459     ENDPROCEDURE ;
   2460   PROCEDURE ADDRAYS FN1 FN2 FN ;
   2461     CR ; %CR:  892
   2462     OPENF 77 FN2 'OLD' ;
   2463     RRAY 77 ; %RRAY: 2300
   2464     CLOSEF 77 ;
   2465     OPENF 77 FN1 'OLD' ;
   2466     ARAY 77 ; %ARAY: 2419
   2467     CLOSEF 77 ;
   2468     OPENF 77 FN 'UNKNOWN' ;
   2469     PRAY 77 ; %PRAY: 2244
   2470     CLOSEF 77 ;
   2471     ENDPROCEDURE ;
   2472   PROCEDURE PSPI IU ;
   2473     VARIABLE NS 1 ;
   2474     VARIABLE STR 45 ;
   2475     VARIABLE I 1 ;
   2476     VARIABLE J 1 ;
   2477     NS := LENGTH(SPI(1)) ;
   2478     IF NS=1 ;
   2479       NS := 0 ;
   2480       ENDIF ;
   2481     WRITE IU ('# number of spin vectors:'&SF(NS,'(I8)')&              
                    '  (including the reference)') ; %SF:  230
   2482     IF NS>0 ;
   2483       WRITE IU '# S_X            S_Y            S_Z' ;
   2484       LOOP J 1 NS ;
   2485         I := 1 ;
   2486         STR := SF((SPI(I)|J),'(E15.7)') ; %SF:  230
   2487         LOOP I 2 3 ;
   2488           STR := STR&SF((SPI(I)|J),'(E15.7)') ; %SF:  230
   2489           ENDLOOP ;
   2490         WRITE IU STR ;
   2491         ENDLOOP ;
   2492       ENDIF ;
   2493     ENDPROCEDURE ;
   2494   PROCEDURE WSPI IU ;
   2495     VARIABLE NS 1 ;
   2496     VARIABLE LABL 1 3 ;
   2497     VARIABLE I 1 ;
   2498     VARIABLE J 1 ;
   2499     LABL(1) := 'X' ;
   2500     LABL(2) := 'Y' ;
   2501     LABL(3) := 'Z' ;
   2502     NS := LENGTH(SPI(1)) ;
   2503     IF NS=1 ;
   2504       NS := 0 ;
   2505       ENDIF ;
   2506     WRITE IU ('# number of spin vectors:'&SF(NS,'(I8)')&              
                    '  (including the reference)') ; %SF:  230
   2507     IF NS>0 ;
   2508       LOOP I 1 3 ;
   2509         WRITE IU '# S_'&LABL(I) ;
   2510         LOOP J 1 NS ;
   2511           WRITE IU SPI(I)|J ;
   2512           ENDLOOP ;
   2513         WRITE IU '' ;
   2514         ENDLOOP ;
   2515       ENDIF ;
   2516     ENDPROCEDURE ;
   2517   PROCEDURE RSPI IU ;
   2518     VARIABLE STR 45 ;
   2519     VARIABLE LABL 1 3 ;
   2520     VARIABLE I 1 ;
   2521     VARIABLE J 1 ;
   2522     READ IU STR ;
   2523     NSPN := R(STR,26,33) ; %R:  224
   2524     IF NSPN>0 ;
   2525       READ IU STR ;
   2526       IF LENGTH(STR)>5 ;
   2527         READ IU STR ;
   2528         LOOP I 1 3 ;
   2529           SPI(I) := R(STR,15*(I-1)+1,15*I) ; %R:  224
   2530           ENDLOOP ;
   2531         LOOP J 2 NSPN ;
   2532           READ IU STR ;
   2533           LOOP I 1 3 ;
   2534             SPI(I) := SPI(I)&R(STR,15*(I-1)+1,15*I) ; %R:  224
   2535             ENDLOOP ;
   2536           ENDLOOP ;
   2537         ELSEIF TRUE ;
   2538         LABL(1) := 'X' ;
   2539         LABL(2) := 'Y' ;
   2540         LABL(3) := 'Z' ;
   2541         IF STR#('# S_'&LABL(1)) ;
   2542           WRITE 6 (' *** ERROR in RSPI, '&               'the wrong li
                  ne is input:') STR ;
   2543           QUIT 0 ;
   2544           ENDIF ;
   2545         LOOP I 1 3 ;
   2546           IF I>1 ;
   2547             READ IU STR ;
   2548             IF STR#('# S_'&LABL(I)) ;
   2549               WRITE 6 (' *** ERROR in RSPI, '&                     'th
                  e wrong line is input:') STR ;
   2550               QUIT 0 ;
   2551               ENDIF ;
   2552             ENDIF ;
   2553           READ IU STR ;
   2554           SPI(I) := STR ;
   2555           LOOP J 2 NSPN ;
   2556             READ IU STR ;
   2557             SPI(I) := SPI(I)&STR ;
   2558             ENDLOOP ;
   2559           IF I<3 ;
   2560             READ IU STR ;
   2561             ENDIF ;
   2562           ENDLOOP ;
   2563         ENDIF ;
   2564       ENDIF ;
   2565     LOOP I 1 3 ;
   2566       SSC(I) := SPI(I) ;
   2567       ENDLOOP ;
   2568     ENDPROCEDURE ;
   2569   PROCEDURE SSPI S ;
   2570     VARIABLE I 1 ;
   2571     LOOP I 1 3 ;
   2572       S(I) := SPI(I) ;
   2573       ENDLOOP ;
   2574     ENDPROCEDURE ;
   2575   PROCEDURE LSPI S ;
   2576     VARIABLE I 1 ;
   2577     NSPN := LENGTH(S(1)) ;
   2578     IF NSPN=1 ;
   2579       NSPN := 0 ;
   2580       ENDIF ;
   2581     LOOP I 1 3 ;
   2582       SPI(I) := S(I) ;
   2583       SSC(I) := S(I) ;
   2584       ENDLOOP ;
   2585     ENDPROCEDURE ;
   2586   PROCEDURE DSPI IU SA SB AC ;
   2587     VARIABLE I 1 ;
   2588     VARIABLE SCR LENGTH(SA(1)) ;
   2589     LOOP I 1 3 ;
   2590       SCR := SA(I)-SB(I) ;
   2591       IF ABS(SCR)>AC ;
   2592         WRITE IU SCR ;
   2593         ELSEIF LO(1) ;
   2594         WRITE IU '    ---' ;
   2595         ENDIF ;
   2596       ENDLOOP ;
   2597     ENDPROCEDURE ;
   2598   PROCEDURE ASPI IU ;
   2599     VARIABLE NSPN0 1 ;
   2600     VARIABLE I 1 ;
   2601     VARIABLE RANGE 2 ;
   2602     VARIABLE SPI0 NSPN+1 3 ;
   2603     VARIABLE SSC0 NSPN+1 3 ;
   2604     NSPN0 := NSPN ;
   2605     LOOP I 1 3 ;
   2606       SPI0(I) := SPI(I) ;
   2607       SSC0(I) := SSC(I) ;
   2608       ENDLOOP ;
   2609     RSPI IU ; %RSPI: 2517
   2610     IF NSPN=0 ;
   2611       NSPN := NSPN0 ;
   2612       LOOP I 1 3 ;
   2613         SPI(I) := SPI0(I) ;
   2614         SSC(I) := SSC0(I) ;
   2615         ENDLOOP ;
   2616       ELSEIF LO(1) ;
   2617       IF NSPN0>0 ;
   2618         NSPN := NSPN+NSPN0-1 ;
   2619         RANGE := 2&NSPN0 ;
   2620         LOOP I 1 3 ;
   2621           SPI(I) := SPI(I)&(SPI0(I)|RANGE) ;
   2622           SSC(I) := SSC(I)&(SSC0(I)|RANGE) ;
   2623           ENDLOOP ;
   2624         ENDIF ;
   2625       ENDIF ;
   2626     ENDPROCEDURE ;
   2627   PROCEDURE ADDSPIS FN1 FN2 FN ;
   2628     CR ; %CR:  892
   2629     OPENF 77 FN2 'OLD' ;
   2630     RSPI 77 ; %RSPI: 2517
   2631     CLOSEF 77 ;
   2632     OPENF 77 FN1 'OLD' ;
   2633     ASPI 77 ; %ASPI: 2598
   2634     CLOSEF 77 ;
   2635     OPENF 77 FN 'UNKNOWN' ;
   2636     PSPI 77 ; %PSPI: 2472
   2637     CLOSEF 77 ;
   2638     ENDPROCEDURE ;
   2639   PROCEDURE FG PIC XL XR YB YT DX DY TITLE I ;
   2640     VARIABLE N 1 ;
   2641     CLEAR PIC ;
   2642     IF I=1 ;
   2643       GRMOVE XL*1.5 YB 0 PIC ;
   2644       GRMOVE XR*1.5 YT 0 PIC ;
   2645       ENDIF ;
   2646     GRMOVE XL YB 0 PIC ;
   2647     GRDRAW XL YT 0 PIC ;
   2648     GRDRAW XR YT 0 PIC ;
   2649     GRDRAW XR YB 0 PIC ;
   2650     GRDRAW XL YB 0 PIC ;
   2651     N := INT(XR/DX) ;
   2652     IF N<0 ;
   2653       N := N-1 ;
   2654       ENDIF ;
   2655     WHILE (N*DX)>XL ;
   2656       GRMOVE N*DX YB 0 PIC ;
   2657       GRDRAW N*DX ABS(YT-YB)/100+YB 0 PIC ;
   2658       GRMOVE N*DX YT 0 PIC ;
   2659       GRDRAW N*DX -ABS(YT-YB)/100+YT 0 PIC ;
   2660       N := N-1 ;
   2661       ENDWHILE ;
   2662     N := INT(YT/DY) ;
   2663     IF N<0 ;
   2664       N := N-1 ;
   2665       ENDIF ;
   2666     WHILE (N*DY)>YB ;
   2667       GRMOVE XL N*DY 0 PIC ;
   2668       GRDRAW  ABS(XR-XL)/100+XL N*DY 0 PIC ;
   2669       GRMOVE XR N*DY 0 PIC ;
   2670       GRDRAW -ABS(XR-XL)/100+XR N*DY 0 PIC ;
   2671       N := N-1 ;
   2672       ENDWHILE ;
   2673     IF (YT>0)*(YB<0) ;
   2674       GRMOVE XL 0 0 PIC ;
   2675       GRDRAW XR 0 0 PIC ;
   2676       N := INT(XR/DX) ;
   2677       IF N<0 ;
   2678         N := N-1 ;
   2679         ENDIF ;
   2680       WHILE (N*DX)>XL ;
   2681         GRMOVE N*DX 0 0 PIC ;
   2682         GRDRAW N*DX (YT-YB)/100 0 PIC ;
   2683         N := N-1 ;
   2684         ENDWHILE ;
   2685       ENDIF ;
   2686     IF (XR>0)*(XL<0) ;
   2687       GRMOVE 0 YB 0 PIC ;
   2688       GRDRAW 0 YT 0 PIC ;
   2689       N := INT(YT/DY) ;
   2690       IF N<0 ;
   2691         N := N-1 ;
   2692         ENDIF ;
   2693       WHILE N*DY>YB ;
   2694         GRMOVE 0 N*DY 0 PIC ;
   2695         GRDRAW (XL-XR)/100 N*DY 0 PIC ;
   2696         N := N-1 ;
   2697         ENDWHILE ;
   2698       ENDIF ;
   2699     GRMOVE XL YT-(YT-YB)/10 0 PIC ;
   2700     GRCHAR TITLE PIC ;
   2701     GRMOVE 0 0 0 PIC ;
   2702     ENDPROCEDURE ;
   2703   PROCEDURE PTY X ;
   2704     IF LOV=0 ;
   2705       WRITE 6 ' *** ERROR, call OV before PTY' ;
   2706       QUIT 0 ;
   2707       ENDIF ;
   2708     IF LPI#0 ;
   2709       WRITE 6 ' --- WARNING, BP before PTY --> No effect' ;
   2710       ELSEIF TRUE ;
   2711       LPG := X ;
   2712       ENDIF ;
   2713     ENDPROCEDURE ;
   2714   PROCEDURE BP ;
   2715     VARIABLE PIC 8 ;
   2716     VARIABLE I 1 ;
   2717     VARIABLE XF 1 ;
   2718     VARIABLE YF 1 ;
   2719     VARIABLE ZF 1 ;
   2720     VARIABLE COD 1 3 ;
   2721     PROCEDURE CTR X Y Z ;
   2722       COD(1) := X ;
   2723       COD(2) := Y ;
   2724       COD(3) := Z ;
   2725       POLVAL -1 GTRA 3 COD 3 COD 3 ;
   2726       XF := COD(1) ;
   2727       YF := COD(2) ;
   2728       ZF := COD(3) ;
   2729       ENDPROCEDURE ;
   2730     PROCEDURE POS X2 Y2 PIC ;
   2731       IF LPG#0 ;
   2732         CTR X2*LPG Y2*LPG 0 ; %CTR: 2721
   2733         ELSEIF TRUE ;
   2734         XF := X2 ;
   2735         YF := Y2 ;
   2736         ZF := SPOS ;
   2737         ENDIF ;
   2738       GRMOVE ZF XF YF PIC ;
   2739       ENDPROCEDURE ;
   2740     LPI := 1 ;
   2741     CLEAR SYS ;
   2742     GRCOLR 1 SYS ;
   2743     POLVAL 101 GTRA 3 COD 3 COD 3 ;
   2744     NRAYTRA := MIN(NRAY,NRAYTRA0) ; %MIN:  174
   2745     IF NRAY>NRAYTRA0 ;
   2746       WRITE 6 (' --- WARNING in BP, only the first '&         SI(NRAYT
                  RA0)&' rays, including the reference, will be drawn') ; %SI:
                    233
   2747       ENDIF ;
   2748     RAY(1) := RAY(1)*LCB ;
   2749     LOOP I 1 NRAYTRA ;
   2750       CLEAR PIC ;
   2751       GRCOLR RCOL|I PIC ;
   2752       POS RAY(1)|I RAY(3)|I PIC ; %POS: 2730
   2753       TRA(I) := PIC ;
   2754       ENDLOOP ;
   2755     RAY(1) := RAY(1)*LCB ;
   2756     IF LENV=1 ;
   2757       CLEAR ETRA ;
   2758       GRCOLR 3 ETRA ;
   2759       POS ERAY(1) ERAY(3) ETRA ; %POS: 2730
   2760       ENDIF;
   2761     LOOP I 1 8 ;
   2762       RSC(I) := RAY(I) ;
   2763       ENDLOOP ;
   2764     LOOP I 1 4 ;
   2765       ERSC(I) := ERAY(I) ;
   2766       ENDLOOP ;
   2767     IF NSPN>0 ;
   2768       LOOP I 1 3 ;
   2769         SSC(I) := SPI(I) ;
   2770         ENDLOOP ;
   2771       ENDIF ;
   2772     ENDPROCEDURE ;
   2773   PROCEDURE EP ;
   2774     LPI := 0 ;
   2775     ENDPROCEDURE ;
   2776   PROCEDURE PP IU PHI THETA ;
   2777     VARIABLE PICLEN 1 ;
   2778     VARIABLE I 1 ;
   2779     PROCEDURE PRPI ;
   2780       VARIABLE PICTURE PICLEN ;
   2781       PICTURE := SYS ;
   2782       LOOP I 1 NRAYTRA ;
   2783         PICTURE := PICTURE&TRA(I) ;
   2784         ENDLOOP ;
   2785       IF LENV#0 ;
   2786         PICTURE := PICTURE&ETRA ;
   2787         ENDIF ;
   2788       IF LAX=2 ;
   2789         PICTURE := PICTURE&SYS0 ;
   2790         IF (PHI=0)*(THETA=0) ;
   2791           GRCHAR 'X-motion' PICTURE ;
   2792           ELSEIF (PHI=0)*(THETA=90) ;
   2793           GRCHAR 'Y-motion' PICTURE ;
   2794           ENDIF ;
   2795         ENDIF ;
   2796       GRPROJ PHI THETA PICTURE ;
   2797       WRITE IU PICTURE ;
   2798       ENDPROCEDURE ;
   2799     PICLEN := 0 ;
   2800     LOOP I 1 NRAYTRA ;
   2801       PICLEN := PICLEN + LENGTH(TRA(I)) ;
   2802       ENDLOOP ;
   2803     SVSCR ; %SVSCR:  261
   2804     PICLEN := PICLEN + LENGTH(SYS) + LENGTH(ETRA) + 200 ;
   2805     PICLEN := MAX(PICLEN,LSCR) ; %MAX:  171
   2806     SCRLEN PICLEN ;
   2807     PRPI ; %PRPI: 2779
   2808     SCRLEN LSCR ;
   2809     ENDPROCEDURE ;
   2810   PROCEDURE PPT IU TR PHI THETA ;
   2811     VARIABLE PICLEN 1 ;
   2812     PROCEDURE PRPI ;
   2813       VARIABLE PICTURE PICLEN ;
   2814       PICTURE := SYS ;
   2815       PICTURE := PICTURE&TR ;
   2816       IF NRAY>0 ;
   2817         PICTURE := PICTURE&TRA(1) ;
   2818         ENDIF ;
   2819       IF LAX=2 ;
   2820         PICTURE := PICTURE&SYS0 ;
   2821         IF (PHI=0)*(THETA=0) ;
   2822           GRCHAR 'X-motion' PICTURE ;
   2823           ELSEIF (PHI=0)*(THETA=90) ;
   2824           GRCHAR 'Y-motion' PICTURE ;
   2825           ENDIF ;
   2826         ENDIF ;
   2827       GRPROJ PHI THETA PICTURE ;
   2828       WRITE IU PICTURE ;
   2829       ENDPROCEDURE ;
   2830     SVSCR ; %SVSCR:  261
   2831     PICLEN := 2*LENGTH(TR)+LENGTH(SYS)+500 ;
   2832     PICLEN := MAX(PICLEN,LSCR) ; %MAX:  171
   2833     SCRLEN PICLEN ;
   2834     PRPI ; %PRPI: 2812
   2835     SCRLEN LSCR ;
   2836     ENDPROCEDURE ;
   2837   PROCEDURE PG I1 I2 ;
   2838     VARIABLE XA 1 ;
   2839     VARIABLE XB 1 ;
   2840     VARIABLE YA 1 ;
   2841     VARIABLE YB 1 ;
   2842     VARIABLE ZA 1 ;
   2843     VARIABLE ZB 1 ;
   2844     VARIABLE DX 1 ;
   2845     VARIABLE XC 1 ;
   2846     VARIABLE DY 1 ;
   2847     VARIABLE YC 1 ;
   2848     VARIABLE DZ 1 ;
   2849     VARIABLE ZC 1 ;
   2850     VARIABLE F 1 ;
   2851     VARIABLE LAXO 1 ;
   2852     CLEAR SYS0 ;
   2853     IF LSYS#0 ;
   2854       GRMIMA SYS XA XB YA YB ZA ZB ;
   2855       ELSEIF TRUE ;
   2856       GRMIMA TRA(1) XA XB YA YB ZA ZB ;
   2857       ENDIF ;
   2858     F := 1.2 ;
   2859     DX := XB-XA ;
   2860     DY := YB-YA ;
   2861     DZ := ZB-ZA ;
   2862     XC := (XB+XA)/2 ;
   2863     YC := (YB+YA)/2 ;
   2864     ZC := (ZB+ZA)/2 ;
   2865     IF    LPG#0 ;
   2866       DZ := MAX(DX,MAX(DY,DZ))/2*F ; %MAX:  171 %MAX:  171
   2867       DY := DZ ;
   2868       DX := DZ*1.5 ;
   2869       ELSEIF TRUE ;
   2870       DZ := DZ/2*F ;
   2871       DY := DY/2*F ;
   2872       DX := DX/2*F ;
   2873       ENDIF ;
   2874     GRMOVE XC+DX YC+DY ZC+DZ SYS0 ;
   2875     GRMOVE XC-DX YC-DY ZC-DZ SYS0 ;
   2876     IF    LPG#0 ;
   2877       DZ := DZ/F ;
   2878       DY := DZ ;
   2879       DX := DZ ;
   2880       ELSEIF TRUE ;
   2881       DZ := DZ/F ;
   2882       DY := DY/F ;
   2883       DX := DX/F ;
   2884       ENDIF ;
   2885     IF LAX#0 ;
   2886       GRCOLR 3 SYS0 ;
   2887       GRMOVE XC+DX YC-DY ZC-DZ SYS0 ;
   2888       GRCHAR SF(XB-XA,'(G8.2)') SYS0 ; %SF:  230
   2889       GRMOVE XC-DX YC+DY ZC-DZ SYS0 ;
   2890       GRCHAR SF(YB-YA,'(G8.2)') SYS0 ; %SF:  230
   2891       GRMOVE XC-DX YC-DY ZC+DZ SYS0 ;
   2892       GRCHAR SF(ZB-ZA,'(G8.2)') SYS0 ; %SF:  230
   2893       GRMOVE XC+DX YC+DY ZC+DZ SYS0 ;
   2894       ENDIF ;
   2895     LAXO := LAX ;
   2896     LAX := 2 ;
   2897     PP I1 0 0 ; %PP: 2776
   2898     PP I2 0 90 ; %PP: 2776
   2899     LAX := LAXO ;
   2900     ENDPROCEDURE ;
   2901   PROCEDURE PGE I1 I2 ;
   2902     VARIABLE XA 1 ;
   2903     VARIABLE XB 1 ;
   2904     VARIABLE YA 1 ;
   2905     VARIABLE YB 1 ;
   2906     VARIABLE ZA 1 ;
   2907     VARIABLE ZB 1 ;
   2908     VARIABLE DX 1 ;
   2909     VARIABLE XC 1 ;
   2910     VARIABLE DY 1 ;
   2911     VARIABLE YC 1 ;
   2912     VARIABLE DZ 1 ;
   2913     VARIABLE ZC 1 ;
   2914     VARIABLE LAXO 1 ;
   2915     IF LENV=0 ;
   2916       WRITE 6 ' *** ERROR, call ENVEL or SCDE before PGE' ;
   2917       QUIT 0 ;
   2918       ENDIF ;
   2919     CLEAR SYS0 ;
   2920     IF LSYS#0 ;
   2921       GRMIMA SYS XA XB YA YB ZA ZB ;
   2922       ELSEIF TRUE ;
   2923       GRMIMA TRA(1) XA XB YA YB ZA ZB ;
   2924       ENDIF ;
   2925     DX := XB-XA ;
   2926     DY := YB-YA ;
   2927     DZ := ZB-ZA ;
   2928     XC := (XB+XA)/2 ;
   2929     YC := (YB+YA)/2 ;
   2930     ZC := (ZB+ZA)/2 ;
   2931     DX := MAX(DX,MAX(DY,DZ))/2 ; %MAX:  171 %MAX:  171
   2932     DY := DX*1.2 ;
   2933     DZ := DX ;
   2934     GRMOVE XC+DY*1.5 YC+DY ZC+DY SYS0 ;
   2935     GRMOVE XC-DY*1.5 YC-DY ZC-DY SYS0 ;
   2936     GRCOLR 3 SYS0 ;
   2937     GRMOVE XC+DZ YC-DZ ZC-DZ SYS0 ;
   2938     GRCHAR SF(XB-XA,'(G8.2)') SYS0 ; %SF:  230
   2939     GRMOVE XC-DZ YC+DZ ZC-DZ SYS0 ;
   2940     GRCHAR SF(YB-YA,'(G8.2)') SYS0 ; %SF:  230
   2941     GRMOVE XC-DZ YC-DZ ZC+DZ SYS0 ;
   2942     GRCHAR SF(ZB-ZA,'(G8.2)') SYS0 ; %SF:  230
   2943     GRMOVE XC+DX YC+DY ZC+DZ SYS0 ;
   2944     LAXO := LAX ;
   2945     LAX := 2 ;
   2946     PPT I1 ETRA 0 0 ; %PPT: 2810
   2947     PPT I2 ETRA 0 90 ; %PPT: 2810
   2948     LAX := LAXO ;
   2949     ENDPROCEDURE ;
   2950   PROCEDURE STW I MU ALPHA BETA GAMMA ;
   2951     VARIABLE COSMU 1 ;
   2952     VARIABLE SINMU 1 ;
   2953     VARIABLE I1 1 ;
   2954     VARIABLE I2 1 ;
   2955     I1 := 2*I-1 ;
   2956     I2 := 2*I ;
   2957     COSMU := COS(MU) ;
   2958     SINMU := SIN(MU) ;
   2959     MAP(I1) := (COSMU + ALPHA*SINMU)*DD(I1) + BETA *SINMU*DD(I2) ;
   2960     MAP(I2) := (COSMU - ALPHA*SINMU)*DD(I2) - GAMMA*SINMU*DD(I1) ;
   2961     ENDPROCEDURE ;
   2962   FUNCTION SE M ;
   2963     VARIABLE I 1 ;
   2964     VARIABLE J 1 ;
   2965     VARIABLE K 1 ;
   2966     VARIABLE X NM1 ;
   2967     VARIABLE Y 1 ;
   2968     Y := -1 ;
   2969     SE := 0 ;
   2970     LOOP I 1 TWOND ;
   2971       LOOP J 1 TWOND ;
   2972         IF Y*(I-J)=1 ;
   2973           X:= Y ;
   2974           ELSEIF TRUE ;
   2975           X := 0 ;
   2976           ENDIF ;
   2977         LOOP K 2 TWOND 2 ;
   2978           X := X+DER(K-1,M(I))*DER(K,M(J))-DER(K-1,M(J))*DER(K,M(I)) ;
                   %DER:  252 %DER:  252 %DER:  252 %DER:  252
   2979           ENDLOOP ;
   2980         CO NOC-1 ; %CO:  910
   2981         SE := SE+WABS(X,WAF) ; %WABS:  249
   2982         CO NOC+1 ; %CO:  910
   2983         ENDLOOP ;
   2984       Y := -Y ;
   2985       ENDLOOP ;
   2986     SE := SE/TWOND/TWOND ;
   2987     ENDFUNCTION ;
   2988   FUNCTION OE A ;
   2989     VARIABLE X NM1 ;
   2990     VARIABLE I 1 ;
   2991     VARIABLE J 1 ;
   2992     VARIABLE K 1 ;
   2993     OE := 0 ;
   2994     LOOP I 1 3 ;
   2995       LOOP J 1 3 ;
   2996         IF I=J ;
   2997           X := -1 ;
   2998           ELSEIF TRUE ;
   2999           X :=  0 ;
   3000           ENDIF ;
   3001         LOOP K 1 3 ;
   3002           X := X+A(I,K)*A(J,K) ;
   3003           ENDLOOP ;
   3004         OE := OE + WABS(X, WAF) ; %WABS:  249
   3005         ENDLOOP ;
   3006       ENDLOOP ;
   3007     X := A(1,1)*(A(2,2)*A(3,3)-A(3,2)*A(2,3))-           A(1,2)*(A(2,1
                  )*A(3,3)-A(3,1)*A(2,3))+           A(1,3)*(A(2,1)*A(3,2)-A(3
                  ,1)*A(2,2)) ;
   3008     OE := OE/9+WABS(X-1,WAF) ; %WABS:  249
   3009     ENDFUNCTION ;
   3010   PROCEDURE LFM MF C M F IT ;
   3011     VARIABLE NOM 1 ;
   3012     VARIABLE I 1 ;
   3013     VARIABLE J 1 ;
   3014     VARIABLE K 1 ;
   3015     VARIABLE H1 1 ;
   3016     VARIABLE H2 1 ;
   3017     VARIABLE H3 1 ;
   3018     VARIABLE NF 1 ;
   3019     NOM := NOC ;
   3020     IF ABS(IT)=1 ;
   3021       NF := 1 ;
   3022       ELSEIF ABS(IT)=2 ;
   3023       NF := NOM-1 ;
   3024       ELSEIF ABS(IT)=3 ;
   3025       NF := INT(LOG(NOC-1)/LOG(2))+1 ;
   3026       ELSEIF TRUE ;
   3027       WRITE 6 ' *** ERROR in LFM, wrong mode' ;
   3028       QUIT 0 ;
   3029       ENDIF ;
   3030     CO NOM+1 ; %CO:  910
   3031     H1 := 1 ;
   3032     H2 := 0 ;
   3033     H3 := 1 ;
   3034     LOOP I 1 TWOND ;
   3035       IF IT=1 ;
   3036         MF(I) := LEXP(F,DD(I)) ; %LEXP:  491
   3037         ELSEIF IT=-1 ;
   3038         MF(I) := LEXP(F,M(I)) ; %LEXP:  491
   3039         ELSEIF IT>1 ;
   3040         MF(I) := LEXP(F(NF),DD(I)) ; %LEXP:  491
   3041         H1 := NF-1 ;
   3042         H2 := 1 ;
   3043         H3 := -1 ;
   3044         ELSEIF IT<-1 ;
   3045         MF(I) := LEXP(F(1),M(I)) ; %LEXP:  491
   3046         H1 := 2 ;
   3047         H2 := NF ;
   3048         H3 := 1 ;
   3049         ENDIF ;
   3050       LOOP J H1 H2 H3 ;
   3051         MF(I) := LEXP(F(J),MF(I)) ; %LEXP:  491
   3052         ENDLOOP ;
   3053       ENDLOOP ;
   3054     CO NOM ; %CO:  910
   3055     IF IT>0 ;
   3056       ANM MF M MF ; %ANM: 1508
   3057       ENDIF ;
   3058     LOOP J 1 TWOND ;
   3059       MF(J) := MF(J) + C(J) ;
   3060       ENDLOOP ;
   3061     ENDPROCEDURE ;
   3062   PROCEDURE MLF MF C M F IT ;
   3063     VARIABLE P NM1 NOC-1 ;
   3064     VARIABLE IE 1 ;
   3065     VARIABLE L NM1 TWOND ;
   3066     VARIABLE NL NM1 TWOND ;
   3067     VARIABLE PL NM1 ;
   3068     VARIABLE SN NM1 NV ;
   3069     VARIABLE N NM1 NV ;
   3070     VARIABLE FF NM1 ;
   3071     VARIABLE NF 1 ;
   3072     VARIABLE I 1 ;
   3073     VARIABLE J 1 ;
   3074     VARIABLE K 2 ;
   3075     VARIABLE NOM 1 ;
   3076     PROCEDURE PBO J I PL ;
   3077       VARIABLE A 1 2^(I-1) I ;
   3078       VARIABLE B 1 I 2 ;
   3079       VARIABLE Z1 1 ;
   3080       VARIABLE Z2 1 ;
   3081       VARIABLE Z3 1 ;
   3082       VARIABLE Z4 1 ;
   3083       VARIABLE Z5 1 ;
   3084       VARIABLE NEN 1 ;
   3085       VARIABLE PH NM1 ;
   3086       Z1 := 1 ;
   3087       A(1,1) := I ;
   3088       B(1,1) := 1 ;
   3089       B(1,2) := 1 ;
   3090       PL := 0 ;
   3091       NEN := 1 ;
   3092       LOOP Z2 2 I ;
   3093         NEN := NEN*Z2 ;
   3094         B(Z2,1) := Z1 + 1 ;
   3095         LOOP Z3 1 I-Z2+1 ;
   3096           LOOP Z4 0 B(Z2-1,2)-1 ;
   3097             IF (A(B(Z2-1,1)+Z4,1)-Z3)>0 ;
   3098               Z1 := Z1 + 1 ;
   3099               A(Z1,1) := Z3 ;
   3100               A(Z1,2) := A(B(Z2-1,1)+Z4,1)-Z3 ;
   3101               LOOP Z5 2 Z2-1 ;
   3102                 A(Z1,Z5+1) := A(B(Z2-1,1)+Z4,Z5) ;
   3103                 ENDLOOP ;
   3104               PH := PB(P(A(Z1,Z2)),DD(J)) ; %PB:  484
   3105               LOOP Z5 Z2-1 1 -1 ;
   3106                 PH := PB(P(A(Z1,Z5)),PH) ; %PB:  484
   3107                 ENDLOOP ;
   3108               PL := PL + PH/NEN ;
   3109               ENDIF ;
   3110             ENDLOOP ;
   3111           ENDLOOP ;
   3112         B(Z2,2) := Z1 - B(Z2,1) + 1 ;
   3113         ENDLOOP ;
   3114       ENDPROCEDURE ;
   3115     NOM := NOC ;
   3116     IF ABS(IT)=1 ;
   3117       NF := 1 ;
   3118       ELSEIF ABS(IT)=2 ;
   3119       NF := NOM-1 ;
   3120       ELSEIF ABS(IT)=3 ;
   3121       NF := INT(LOG(NOC-1)/LOG(2))+1 ;
   3122       ELSEIF TRUE ;
   3123       WRITE 6 ' *** ERROR in MLF, wrong mode' ;
   3124       QUIT 0 ;
   3125       ENDIF ;
   3126     IF TWOND=NV ;
   3127       LOOP I 1 TWOND ;
   3128         C(I) := CONS(MF(I)) ;
   3129         N(I) := MF(I)-C(I) ;
   3130         ENDLOOP ;
   3131       CO 1 ; %CO:  910
   3132       LOOP I 1 TWOND ;
   3133         M(I) := N(I) ;
   3134         ENDLOOP ;
   3135       MI M SN NV IE NOC NV NM1 ; %MI:  375
   3136       CO NOM ; %CO:  910
   3137       ELSEIF TRUE ;
   3138       LOOP I 1 TWOND ;
   3139         SN(I) := 0*DD(I) ;
   3140         M(I) := 0 ;
   3141         ENDLOOP ;
   3142       LOOP I TWOND+1 NV ;
   3143         SN(I) := DD(I) ;
   3144         ENDLOOP ;
   3145       POLVAL 1 MF TWOND SN NV C TWOND ;
   3146       LOOP I 1 TWOND ;
   3147         N(I) := MF(I)-C(I) ;
   3148         LOOP J 1 TWOND ;
   3149           L(J) := DER(J,N(I)) ; %DER:  252
   3150           ENDLOOP ;
   3151         POLVAL 1 L TWOND SN NV L TWOND ;
   3152         LOOP J 1 TWOND ;
   3153           M(I) := M(I)+L(J)*DD(J) ;
   3154           ENDLOOP ;
   3155         ENDLOOP ;
   3156       LOOP I 1 TWOND ;
   3157         SN(I) := M(I) ;
   3158         ENDLOOP ;
   3159       MI SN SN NV IE NOC NV NM1 ; %MI:  375
   3160       ENDIF ;
   3161     IF IE#0 ;
   3162       WRITE 6 ' *** ERROR in MLF, map singular' ;
   3163       QUIT 0 ;
   3164       ENDIF ;
   3165     IF ABS(IT)=1 ;
   3166       IF IT=1 ;
   3167         POLVAL 1 N TWOND SN NV SN TWOND ;
   3168         ELSEIF IT=-1 ;
   3169         LOOP I TWOND+1 NV ;
   3170           N(I) := DD(I) ;
   3171           ENDLOOP ;
   3172         POLVAL 1 SN TWOND N NV SN TWOND ;
   3173         ENDIF ;
   3174       LOOP I 1 TWOND ;
   3175         N(I) := SN(I) - DD(I) ;
   3176         L(I) := 0*DD(I) ;
   3177         ENDLOOP ;
   3178       LOOP I 2 NOM ;
   3179         LOOP J 1 TWOND ;
   3180           PBO J I-1 PL ; %PBO: 3076
   3181           CO I ; %CO:  910
   3182           NL(J) := N(J) - L(J) - PL ;
   3183           ENDLOOP ;
   3184         LOOP J 1 TWOND 2 ;
   3185           SN(J) := NL(J+1) ;
   3186           SN(J+1) := -NL(J) ;
   3187           ENDLOOP ;
   3188         LOOP J 1 TWOND ;
   3189           L(J) := N(J) ;
   3190           ENDLOOP ;
   3191         CO I+1 ; %CO:  910
   3192         POTI SN TWOND FF ; %POTI:  531
   3193         P(I-1) := FF ;
   3194         ENDLOOP ;
   3195       CO NOM+1 ; %CO:  910
   3196       F := 0*DD(1) ;
   3197       LOOP J 1 NOM-1 ;
   3198         F := F + P(J) ;
   3199         ENDLOOP ;
   3200       CO NOM ; %CO:  910
   3201       ELSEIF IT>1 ;
   3202       POLVAL 1 N TWOND SN NV N TWOND ;
   3203       LOOP I 1 NF ;
   3204         IF IT=2 ;
   3205           K := I+1 ;
   3206           ELSEIF IT=3 ;
   3207           K := MIN(NOM,2^I) ; %MIN:  174
   3208           ENDIF ;
   3209         CO K ; %CO:  910
   3210         LOOP J 1 TWOND 2 ;
   3211           SN(J) := N(J+1)-DD(J+1) ;
   3212           SN(J+1) := -N(J)+DD(J) ;
   3213           ENDLOOP ;
   3214         CO K+1 ; %CO:  910
   3215         POTI SN TWOND FF ; %POTI:  531
   3216         F(I) := FF ;
   3217         CO NOM+1 ; %CO:  910
   3218         LOOP J 1 TWOND ;
   3219           N(J) := LEXP(-FF,N(J)) ; %LEXP:  491
   3220           ENDLOOP ;
   3221         ENDLOOP ;
   3222       CO NOM ; %CO:  910
   3223       ELSEIF IT<-1 ;
   3224       LOOP I TWOND+1 NV ;
   3225         N(I) := DD(I) ;
   3226         ENDLOOP ;
   3227       POLVAL 1 SN TWOND N NV N TWOND ;
   3228       LOOP J TWOND+1 NV ;
   3229         N(J) := DD(J) ;
   3230         ENDLOOP ;
   3231       LOOP I 1 NF ;
   3232         IF IT=-2 ;
   3233           K := I+1 ;
   3234           ELSEIF IT=-3 ;
   3235           K := MIN(NOM,2^I) ; %MIN:  174
   3236           ENDIF ;
   3237         CO K ; %CO:  910
   3238         LOOP J 1 TWOND 2 ;
   3239           SN(J) := N(J+1)-DD(J+1) ;
   3240           SN(J+1) := -N(J)+DD(J) ;
   3241           ENDLOOP ;
   3242         CO K+1 ; %CO:  910
   3243         POTI SN TWOND FF ; %POTI:  531
   3244         F(I) := FF ;
   3245         CO NOM+1 ; %CO:  910
   3246         LOOP J 1 TWOND ;
   3247           SN(J) := LEXP(-FF,DD(J)) ; %LEXP:  491
   3248           ENDLOOP ;
   3249         CO NOM ; %CO:  910
   3250         POLVAL 1 SN TWOND N NV N TWOND ;
   3251         ENDLOOP ;
   3252       ENDIF ;
   3253     ENDPROCEDURE ;
   3254   PROCEDURE LFLF C M F P IA IT ;
   3255     VARIABLE ML NM1 NV ;
   3256     LFM ML C M F IA ; %LFM: 3010
   3257     MLF ML C M P IT ; %MLF: 3062
   3258     ENDPROCEDURE ;
   3259   PROCEDURE GFM MM F IT ;
   3260     VARIABLE N NM1 NV ;
   3261     VARIABLE M NM1 NV ;
   3262     VARIABLE I 1 ;
   3263     IF ABS(IT-1.5)=0.5 ;
   3264       LOOP I 1 TWOND 2 ;
   3265         M(I) := DD(I) ;
   3266         M(I+1) := DER(I,F) ; %DER:  252
   3267         ENDLOOP ;
   3268       ELSEIF ABS(IT-3.5)=0.5 ;
   3269       LOOP I 1 TWOND 2 ;
   3270         M(I) := -DER(I,F) ; %DER:  252
   3271         M(I+1) := DD(I) ;
   3272         ENDLOOP ;
   3273       ELSEIF TRUE ;
   3274       WRITE 6 ' *** ERROR in GFM, wrong type' ;
   3275       QUIT 0 ;
   3276       ENDIF ;
   3277     LOOP I TWOND+1 NV ;
   3278       M(I) := DD(I) ;
   3279       ENDLOOP ;
   3280     MI M N NV I NOC NV NM1 ; %MI:  375
   3281     IF I#0 ;
   3282       WRITE 6 ' *** ERROR in GFM, no inverse' ;
   3283       QUIT 0 ;
   3284       ENDIF ;
   3285     IF ABS(IT-2)=1 ;
   3286       LOOP I 1 TWOND 2 ;
   3287         M(I) := DD(I+1) ;
   3288         M(I+1) := -DER(I+1,F) ; %DER:  252
   3289         ENDLOOP ;
   3290       ELSEIF ABS(IT-3)=1 ;
   3291       LOOP I 1 TWOND 2 ;
   3292         M(I) := DER(I+1,F) ; %DER:  252
   3293         M(I+1) := DD(I+1) ;
   3294         ENDLOOP ;
   3295       ENDIF ;
   3296     ANM M N MM ; %ANM: 1508
   3297     ENDPROCEDURE ;
   3298   PROCEDURE MGF MM F IT IE ;
   3299     PROCEDURE MGFF IE ;
   3300       VARIABLE N NM1 NV ;
   3301       VARIABLE M NM1 NV ;
   3302       VARIABLE AM 1 ND ND ;
   3303       VARIABLE A 1 4 ;
   3304       VARIABLE B 1 4 ;
   3305       VARIABLE C 1 ;
   3306       VARIABLE D 1 ;
   3307       VARIABLE I 1 ;
   3308       VARIABLE J 1 ;
   3309       VARIABLE K 1 ;
   3310       PROCEDURE SUBDET K D ;
   3311         LOOP I 1 ND ;
   3312           LOOP J 1 ND ;
   3313             AM(I,J) := COEF(MM(2*I-A(K)),2*J-B(K)) ; %COEF:  246
   3314             ENDLOOP ;
   3315           ENDLOOP ;
   3316         LDET AM ND ND D ;
   3317         ENDPROCEDURE ;
   3318       IE := 0 ;
   3319       C := 0 ;
   3320       LOOP I 1 TWOND ;
   3321         C := C+ABS(CONS(MM(I))) ;
   3322         ENDLOOP ;
   3323       IF C#0 ;
   3324         WRITE 6 ' *** ERROR in MGF, map not 0-0 ' ;
   3325         QUIT 0 ;
   3326         ENDIF ;
   3327       A(1) := 1 ;
   3328       A(2) := 0 ;
   3329       A(3) := 1 ;
   3330       A(4) := 0 ;
   3331       B(1) := 0 ;
   3332       B(2) := 0 ;
   3333       B(3) := 1 ;
   3334       B(4) := 1 ;
   3335       IF IT>0 ;
   3336         SUBDET IT C ; %SUBDET: 3310
   3337         ELSEIF IT=-1 ;
   3338         LOOP K 1 4 ;
   3339           SUBDET K D ; %SUBDET: 3310
   3340           IF C<ABS(D) ;
   3341             C := ABS(D) ;
   3342             IT := K ;
   3343             ENDIF ;
   3344           ENDLOOP ;
   3345         ELSEIF TRUE ;
   3346         WRITE 6 ' *** ERROR in MGF, wrong type' ;
   3347         QUIT 0 ;
   3348         ENDIF ;
   3349       IF C=0 ;
   3350         IE := 1 ;
   3351         ELSEIF C#0 ;
   3352         LOOP I 1 TWOND 2 ;
   3353           N(I) := DD(I+B(IT)) ;
   3354           N(I+1) := MM(I+1-A(IT)) ;
   3355           ENDLOOP ;
   3356         LOOP I TWOND+1 NV ;
   3357           N(I) := DD(I) ;
   3358           ENDLOOP ;
   3359         MI N M NV IE NOC NV NM1 ; %MI:  375
   3360         LOOP I 1 TWOND 2 ;
   3361           N(I) := (1-2*B(IT))*DD(I+1-B(IT)) ;
   3362           N(I+1) := (1-2*A(IT))*MM(I+A(IT)) ;
   3363           ENDLOOP ;
   3364         ANM N M M ; %ANM: 1508
   3365         CO NOC+1 ; %CO:  910
   3366         POTI M TWOND F ; %POTI:  531
   3367         CO NOC-1 ; %CO:  910
   3368         ENDIF ;
   3369       ENDPROCEDURE ;
   3370     PROCEDURE BESTGF IE ;
   3371       VARIABLE NAP NM1 NV ;
   3372       VARIABLE I 1 ;
   3373       VARIABLE J 1 ;
   3374       VARIABLE DIF 1 ;
   3375       VARIABLE G NM1 ;
   3376       VARIABLE ER 1 ;
   3377       IE := 0 ;
   3378       ER := 1E36 ;
   3379       I := 0 ;
   3380       LOOP IT 1 4 ;
   3381         MGFF J ; %MGFF: 3299
   3382         IF J=0 ;
   3383           GFM NAP F IT ; %GFM: 3259
   3384           DIF := 0 ;
   3385           LOOP J 1 TWOND ;
   3386             DIF := DIF+ABS(MM(J)-NAP(J)) ;
   3387             ENDLOOP ;
   3388           IF DIF<ER ;
   3389             I := IT ;
   3390             CO NOC+1 ; %CO:  910
   3391             G := F ;
   3392             CO NOC-1 ; %CO:  910
   3393             ER := DIF ;
   3394             ENDIF ;
   3395           ENDIF ;
   3396         ENDLOOP ;
   3397       IF I=0 ;
   3398         IE := 1 ;
   3399         ENDIF ;
   3400       IT := I ;
   3401       CO NOC+1 ; %CO:  910
   3402       F := G ;
   3403       CO NOC-1 ; %CO:  910
   3404       ENDPROCEDURE ;
   3405     IF IT=-2 ;
   3406       BESTGF IE ; %BESTGF: 3370
   3407       ELSEIF TRUE ;
   3408       MGFF IE ; %MGFF: 3299
   3409       ENDIF ;
   3410     ENDPROCEDURE ;
   3411   PROCEDURE SY MM ;
   3412     VARIABLE IT 1 ;
   3413     VARIABLE IE 1 ;
   3414     VARIABLE F NM1 ;
   3415     IT := -1 ;
   3416     MGF MM F IT IE ; %MGF: 3298
   3417     GFM MM F IT ; %GFM: 3259
   3418     ENDPROCEDURE ;
   3419   PROCEDURE BDEP NAP LGH B ;
   3420     VARIABLE IAP NM1 NV ;
   3421     VARIABLE NT NM1 ;
   3422     VARIABLE NC 1 ;
   3423     VARIABLE F1 NM1 ;
   3424     VARIABLE I 1 ;
   3425     VARIABLE BW NM2 ;
   3426     VARIABLE ZW 2 ;
   3427     VARIABLE AW 2 ;
   3428     VARIABLE NU1 1 ;
   3429     VARIABLE NU2 1 ;
   3430     VARIABLE MC 1 ;
   3431     VARIABLE PW NM2 ;
   3432     FUNCTION WW Q ;
   3433       IF CONS(Q)#0 ;
   3434         WW := Q/CONS(Q) ;
   3435         ELSEIF TRUE ;
   3436         WW := 1 ;
   3437         ENDIF ;
   3438       ENDFUNCTION ;
   3439     NU1 := MIN(TWOND,4) ; %MIN:  174
   3440     NU2 := MIN(TWOND,5) ; %MIN:  174
   3441     MC := CONS(M0) ;
   3442     BW := WW(B) ; %WW: 3432
   3443     ZW := WW(Z0) ; %WW: 3432
   3444     AW := WW(LGH) ; %WW: 3432
   3445     PW := WW(P0) ; %WW: 3432
   3446     NC := CONS(ETA) ;
   3447     BW := BW*ZW*AW/PW ;
   3448     LOOP I 1 NU1 2 ;
   3449       IAP(I) := DD(I)/AW ;
   3450       IAP(I+1) := DD(I+1)/PW ;
   3451       ENDLOOP ;
   3452     LOOP I NU1+1 NV ;
   3453       IAP(I) := DD(I) ;
   3454       ENDLOOP ;
   3455     IF ND>2 ;
   3456       NAP(6) := DD(6) ;
   3457       ENDIF ;
   3458     I := TWOND+1 ;
   3459     IF TYPE(B)=TYPE(DD(1)) ;
   3460       WHILE CONS(DER(I,B))=0 ; %DER:  252
   3461         I := I+1 ;
   3462         ENDWHILE ;
   3463       ENDIF ;
   3464     IAP(I) := 0*IAP(1)+BW-1 ;
   3465     POLVAL 1 NAP NU2 IAP NV NAP NU2 ;
   3466     LOOP I 1 NU1 2 ;
   3467       NAP(I) := NAP(I)*AW ;
   3468       NAP(I+1) := NAP(I+1)*PW ;
   3469       ENDLOOP ;
   3470     IF ND=3 ;
   3471       F1 := CONS(V0)/V0 ;
   3472       NAP(5) := DD(5)+LGH*(1+NC)/(2+NC)*(1-F1)+F1*AW*(NAP(5)-DD(5)) ;
   3473       ENDIF ;
   3474     ENDPROCEDURE ;
   3475   PROCEDURE EDEP NAP LGH B ;
   3476     VARIABLE IAP NM1 NV ;
   3477     VARIABLE NT NM1 ;
   3478     VARIABLE NC 1 ;
   3479     VARIABLE F1 NM1 ;
   3480     VARIABLE I 1 ;
   3481     VARIABLE BW 2 ;
   3482     VARIABLE ZW 2 ;
   3483     VARIABLE AW 2 ;
   3484     VARIABLE NU1 1 ;
   3485     VARIABLE NU2 1 ;
   3486     VARIABLE MC 1 ;
   3487     FUNCTION WW Q ;
   3488       IF CONS(Q)#0 ;
   3489         WW := Q/CONS(Q) ;
   3490         ELSEIF TRUE ;
   3491         WW := 1 ;
   3492         ENDIF ;
   3493       ENDFUNCTION ;
   3494     NU1 := MIN(TWOND,4) ; %MIN:  174
   3495     NU2 := MIN(TWOND,5) ; %MIN:  174
   3496     MC := CONS(M0) ;
   3497     BW := WW(B) ; %WW: 3487
   3498     ZW := WW(Z0) ; %WW: 3487
   3499     AW := WW(LGH) ; %WW: 3487
   3500     NC := CONS(ETA) ;
   3501     NT := SQRT(1+SQR(P0/MC/AMUMEV/BW/ZW/AW))-1 ;
   3502     LOOP I 1 NU1 2 ;
   3503       IAP(I) := DD(I)/AW ;
   3504       NAP(I) := NAP(I)*AW ;
   3505       ENDLOOP ;
   3506     LOOP I 2 NU1 2 ;
   3507       IAP(I) := DD(I)/BW/ZW/AW ;
   3508       NAP(I) := NAP(I)*BW*ZW*AW ;
   3509       ENDLOOP ;
   3510     LOOP I NU1+1 NV ;
   3511       IAP(I) := DD(I) ;
   3512       ENDLOOP ;
   3513     IF ND<3 ;
   3514       I := TWOND+1 ;
   3515       WHILE CONS(DER(I,E0))=0 ; %DER:  252
   3516         I := I+1 ;
   3517         IF I>NV ;
   3518           WRITE 6 ' *** ERROR in EDEP, energy not parameter' ;
   3519           QUIT 0 ;
   3520           ENDIF ;
   3521         ENDWHILE ;
   3522       ELSEIF ND>2 ;
   3523       I := 6 ;
   3524       ENDIF ;
   3525     IAP(I) := 0*IAP(1)+NT/NC-1 ;
   3526     POLVAL 1 NAP NU2 IAP NV NAP NU2 ;
   3527     IF ND=3 ;
   3528       F1 := (1+ETA)/(1+NT)*M0/MC/BW/ZW/AW ;
   3529       NAP(5) := DD(5)+LGH*(1+NC)/(2+NC)*(1-F1)+F1*AW*(NAP(5)-DD(5)) ;
   3530       ENDIF ;
   3531     ENDPROCEDURE ;
   3532   PROCEDURE MCM IAP LGH ALPHA ;
   3533     VARIABLE XF NM1 NV ;
   3534     VARIABLE MF NM1 TWOND ;
   3535     VARIABLE IER 1 ;
   3536     IF ND#3 ;
   3537       WRITE 6 ' *** ERROR in MCM, dimension # 3' ;
   3538       ENDIF ;
   3539     CATR IAP IAP LGH ; %CATR: 1602
   3540     TWOND := 5 ;
   3541     FM IAP XF MF IER ; %FM: 1801
   3542     TWOND := 6 ;
   3543     ALPHA := (XF(5)-DD(5))/LGH ;
   3544     ENDPROCEDURE ;
   3545   PROCEDURE ECM IAP LGH ALPHA ;
   3546     VARIABLE XF NM1 NV ;
   3547     VARIABLE MF NM1 TWOND ;
   3548     VARIABLE IER 1 ;
   3549     IF ND#3 ;
   3550       WRITE 6 ' *** ERROR in ECM, dimension # 3' ;
   3551       ENDIF ;
   3552     TWOND := 5 ;
   3553     FM IAP XF MF IER ; %FM: 1801
   3554     TWOND := 6 ;
   3555     ALPHA := XF(5)-DD(5) ;
   3556     ENDPROCEDURE ;
   3557   PROCEDURE BM M MB A IER ;
   3558     VARIABLE I 1 ;
   3559     VARIABLE J 1 ;
   3560     VARIABLE K 1 ;
   3561     VARIABLE MM 1 NV NV ;
   3562     VARIABLE MA 1 NV NV ;
   3563     VARIABLE MI 1 NV NV ;
   3564     VARIABLE SCR NM1 NV ;
   3565     LOOP I 1 TWOND ;
   3566       LOOP J 1 TWOND ;
   3567         DAPEE M(I) J K ;
   3568         MM(I,J) := K ;
   3569         ENDLOOP ;
   3570       ENDLOOP ;
   3571     MBLOCK MM MA MI NV TWOND ;
   3572     LOOP I 1 TWOND ;
   3573       A(I) := 0 ;
   3574       SCR(I) := 0 ;
   3575       LOOP J 1 TWOND ;
   3576         A(I) := A(I) + MI(I,J)*DD(J) ;
   3577         SCR(I) := SCR(I) + MA(I,J)*DD(J) ;
   3578         ENDLOOP ;
   3579       ENDLOOP ;
   3580     ANM M SCR SCR ; %ANM: 1508
   3581     LOOP I 1 TWOND ;
   3582       MB(I) := 0 ;
   3583       LOOP J 1 TWOND ;
   3584         MB(I) := MB(I) + MI(I,J)*SCR(J) ;
   3585         ENDLOOP ;
   3586       ENDLOOP ;
   3587     ENDPROCEDURE ;
   3588   PROCEDURE GT MM F MU ALPHA BETA GAMMA R ;
   3589     VARIABLE A NMP ;
   3590     VARIABLE B NMP ;
   3591     VARIABLE C NMP ;
   3592     VARIABLE D NMP ;
   3593     VARIABLE COSMU 2*NMP ;
   3594     VARIABLE SINMU 2*NMP ;
   3595     VARIABLE DEN 2*NMP ;
   3596     VARIABLE M NM1 TWOND ;
   3597     VARIABLE I 2 ;
   3598     VARIABLE J 1 ;
   3599     VARIABLE K 1 ;
   3600     VARIABLE L 1 ;
   3601     VARIABLE DET 1 ;
   3602     PROCEDURE OUT ;
   3603       VARIABLE DUM 2*NMP ;
   3604       DUM := R(J)*SINMU ;
   3605       MU(J) := MU(J)/2/PI ;
   3606       ALPHA(J) := (A-D)/2/DUM ;
   3607       BETA(J) := B/DUM ;
   3608       GAMMA(J) := -C/DUM ;
   3609       ENDPROCEDURE ;
   3610     FM MM F M I ; %FM: 1801
   3611     IMUNIT I ;
   3612     LOOP J 1 ND ;
   3613       K := 2*J-1 ;
   3614       L := K+1 ;
   3615       DAPEP M(K) K TWOND A ;
   3616       DAPEP M(K) L TWOND B ;
   3617       DAPEP M(L) K TWOND C ;
   3618       DAPEP M(L) L TWOND D ;
   3619       DET := CONS(A)*CONS(D)-CONS(B)*CONS(C) ;
   3620       CO NOC-1 ; %CO:  910
   3621       IF DET>0 ;
   3622         R(J) := SQRT(A*D-B*C) ;
   3623         COSMU := (A+D)/2/R(J) ;
   3624         IF ABS(ABS(CONS(COSMU))-1)<DEPS ;
   3625           IF ((ABS(B)+ABS(C))=0)*(ABS(COSMU-CONS(COSMU))=0) ;
   3626             ALPHA(J) := 0 ;
   3627             BETA(J) := 1 ;
   3628             GAMMA(J) := 1 ;
   3629             IF CONS(COSMU)<0 ;
   3630               MU(J) := 1/2+0*DD(1) ;
   3631               ELSEIF TRUE ;
   3632               MU(J) := 0*DD(1) ;
   3633               ENDIF ;
   3634             ELSEIF TRUE ;
   3635             WRITE 6 ' *** ERROR in GT, unrepresentable map' ;
   3636             QUIT 0 ;
   3637             ENDIF ;
   3638           ELSEIF ABS(CONS(COSMU))>1 ;
   3639           IF CONS(COSMU)<0 ;
   3640             COSMU := - COSMU ;
   3641             DEN := PI ;
   3642             K := -1 ;
   3643             ELSEIF TRUE ;
   3644             DEN := 0 ;
   3645             K := 1 ;
   3646             ENDIF ;
   3647           SINMU := SQRT(SQR(COSMU)-1) ;
   3648           MU(J) := DEN+I*LOG(COSMU+SINMU) ;
   3649           SINMU := K*I*SINMU ;
   3650           OUT ; %OUT: 3602
   3651           ELSEIF ABS(CONS(COSMU))<1 ;
   3652           MU(J) := ACOS(COSMU) ;
   3653           IF CONS(B)<0 ;
   3654             MU(J) := 2*PI-MU(J) ;
   3655             ENDIF ;
   3656           SINMU := SIN(MU(J)) ;
   3657           OUT ; %OUT: 3602
   3658           ENDIF ;
   3659         ELSEIF DET=0 ;
   3660         IF (ABS(A)=0)*(ABS(B)=0)*(ABS(C)=0)*(ABS(D)=0) ;
   3661           R(J) := 0 ;
   3662           MU(J) := 0 ;
   3663           ALPHA(J) := 0 ;
   3664           BETA(J) := 1 ;
   3665           GAMMA(J) := 1 ;
   3666           ELSEIF TRUE ;
   3667           WRITE 6 ' *** ERROR in GT, DET=0' ;
   3668           QUIT 0 ;
   3669           ENDIF ;
   3670         ELSEIF DET<0 ;
   3671         DEN := SQRT(-(A*D-B*C)) ;
   3672         R(J) := I*DEN ;
   3673         COSMU := (A+D)/2/DEN ;
   3674         IF CONS(COSMU)<0 ;
   3675           COSMU := - COSMU ;
   3676           K := -1 ;
   3677           ELSEIF TRUE ;
   3678           K := 1 ;
   3679           ENDIF ;
   3680         SINMU := SQRT(SQR(COSMU)+1) ;
   3681         MU(J) := PI/2+K*I*LOG(SINMU+COSMU) ;
   3682         OUT ; %OUT: 3602
   3683         ENDIF ;
   3684       CO NOC+1 ; %CO:  910
   3685       ENDLOOP ;
   3686     ENDPROCEDURE ;
   3687   PROCEDURE DANF M MN MA IMA RS EPS ;
   3688     VARIABLE J 1 ;
   3689     VARIABLE K 1 ;
   3690     VARIABLE L 2 ;
   3691     VARIABLE NOM 1 ;
   3692     VARIABLE IER 1 ;
   3693     VARIABLE XF 100 NV ;
   3694     VARIABLE T 2*NM1 ;
   3695     VARIABLE F 100 TWOND ;
   3696     VARIABLE MUU 100 ND ;
   3697     VARIABLE AA 100 ND ;
   3698     VARIABLE BB 100 ND ;
   3699     VARIABLE GG 100 ND ;
   3700     VARIABLE RR 100 ND ;
   3701     VARIABLE MU 2 ;
   3702     VARIABLE A 2 ;
   3703     VARIABLE B 2 ;
   3704     VARIABLE D 2 ;
   3705     VARIABLE PHI 1 TWOND ;
   3706     VARIABLE R 1 TWOND ;
   3707     VARIABLE M1 2*NM1 NV ;
   3708     VARIABLE M2 2*NM1 NV ;
   3709     VARIABLE M3 2*NM1 NV ;
   3710     VARIABLE I 2 ;
   3711     IMUNIT I ;
   3712     NOM := NOC ;
   3713     DSET 1E-14 ; %DSET:  648
   3714     LWNDANF := 0 ;
   3715     FM M  XF MN IER ; %FM: 1801
   3716     BM MN MN M1 IER ; %BM: 3557
   3717     IF IMA#0 ;
   3718       LOOP J 1 TWOND ;
   3719         MA(J) := -XF(J) + DD(J) ;
   3720         ENDLOOP ;
   3721       POLVAL 1 M1 TWOND MA TWOND MA TWOND ;
   3722       ENDIF ;
   3723     GT MN F MUU AA BB GG RR ; %GT: 3588
   3724     LOOP J 1 ND ;
   3725       K:= 2*J-1 ;
   3726       L := K + 1 ;
   3727       MU := CONS(MUU(J))*2*PI ;
   3728       A := CONS(AA(J)) ;
   3729       B := CONS(BB(J)) ;
   3730       D := CONS(RR(J)) ;
   3731       IF TYPE(MU)=TYPE(1) ;
   3732         PHI(K) := MU ;
   3733         PHI(L) := -MU ;
   3734         R(K) := D ;
   3735         R(L) := D ;
   3736         M2(K) :=  (     I*B       *DD(K) +    I*B  *DD(L) )/SQRT(2*I*B
                  ) ;
   3737         M2(L) :=  ( (-1-I*A)      *DD(K) + (1-I*A) *DD(L) )/SQRT(2*I*B
                  ) ;
   3738         M1(K) :=  ( ( 1-I*A)/2/I/B*DD(K) -      1/2*DD(L) )*SQRT(2*I*B
                  ) ;
   3739         M1(L) :=  ( ( 1+I*A)/2/I/B*DD(K) +      1/2*DD(L) )*SQRT(2*I*B
                  ) ;
   3740         ELSEIF TRUE ;
   3741         PHI(K) := 0 ;
   3742         PHI(L) := 0 ;
   3743         MU := IMAG(MU) ;
   3744         IF IMAG(D)#0 ;
   3745           WRITE 6 '$$$ ERROR DANF ' ;
   3746           ENDIF ;
   3747         D := REAL(D) ;
   3748         R(K) := D*EXP(-MU) ;
   3749         R(L) := D*EXP(MU) ;
   3750         M2(K) := DD(K)+0*I ;
   3751         M2(L) := DD(L)+0*I ;
   3752         M1(K) := DD(K)+0*I ;
   3753         M1(L) := DD(L)+0*I ;
   3754         ENDIF ;
   3755       ENDLOOP ;
   3756     ANM MN M2 MN ; %ANM: 1508
   3757     CPOLVAL 1 M1 TWOND MN TWOND MN TWOND ; %CPOLVAL:  500
   3758     IF IMA#0 ;
   3759       CPOLVAL 0 M1 TWOND MA TWOND MA TWOND ; %CPOLVAL:  500
   3760       ENDIF ;
   3761     NOM := NOC ;
   3762     RS := 0 ;
   3763     LOOP J 2 NOM ;
   3764       LOOP K 1 TWOND ;
   3765         CO J ; %CO:  910
   3766         CDNFDA MN(K) R PHI K TWOND EPS T ;
   3767         M3(K) := -T ;
   3768         CO NOM ; %CO:  910
   3769         IF (K/2)=NINT(K/2) ;
   3770           RS := RS + T*DD(K-1) ;
   3771           ENDIF ;
   3772         ENDLOOP ;
   3773       LOOP K 1 TWOND ;
   3774         CDFLO M3 DD(K)+0*I T TWOND ;
   3775         M1(K) := T ;
   3776         ENDLOOP ;
   3777       LOOP K 1 TWOND ;
   3778         M3(K) := -M3(K) ;
   3779         ENDLOOP ;
   3780       LOOP K 1 TWOND ;
   3781         CDFLO M3 DD(K)+0*I T TWOND ;
   3782         M2(K) := T ;
   3783         ENDLOOP ;
   3784       LOOP K TWOND+1 NV ;
   3785         M1(K) := DD(K)+0*M1(1) ;
   3786         M2(K) := DD(K) ;
   3787         ENDLOOP ;
   3788       CPOLVAL 1 MN TWOND M1 NV M3 TWOND ; %CPOLVAL:  500
   3789       LOOP K TWOND+1 NV ;
   3790         M3(K) := M1(K) ;
   3791         ENDLOOP ;
   3792       CPOLVAL 1 M2 TWOND M3 NV MN TWOND ; %CPOLVAL:  500
   3793       IF IMA#0 ;
   3794         LOOP K 1 TWOND ;
   3795           M3(K) := MA(K) ;
   3796           ENDLOOP ;
   3797         LOOP K TWOND+1 NV ;
   3798           M3(K) := DD(K)+0*M3(1) ;
   3799           ENDLOOP ;
   3800         CPOLVAL 1 M2 TWOND M3 NV MA TWOND ; %CPOLVAL:  500
   3801         ENDIF ;
   3802       ENDLOOP ;
   3803     LOOP J 1 ND ;
   3804       K:= 2*J-1 ;
   3805       L := K + 1 ;
   3806       IF PHI(K)#0 ;
   3807         M1(K) := (  DD(K) - I*DD(L))/SQRT(2*I) ;
   3808         M1(L) := (  DD(K) + I*DD(L))/SQRT(2*I) ;
   3809         M2(K) := (  DD(K) +   DD(L))*SQRT(I/2) ;
   3810         M2(L) := (I*DD(K) - I*DD(L))*SQRT(I/2) ;
   3811         ELSEIF TRUE ;
   3812         M1(K) := DD(K)+0*I ;
   3813         M1(L) := DD(L)+0*I ;
   3814         M2(K) := DD(K)+0*I ;
   3815         M2(L) := DD(L)+0*I ;
   3816         ENDIF ;
   3817       ENDLOOP ;
   3818     LOOP K TWOND+1 NV ;
   3819       M1(K) := DD(K)+0*M1(1) ;
   3820       ENDLOOP ;
   3821     CPOLVAL 1 MN TWOND M1 NV M3 TWOND ; %CPOLVAL:  500
   3822     LOOP K TWOND+1 NV ;
   3823       M3(K) := M1(K) ;
   3824       ENDLOOP ;
   3825     CPOLVAL 1 M2 TWOND M3 NV MN TWOND ; %CPOLVAL:  500
   3826     IF IMA#0 ;
   3827       CPOLVAL 1 M2 TWOND MA TWOND MA TWOND ; %CPOLVAL:  500
   3828       LOOP K 1 TWOND ;
   3829         MA(K) := REAL(MA(K)) ;
   3830         ENDLOOP ;
   3831       ENDIF ;
   3832     LOOP K 1 TWOND ;
   3833       IF ABS(IMAG(MN(K)))>1E-6 ;
   3834         LWNDANF := LWNDANF+1;
   3835         ENDIF ;
   3836       MN(K) := REAL(MN(K)) ;
   3837       ENDLOOP ;
   3838     DSET 1E-16 ; %DSET:  648
   3839     ENDPROCEDURE ;
   3840   PROCEDURE NF EPS MA ;
   3841     VARIABLE MN 2*NM1 NV ;
   3842     VARIABLE RES 2*NM1 ;
   3843     DANF MAP MN MA 1 RES EPS ; %DANF: 3687
   3844     ENDPROCEDURE ;
   3845   PROCEDURE TS MU ;
   3846     VARIABLE MN 2*NM1 TWOND ;
   3847     VARIABLE MA 2*NM1 TWOND ;
   3848     VARIABLE S1 2*NM1 ;
   3849     VARIABLE S2 NM1 ;
   3850     VARIABLE I 1 ;
   3851     VARIABLE J 2 ;
   3852     VARIABLE NOM 1 ;
   3853     LWNTS := 0 ;
   3854     DANF MAP MN MA 1 S1 1E-7 ; %DANF: 3687
   3855     NOM := NOC ;
   3856     LOOP I 1 ND ;
   3857       S1 := REAL(MN(2*I-1)) ;
   3858       LOOP J 2 TWOND 2 ;
   3859         DAPLU S1 J 0 S2 ;
   3860         S1 := S2 ;
   3861         ENDLOOP ;
   3862       IF ABS(S1)=0 ;
   3863         S1 := DA(2*I-1) ;
   3864         ENDIF ;
   3865       S2 := 0 ;
   3866       CO NOC+1 ; %CO:  910
   3867       WHILE (ABS(S2)=0)*(NOC>1) ;
   3868         CO NOC-1 ; %CO:  910
   3869         S1 := S1 ;
   3870         DADIU 2*I-1 S1 S2 ;
   3871         ENDWHILE ;
   3872       IF NOC<NOM ;
   3873         CO NOM ; %CO:  910
   3874         LWNTS := LWNTS+1 ;
   3875         ENDIF ;
   3876       J := COEF(REAL(MN(2*I-1)),2*I) ; %COEF:  246
   3877       CO NOC-1 ; %CO:  910
   3878       IF J=0 ;
   3879         IF CONS(S2)<0 ;
   3880           S2 := -S2 ;
   3881           MU(I) := PI ;
   3882           ELSEIF TRUE ;
   3883           MU(I) := 0 ;
   3884           ENDIF ;
   3885         IMUNIT J ;
   3886         MU(I) := MU(I) - J*LOG(S2) ;
   3887         ELSEIF TRUE ;
   3888         MU(I) := ACOS(S2) ;
   3889         IF CONS(MU(I))<0 ;
   3890           MU(I) := -MU(I) ;
   3891           ENDIF ;
   3892         IF J<0 ;
   3893           MU(I) := 2*PI-MU(I) ;
   3894           ENDIF ;
   3895         ENDIF ;
   3896       CO NOM ; %CO:  910
   3897       MU(I) := MU(I)/2/PI ;
   3898       ENDLOOP ;
   3899     ENDPROCEDURE ;
   3900   PROCEDURE TP MU ;
   3901     VARIABLE A NM1 3 ;
   3902     VARIABLE B NM1 3 ;
   3903     VARIABLE G NM1 3 ;
   3904     VARIABLE I 1 ;
   3905     VARIABLE R NM1 3 ;
   3906     VARIABLE F NM1 10 ;
   3907     VARIABLE I 1 ;
   3908     VARIABLE K 1 ;
   3909     VARIABLE I1 1 ;
   3910     VARIABLE I2 1 ;
   3911     VARIABLE LC 1 ;
   3912     VARIABLE S NM1 ;
   3913     LC := 0 ;
   3914     LOOP I 1 ND ;
   3915       I2 := 2*I ;
   3916       I1 := I2-1 ;
   3917       LOOP K I2+1 TWOND ;
   3918         IF     ME(I1,K)#0 ; %ME:  461
   3919           LC := 1 ;
   3920           ELSEIF ME(I2,K)#0 ; %ME:  461
   3921           LC := 1 ;
   3922           ELSEIF ME(K,I1)#0 ; %ME:  461
   3923           LC := 1 ;
   3924           ELSEIF ME(K,I2)#0 ; %ME:  461
   3925           LC := 1 ;
   3926           ENDIF ;
   3927         ENDLOOP ;
   3928       ENDLOOP ;
   3929     IF LC=0 ;
   3930       GT MAP F MU A B G R ; %GT: 3588
   3931       ELSEIF LC=1 ;
   3932       TS MU ; %TS: 3845
   3933       LOOP I 1 ND ;
   3934         LOOP K 1 TWOND ;
   3935           DAPLU MU(I) K 0 S ;
   3936           MU(I) := S ;
   3937           ENDLOOP ;
   3938         ENDLOOP ;
   3939       ENDIF ;
   3940     ENDPROCEDURE ;
   3941   PROCEDURE RS RES ;
   3942     VARIABLE MN 2*NM1 TWOND ;
   3943     VARIABLE MA 2*NM1 TWOND ;
   3944     VARIABLE EPS 1 ;
   3945     EPS := 1E-7 ;
   3946     DANF MAP MN MA 1 RES EPS ; %DANF: 3687
   3947     ENDPROCEDURE ;
   3948   PROCEDURE NORMSU2 UI UO CU NBAR STUNE MN MA EPS ;
   3949     VARIABLE U1 2*NM1 2 ;
   3950     VARIABLE U2 2*NM1 2 ;
   3951     VARIABLE UOO 2*NM1 2 ;
   3952     VARIABLE CUU 2*NM1 2 ;
   3953     VARIABLE XX NM1 1 ;
   3954     VARIABLE YY NM1 1 ;
   3955     VARIABLE NBN NM1 3 ;
   3956     VARIABLE MAI NM1 NV ;
   3957     VARIABLE MNN NM1 NV ;
   3958     VARIABLE MAA NM1 NV ;
   3959     VARIABLE M1 4 NV ;
   3960     VARIABLE M2 4 NV ;
   3961     VARIABLE R 1 TWOND ;
   3962     VARIABLE PHI 1 TWOND ;
   3963     VARIABLE U0 2 2 ;
   3964     VARIABLE IU 2 ;
   3965     VARIABLE K 2 ;
   3966     VARIABLE D 1 ;
   3967     VARIABLE I 1 ;
   3968     VARIABLE L 2 ;
   3969     PROCEDURE IDENSU2 A ;
   3970       VARIABLE IU 2 ;
   3971       IMUNIT IU ;
   3972       A(1) := 1+IU*0 ;
   3973       A(2) := 0+IU*0 ;
   3974       ENDPROCEDURE ;
   3975     PROCEDURE MULASU2 A B C ;
   3976       A(1) := B(1)*C(1)-B(2)*CONJ(C(2)) ;
   3977       A(2) := B(1)*C(2)+B(2)*CONJ(C(1)) ;
   3978       ENDPROCEDURE ;
   3979     PROCEDURE INVRSU2 A B ;
   3980       A(1) := CONJ(B(1)) ;
   3981       A(2) := -B(2) ;
   3982       ENDPROCEDURE ;
   3983     PROCEDURE MEXPSU2 A B ;
   3984       VARIABLE C1 2*NM1 2 ;
   3985       VARIABLE C2 2*NM1 2 ;
   3986       VARIABLE I 1 ;
   3987       I := ABS(CONS(REAL(B(1))))+ABS(CONS(REAL(B(2))))+              A
                  BS(CONS(IMAG(B(1))))+ABS(CONS(IMAG(B(2)))) ;
   3988       IF I#0 ;
   3989         WRITE 6 ' *** ERROR in MEXPSU2' ;
   3990         QUIT 0 ;
   3991         ENDIF ;
   3992       IDENSU2 A ; %IDENSU2: 3969
   3993       IDENSU2 C1 ; %IDENSU2: 3969
   3994       LOOP I 1 NOC ;
   3995         MULASU2 C2 C1 B ; %MULASU2: 3975
   3996         C1(1) := (1/I)*C2(1) ;
   3997         C1(2) := (1/I)*C2(2) ;
   3998         A(1) := A(1)+C1(1) ;
   3999         A(2) := A(2)+C1(2) ;
   4000         ENDLOOP ;
   4001       ENDPROCEDURE ;
   4002     PROCEDURE EHOMSU2 A B J ;
   4003       VARIABLE C 2*NM1 2 ;
   4004       VARIABLE K 1 ;
   4005       K := NOC ;
   4006       CO J ; %CO:  910
   4007       A(1) := B(1) ;
   4008       A(2) := B(2) ;
   4009       CO J-1 ; %CO:  910
   4010       C(1) := B(1) ;
   4011       C(2) := B(2) ;
   4012       CO K ; %CO:  910
   4013       A(1) := A(1)-C(1) ;
   4014       A(2) := A(2)-C(2) ;
   4015       ENDPROCEDURE ;
   4016     PROCEDURE CORRSU2 A ;
   4017       VARIABLE D NM1 ;
   4018       D := SQR(REAL(A(1)))+SQR(REAL(A(2)))+SQR(IMAG(A(1)))+SQR(IMAG(A(
                  2))) ;
   4019       D := ISRT(D) ;
   4020       A(1) := D*A(1) ;
   4021       A(2) := D*A(2) ;
   4022       ENDPROCEDURE ;
   4023     PROCEDURE SOLVSU2 U1 U2 D PHI R M1 M2 EPS ;
   4024       VARIABLE YY 2*NM1 ;
   4025       CPOLVAL 1 U2 2 M2 NV U1 2 ; %CPOLVAL:  500
   4026       CDNFDS U1(1) R PHI 0 2*ND EPS YY ;
   4027       U1(1) := YY ;
   4028       CDNFDS U1(2) R PHI -D 2*ND EPS YY ;
   4029       U1(2) := YY ;
   4030       CPOLVAL 1 U1 2 M1 NV U2 2 ; %CPOLVAL:  500
   4031       U1(1) := U2(1) ;
   4032       U1(2) := U2(2) ;
   4033       ENDPROCEDURE ;
   4034     PROCEDURE ANALMAP MN PHI R M1 M2 ;
   4035       VARIABLE J 1 ;
   4036       VARIABLE K 1 ;
   4037       VARIABLE L 1 ;
   4038       VARIABLE D 1 ;
   4039       VARIABLE A 1 ;
   4040       VARIABLE B 1 ;
   4041       VARIABLE C 1 ;
   4042       VARIABLE IU 2 ;
   4043       IMUNIT IU ;
   4044       LOOP J 1 ND ;
   4045         K := 2*J-1 ;
   4046         L := K+1 ;
   4047         A := COEF(MN(K),K) ; %COEF:  246
   4048         B := COEF(MN(K),L) ; %COEF:  246
   4049         C := COEF(MN(L),K) ; %COEF:  246
   4050         D := COEF(MN(L),L) ; %COEF:  246
   4051         IF 1+B*B+C*C#1 ;
   4052           R(K) := SQRT(A*A+B*B) ;
   4053           R(L) := R(K) ;
   4054           PHI(K) := ACOS(A/R(K))*(B/ABS(B)) ;
   4055           PHI(L) := -PHI(K) ;
   4056           ELSEIF TRUE ;
   4057           PHI(K) := 0 ;
   4058           PHI(L) := 0 ;
   4059           R(K)   := A ;
   4060           R(L)   := D ;
   4061           ENDIF ;
   4062         IF PHI(K)#0 ;
   4063           M1(K) := (DD(K)-IU*DD(L)) ;
   4064           M1(L) := (DD(K)+IU*DD(L)) ;
   4065           M2(K) := (DD(K)+DD(L))/2+0*IU ;
   4066           M2(L) := (IU*DD(K)-IU*DD(L))/2 ;
   4067           ELSEIF TRUE ;
   4068           M1(K) := DD(K)+0*IU ;
   4069           M1(L) := DD(L)+0*IU ;
   4070           M2(K) := DD(K)+0*IU ;
   4071           M2(L) := DD(L)+0*IU ;
   4072           ENDIF ;
   4073         ENDLOOP ;
   4074       LOOP J TWOND+1 NV ;
   4075         M1(J) := DD(J)+0*IU ;
   4076         M2(J) := DD(J)+0*IU ;
   4077         ENDLOOP ;
   4078       ENDPROCEDURE ;
   4079     PROCEDURE MAPINVR M1 M2 ;
   4080       VARIABLE J 1 ;
   4081       MI M1 M2 NV J NOC NV NM1 ; %MI:  375
   4082       IF J#0 ;
   4083         WRITE 6 ' *** ERROR in MAPINVR' ;
   4084         QUIT 0 ;
   4085         ENDIF ;
   4086       ENDPROCEDURE ;
   4087     IMUNIT IU ;
   4088     ANALMAP MN PHI R M1 M2 ; %ANALMAP: 4034
   4089     LOOP I 1 TWOND ;
   4090       MNN(I) := MN(I) ;
   4091       MAA(I) := MA(I) ;
   4092       ENDLOOP ;
   4093     LOOP I TWOND+1 NV ;
   4094       MNN(I) := DD(I)+0*MNN(1) ;
   4095       MAA(I) := DD(I)+0*MAA(1) ;
   4096       ENDLOOP ;
   4097     MAPINVR MAA MAI ; %MAPINVR: 4079
   4098     U1(1) := UI(1) ;
   4099     U1(2) := UI(2) ;
   4100     CPOLVAL 1 U1 2 MAI NV UOO 2 ; %CPOLVAL:  500
   4101     CORRSU2 UOO ; %CORRSU2: 4016
   4102     U0(1) := CONS(UOO(1)) ;
   4103     U0(2) := CONS(UOO(2)) ;
   4104     D := SQR(REAL(U0(2))) + SQR(IMAG(U0(2))) ;
   4105     IF CONS(D)>0 ;
   4106       D := SQRT(D) ;
   4107       ENDIF ;
   4108     IF 1+ABS(D)=1 ;
   4109       L := U0(1) ;
   4110       IDENSU2 CUU ; %IDENSU2: 3969
   4111       ELSEIF TRUE ;
   4112       D := REAL(U0(1)) ;
   4113       L := D+IU*SQRT(1-SQR(D)) ;
   4114       K := U0(2)/(U0(1)-L) ;
   4115       D := ISRT(1+SQR(REAL(K))+SQR(IMAG(K))) ;
   4116       CUU(1) := K*D ;
   4117       CUU(2) := D+0*IU ;
   4118       ENDIF ;
   4119     D := ISRT(SQR(REAL(L))+SQR(IMAG(L))) ;
   4120     L := D*L ;
   4121     MULASU2 U1 UOO CUU ; %MULASU2: 3975
   4122     INVRSU2 U2 CUU ; %INVRSU2: 3979
   4123     MULASU2 UOO U2 U1 ; %MULASU2: 3975
   4124     UOO(1) := UOO(1)-CONS(UOO(1))+L ;
   4125     UOO(2) := UOO(2)-CONS(UOO(2)) ;
   4126     D := ACOS(REAL(L)) ;
   4127     IF IMAG(L)<0 ;
   4128       D := -D ;
   4129       ENDIF ;
   4130     K := -COS(D)+IU*SIN(D) ;
   4131     D := 2*D ;
   4132     IF D<0 ;
   4133       D := D + 2 * PI ;
   4134       ENDIF ;
   4135     LOOP I 1 NOC ;
   4136       EHOMSU2 U1 UOO I ; %EHOMSU2: 4002
   4137       U2(1) := K*U1(1) ;
   4138       U2(2) := K*U1(2) ;
   4139       SOLVSU2 U1 U2 D PHI R M1 M2 EPS ; %SOLVSU2: 4023
   4140       MEXPSU2 U2 U1 ; %MEXPSU2: 3983
   4141       MULASU2 U1 CUU U2 ; %MULASU2: 3975
   4142       CUU(1) := U1(1) ;
   4143       CUU(2) := U1(2) ;
   4144       MULASU2 U1 UOO U2 ; %MULASU2: 3975
   4145       INVRSU2 UOO U2 ; %INVRSU2: 3979
   4146       CPOLVAL 1 UOO 2 MNN NV U2 2 ; %CPOLVAL:  500
   4147       MULASU2 UOO U2 U1 ; %MULASU2: 3975
   4148       ENDLOOP ;
   4149     D := SQR(ABS(REAL(UOO(2)))+ABS(IMAG(UOO(2)))) ;
   4150     IF 1+D=1 ;
   4151       STUNE := 2*ACOS(REAL(UOO(1))) ;
   4152       NBN(1) := -2*(REAL(CUU(1))*REAL(CUU(2)) - IMAG(CUU(1))*IMAG(CUU(
                  2))) ;
   4153       NBN(2) := -2*(REAL(CUU(1))*IMAG(CUU(2)) + REAL(CUU(2))*IMAG(CUU(
                  1))) ;
   4154       NBN(3) := SQR(REAL(CUU(1)))+SQR(IMAG(CUU(1)))-                  
                   SQR(REAL(CUU(2)))-SQR(IMAG(CUU(2))) ;
   4155       POLVAL 1 NBN 3 MAA NV NBAR 3 ;
   4156       IF CONS(IMAG(UOO(1)))<0 ;
   4157         NBN(1) := -NBN(1) ;
   4158         NBN(2) := -NBN(2) ;
   4159         NBN(3) := -NBN(3) ;
   4160         ENDIF ;
   4161       XX(1) := STUNE ;
   4162       POLVAL 1 XX 1 MNN NV YY 1 ;
   4163       D := ABS(STUNE - YY(1)) ;
   4164       IF 1+D*D#1 ;
   4165         WRITE 6            ' --- WARNING in NORMSU2, spin tune is not 
                  an orbital invariant' ;
   4166         ENDIF ;
   4167       POLVAL 1 XX 1 MAA NV YY 1 ;
   4168       STUNE := YY(1) ;
   4169       ELSEIF TRUE ;
   4170       WRITE 6 (' --- WARNING in NORMSU2, spin-orbit resonance. '&     
                      'NBAR and STUNE undefined') ;
   4171       NBAR(1) := 0*DD(1) ;
   4172       NBAR(2) := 0*DD(1) ;
   4173       NBAR(3) := 0*DD(1) ;
   4174       STUNE := 0*DD(1) ;
   4175       ENDIF ;
   4176     INVRSU2 U1 CUU ; %INVRSU2: 3979
   4177     CPOLVAL 1 U1 2 MAA NV CUU 2 ; %CPOLVAL:  500
   4178     CU(1) := REAL(CUU(1)) ;
   4179     CU(2) := IMAG(CUU(1)) ;
   4180     CU(3) := REAL(CUU(2)) ;
   4181     CU(4) := IMAG(CUU(2)) ;
   4182     UO(1) := REAL(UOO(1)) ;
   4183     UO(2) := IMAG(UOO(1)) ;
   4184     UO(3) := REAL(UOO(2)) ;
   4185     UO(4) := IMAG(UOO(2)) ;
   4186     ENDPROCEDURE ;
   4187   PROCEDURE SO3_IN_SU2 A B KEY ;
   4188     VARIABLE X 2*NM1 ;
   4189     VARIABLE D 1 ;
   4190     VARIABLE Y 2*NM1 ;
   4191     VARIABLE C 1 ;
   4192     VARIABLE I 2 ;
   4193     VARIABLE F 1 ;
   4194     FUNCTION COMSQRT X ;
   4195       VARIABLE A NM1 ;
   4196       VARIABLE B NM1 ;
   4197       VARIABLE I 2 ;
   4198       A := SQRT(SQR(REAL(X)) + SQR(IMAG(X))) ;
   4199       IF ABS(CONS(REAL(X)))<ABS(CONS(IMAG(X))) ;
   4200         B := 0.5 * ACOS(REAL(X) / A) ;
   4201         IF CONS(IMAG(X))<0 ;
   4202           B := -B ;
   4203           ENDIF ;
   4204         ELSEIF TRUE ;
   4205         B := 0.5 * ASIN(IMAG(X) / A) ;
   4206         IF CONS(REAL(X))<0 ;
   4207           B := 0.5*PI-B ;
   4208           ENDIF ;
   4209         ENDIF ;
   4210       IMUNIT I ;
   4211       COMSQRT := SQRT(A)*(COS(B)+I*SIN(B)) ;
   4212       ENDFUNCTION ;
   4213     IMUNIT I ;
   4214     X := 0.5 * (A(1,1) + A(2,2) + I * (A(2,1) - A(1, 2))) ;
   4215     Y := 0.5 * (A(2,2) - A(1,1) - I * (A(2,1) + A(1, 2))) ;
   4216     C := SQR(CONS(REAL(X))) + SQR(CONS(IMAG(X))) ;
   4217     D := SQR(CONS(REAL(Y))) + SQR(CONS(IMAG(Y))) ;
   4218     IF KEY=0 ;
   4219       F :=  1 ;
   4220       ELSEIF TRUE ;
   4221       F := -1 ;
   4222       ENDIF ;
   4223     IF 1+C*C+D*D=1 ;
   4224       WRITE 6 ' *** ERROR in SO3_IN_SU2' ;
   4225       QUIT 0 ;
   4226       ELSEIF C>D ;
   4227       B(1) := F*COMSQRT(X) ; %COMSQRT: 4194
   4228       B(2) := -0.5*(A(1,3)+I*A(2,3))/B(1) ;
   4229       ELSEIF TRUE ;
   4230       B(2) := F*COMSQRT(Y) ; %COMSQRT: 4194
   4231       B(1) := -0.5*(A(1,3)+I*A(2,3))/B(2) ;
   4232       ENDIF ;
   4233     ENDPROCEDURE ;
   4234   PROCEDURE TSS ST NBAR KEY ;
   4235     VARIABLE MN 2*NM1 TWOND ;
   4236     VARIABLE MA 2*NM1 TWOND ;
   4237     VARIABLE S1 2*NM1 ;
   4238     VARIABLE UO NM1 4 ;
   4239     VARIABLE CU NM1 4 ;
   4240     VARIABLE I 1 ;
   4241     VARIABLE EPS 1 ;
   4242     VARIABLE US 2*NM1 2 ;
   4243     VARIABLE XF NM1 NV ;
   4244     VARIABLE MF NM1 NV ;
   4245     EPS := 1E-7 ;
   4246     DANF MAP MN MA 1 S1 EPS ; %DANF: 3687
   4247     EPS := 0 ;
   4248     LOOP I 1 TWOND ;
   4249       EPS := EPS+ABS(IMAG(MN(I)))+ABS(IMAG(MA(I))) ;
   4250       ENDLOOP ;
   4251     IF EPS=0 ;
   4252       EPS := 1E-7 ;
   4253       SO3_IN_SU2 SPNR US 0 ; %SO3_IN_SU2: 4187
   4254       NORMSU2 US UO CU NBAR ST MN MA EPS ; %NORMSU2: 3948
   4255       IF KEY#0 ;
   4256         FM MAP XF MF I ; %FM: 1801
   4257         IF I#0 ;
   4258           WRITE 6               ' *** ERROR in TSS, orbital map has no
                   fixed point' ;
   4259           QUIT 0 ;
   4260           ENDIF ;
   4261         LOOP I 1 TWOND ;
   4262           XF(I) := DD(I)+XF(I) ;
   4263           ENDLOOP ;
   4264         LOOP I TWOND+1 NV ;
   4265           XF(I) := DD(I) ;
   4266           ENDLOOP ;
   4267         CU(1) := ST ;
   4268         CU(2) := NBAR(1) ;
   4269         CU(3) := NBAR(2) ;
   4270         CU(4) := NBAR(3) ;
   4271         POLVAL 1 CU 4 XF NV UO 4 ;
   4272         ST := UO(1) ;
   4273         NBAR(1) := UO(2) ;
   4274         NBAR(2) := UO(3) ;
   4275         NBAR(3) := UO(4) ;
   4276         ENDIF ;
   4277       ELSEIF TRUE ;
   4278       WRITE 6 ' --- WARNING in TSS, orbital normal form is not real' ;

   4279       ST := 0*DD(1) ;
   4280       NBAR(1) := 0*DD(1) ;
   4281       NBAR(2) := 0*DD(1) ;
   4282       NBAR(3) := 0*DD(1) ;
   4283       ENDIF ;
   4284     ST := ST/PI/2 ;
   4285     ENDPROCEDURE ;
   4286   PROCEDURE TSP ST NBAR KEY ;
   4287     VARIABLE B 2*NM1 2 ;
   4288     VARIABLE BF 2*NM1 2 ;
   4289     VARIABLE IU  2 ;
   4290     VARIABLE U1 2*NMON(NOC,NP+1) 2 ; %NMON:  562
   4291     VARIABLE CU  2*NMON(NOC,NP+1) 2 ; %NMON:  562
   4292     VARIABLE K 2*NMON(NOC,NP+1) ; %NMON:  562
   4293     VARIABLE L 2*NMON(NOC,NP+1) ; %NMON:  562
   4294     VARIABLE D NMON(NOC,NP+1) ; %NMON:  562
   4295     VARIABLE TPI 1 ;
   4296     VARIABLE I 1 ;
   4297     VARIABLE J 1 ;
   4298     VARIABLE A1 NMON(NOC,NP+1) 3 3 ; %NMON:  562
   4299     VARIABLE A2 NMON(NOC,NP+1) 3 3 ; %NMON:  562
   4300     VARIABLE XF NMON(NOC,NP+1) NV ; %NMON:  562
   4301     VARIABLE MF NM1 NV ;
   4302     VARIABLE N1 NM1 3 ;
   4303     VARIABLE T1 NM1 ;
   4304     FUNCTION PARASU2 B ;
   4305       VARIABLE D NM1 ;
   4306       VARIABLE C NM1 ;
   4307       VARIABLE I 1 ;
   4308       D := B ;
   4309       LOOP I 1 TWOND ;
   4310         DAPLU D I 0.0 C ;
   4311         D := C ;
   4312         ENDLOOP ;
   4313       PARASU2 := D ;
   4314       ENDFUNCTION ;
   4315     PROCEDURE CPARSU2 B ;
   4316       VARIABLE D NMON(NOC,NP+1) ; %NMON:  562
   4317       D := SQR(REAL(B(1)))+SQR(REAL(B(2)))+SQR(IMAG(B(1)))+SQR(IMAG(B(
                  2))) ;
   4318       D := ISRT(D) ;
   4319       B(1) := D*B(1) ;
   4320       B(2) := D*B(2) ;
   4321       ENDPROCEDURE ;
   4322     IF KEY=0 ;
   4323       TSS T1 N1 0 ; %TSS: 4234
   4324       ST := PARASU2(T1) ; %PARASU2: 4304
   4325       NBAR(1) := PARASU2(N1(1)) ; %PARASU2: 4304
   4326       NBAR(2) := PARASU2(N1(2)) ; %PARASU2: 4304
   4327       NBAR(3) := PARASU2(N1(3)) ; %PARASU2: 4304
   4328       ELSEIF TRUE ;
   4329       FM MAP XF MF J ; %FM: 1801
   4330       IF J#0 ;
   4331         WRITE 6 ' *** ERROR in TSP, orbital map has no fixed point' ;
   4332         QUIT 0 ;
   4333         ENDIF ;
   4334       LOOP I 1 TWOND ;
   4335         XF(I) := DD(I)+XF(I) ;
   4336         ENDLOOP ;
   4337       LOOP I TWOND+1 NV ;
   4338         XF(I) := DD(I) ;
   4339         ENDLOOP ;
   4340       SO3_IN_SU2 SPNR BF 0 ; %SO3_IN_SU2: 4187
   4341       CPOLVAL 1 BF 2 XF NV B 2 ; %CPOLVAL:  500
   4342       IMUNIT IU ;
   4343       U1(1) := PARASU2(REAL(B(1))) + IU*PARASU2(IMAG(B(1))) ; %PARASU2
                  : 4304 %PARASU2: 4304
   4344       U1(2) := PARASU2(REAL(B(2))) + IU*PARASU2(IMAG(B(2))) ; %PARASU2
                  : 4304 %PARASU2: 4304
   4345       CPARSU2 U1 ; %CPARSU2: 4315
   4346       D := SQR(REAL(U1(2))) + SQR(IMAG(U1(2))) ;
   4347       IF CONS(D)>0 ;
   4348         D := SQRT(D) ;
   4349         ENDIF ;
   4350       IF 1+ABS(D)=1 ;
   4351         L := U1(1) ;
   4352         CU(1) := 1+IU*0 ;
   4353         CU(2) := 0+IU*0 ;
   4354         ELSEIF 1+ABS(ABS(CONS(REAL(U1(1))))-1)=1 ;
   4355         WRITE 6 ' *** ERROR in TSP, multiple eigenvalues. Try to use T
                  SS' ;
   4356         QUIT 0 ;
   4357         ELSEIF TRUE ;
   4358         D := REAL(U1(1)) ;
   4359         L := D+IU*SQRT(1-SQR(D)) ;
   4360         K := U1(2)/(U1(1)-L) ;
   4361         D := ISRT(1+SQR(REAL(K))+SQR(IMAG(K))) ;
   4362         CU(1) := K*D ;
   4363         CU(2) := D+0*IU ;
   4364         ENDIF ;
   4365       D := ISRT(SQR(REAL(L))+SQR(IMAG(L))) ;
   4366       L := D*L ;
   4367       ST := 2*ACOS(REAL(L)) ;
   4368       NBAR(1) := -2*(REAL(CU(1))*REAL(CU(2))-IMAG(CU(1))*IMAG(CU(2))) 
                  ;
   4369       NBAR(2) := -2*(REAL(CU(1))*IMAG(CU(2))+REAL(CU(2))*IMAG(CU(1))) 
                  ;
   4370       NBAR(3) := SQR(REAL(CU(1)))+SQR(IMAG(CU(1)))-                   
                   SQR(REAL(CU(2)))-SQR(IMAG(CU(2))) ;
   4371       IF CONS(IMAG(L))<0 ;
   4372         NBAR(1) := -NBAR(1) ;
   4373         NBAR(2) := -NBAR(2) ;
   4374         NBAR(3) := -NBAR(3) ;
   4375         ENDIF ;
   4376       ST := ST/PI/2 ;
   4377       ENDIF ;
   4378     ENDPROCEDURE ;
   4379   PROCEDURE RCT X ;
   4380     VARIABLE I 1 ;
   4381     VARIABLE RCE 1 TWOND ;
   4382     VARIABLE TMP NM1 TWOND ;
   4383     LOOP I 1 ND ;
   4384       TMP(I) := X(2*I-1) ;
   4385       TMP(ND+I) := X(2*I) ;
   4386       ENDLOOP ;
   4387     LOOP I 1 ND ;
   4388       RCE(2*I-1) := DA(I) ;
   4389       RCE(2*I) := DA(ND+I) ;
   4390       ENDLOOP ;
   4391     POLVAL 2 TMP TWOND RCE TWOND X TWOND ;
   4392     ENDPROCEDURE ;
   4393   PROCEDURE RET X ;
   4394     VARIABLE I 1 ;
   4395     VARIABLE REC 1 TWOND ;
   4396     VARIABLE TMP NM1 TWOND ;
   4397     LOOP I 1 ND ;
   4398       TMP(2*I-1) := X(I) ;
   4399       TMP(2*I) := X(ND+I) ;
   4400       ENDLOOP ;
   4401     LOOP I 1 ND ;
   4402       REC(I) := DA(2*I-1) ;
   4403       REC(ND+I) := DA(2*I) ;
   4404       ENDLOOP ;
   4405     POLVAL 2 TMP TWOND REC TWOND X TWOND ;
   4406     ENDPROCEDURE ;
   4407   PROCEDURE RETF F ;
   4408     VARIABLE I 1 ;
   4409     VARIABLE REC 1 TWOND ;
   4410     VARIABLE X NM1 1 ;
   4411     LOOP I 1 ND ;
   4412       REC(I) := DA(2*I-1) ;
   4413       REC(ND+I) := DA(2*I) ;
   4414       ENDLOOP ;
   4415     X(1) := F ;
   4416     POLVAL 2 X 1 REC TWOND X 1 ;
   4417     F := X(1) ;
   4418     ENDPROCEDURE ;
   4419   PROCEDURE CGF TY MAP CL F NG ;
   4420     VARIABLE SC1 MAX(100,2*NM1) TWOND ; %MAX:  171
   4421     VARIABLE SC2 MAX(100,2*NM1) TWOND ; %MAX:  171
   4422     VARIABLE SC3 2*NM1 TWOND ;
   4423     VARIABLE I 1 ;
   4424     VARIABLE J 1 ;
   4425     VARIABLE IER 1 ;
   4426     VARIABLE AL TWOND TWOND ;
   4427     VARIABLE BL TWOND TWOND ;
   4428     VARIABLE DL TWOND TWOND ;
   4429     VARIABLE NOM 1 ;
   4430     VARIABLE DUM NM1 ;
   4431     VARIABLE M NM1 TWOND ;
   4432     VARIABLE ML NV TWOND ;
   4433     VARIABLE MLI NV TWOND ;
   4434     PROCEDURE SETTYPE ;
   4435       VARIABLE SSL TWOND TWOND ;
   4436       VARIABLE J2N TWOND TWOND ;
   4437       PROCEDURE SETS ;
   4438         VARIABLE SS 1 TWOND TWOND ;
   4439         PROCEDURE CONVS ;
   4440           LOOP I 1 ND ;
   4441             CL(I) := 0*DA(1) ;
   4442             DL(ND+I) := CL(I) ;
   4443             ENDLOOP ;
   4444           IF     TY=1 ;
   4445             LOOP I 1 ND ;
   4446               CL(ND+I) := DA(I) ;
   4447               DL(I) := DA(I) ;
   4448               ENDLOOP ;
   4449             ELSEIF TY=2 ;
   4450             LOOP I 1 ND ;
   4451               CL(ND+I) := DA(ND+I) ;
   4452               DL(I) := DA(I) ;
   4453               ENDLOOP ;
   4454             ELSEIF TY=3 ;
   4455             LOOP I 1 ND ;
   4456               CL(ND+I) := DA(I) ;
   4457               DL(I) := DA(ND+I) ;
   4458               ENDLOOP ;
   4459             ELSEIF TY=4 ;
   4460             LOOP I 1 ND ;
   4461               CL(ND+I) := DA(ND+I) ;
   4462               DL(I) := DA(ND+I) ;
   4463               ENDLOOP ;
   4464             ENDIF ;
   4465           POLVAL 2 CL TWOND ML TWOND SC1 TWOND ;
   4466           LOOP I 1 TWOND ;
   4467             SC1(I) := SC1(I)+DL(I) ;
   4468             ENDLOOP ;
   4469           MI SC1 SC2 TWOND IER NOC NV NM1 ; %MI:  375
   4470           IF IER#0 ;
   4471             WRITE 6 '*** ERROR in TR, no gen. fct.' ;
   4472             QUIT 0 ;
   4473             ENDIF ;
   4474           POLVAL 2 CL TWOND ML TWOND SC1 TWOND ;
   4475           LOOP I 1 TWOND ;
   4476             SC1(I) := SC1(I)-DL(I) ;
   4477             ENDLOOP ;
   4478           POLVAL 2 SC2 TWOND SC1 TWOND SC2 TWOND ;
   4479           POLVAL 2 J2N TWOND SC2 TWOND SC2 TWOND ;
   4480           LOOP I 1 TWOND ;
   4481             SC2(I) := -SC2(I) ;
   4482             ENDLOOP ;
   4483           LOOP I 1 TWOND ;
   4484             LOOP J 1 TWOND ;
   4485               SS(I,J) := CONS(DER(J,SC2(I))) ; %DER:  252
   4486               ENDLOOP ;
   4487             ENDLOOP ;
   4488           ENDPROCEDURE ;
   4489         IF TY=0 ;
   4490           LOOP I 1 TWOND ;
   4491             LOOP J 1 TWOND ;
   4492               SS(I,J) := 0 ;
   4493               ENDLOOP ;
   4494             ENDLOOP ;
   4495           ELSEIF (0<TY)*(TY<5) ;
   4496           CONVS ; %CONVS: 4439
   4497           ELSEIF TRUE;
   4498           WRITE 6 ' *** ERROR in TR, invalid typ' ;
   4499           QUIT 0 ;
   4500           ENDIF ;
   4501         LOOP I 1 TWOND ;
   4502           LOOP J 1 TWOND ;
   4503             SSL(I) := SSL(I) + DA(J)*SS(I,J) ;
   4504             ENDLOOP ;
   4505           ENDLOOP ;
   4506         ENDPROCEDURE ;
   4507       LOOP I 1 ND ;
   4508         J2N(I) := DA(ND+I) ;
   4509         J2N(ND+I) := -DA(I) ;
   4510         ENDLOOP ;
   4511       SETS ; %SETS: 4437
   4512       LOOP I 1 TWOND ;
   4513         AL(I) := -J2N(I) ;
   4514         BL(I) := J2N(I) ;
   4515         ENDLOOP ;
   4516       POLVAL 2 J2N TWOND SSL TWOND SC1 TWOND ;
   4517       LOOP I 1 TWOND ;
   4518         CL(I) := (DA(I)+SC1(I))/2 ;
   4519         DL(I) := (DA(I)-SC1(I))/2 ;
   4520         ENDLOOP ;
   4521       POLVAL 2 AL TWOND MLI TWOND AL TWOND ;
   4522       POLVAL 2 CL TWOND MLI TWOND CL TWOND ;
   4523       ENDPROCEDURE ;
   4524     LOOP I 1 TWOND ;
   4525       M(I) := MAP(I) ;
   4526       ENDLOOP ;
   4527     RCT M ; %RCT: 4379
   4528     NOM := NOC ;
   4529     CO 1 ; %CO:  910
   4530     LOOP I 1 TWOND ;
   4531       ML(I) := M(I) ;
   4532       ENDLOOP ;
   4533     MI ML MLI TWOND IER NOC NV NM1 ; %MI:  375
   4534     CO NOM ; %CO:  910
   4535     IF IER#0 ;
   4536       WRITE 6 ' *** ERROR in TR, no inverse' ;
   4537       QUIT 0 ;
   4538       ENDIF ;
   4539     SETTYPE ; %SETTYPE: 4434
   4540     POLVAL 2 AL TWOND M TWOND SC1 TWOND ;
   4541     LOOP I 1 TWOND ;
   4542       SC1(I) := SC1(I) + BL(I) ;
   4543       ENDLOOP ;
   4544     POLVAL 2 CL TWOND M TWOND SC2 TWOND ;
   4545     LOOP I 1 TWOND ;
   4546       SC2(I) := SC2(I) + DL(I) ;
   4547       ENDLOOP ;
   4548     MI SC2 SC3 TWOND IER NOC NV NM1 ; %MI:  375
   4549     IF IER#0 ;
   4550       WRITE 6 '*** ERROR in TR, no gen. fct.' ;
   4551       QUIT 0 ;
   4552       ENDIF ;
   4553     POLVAL 2 SC1 TWOND SC3 TWOND SC1 TWOND ;
   4554     CO NOC+1 ; %CO:  910
   4555     POTI SC1 TWOND F ; %POTI:  531
   4556     LOOP I 1 TWOND ;
   4557       NG(I) := DER(I,F) ; %DER:  252
   4558       ENDLOOP ;
   4559     RETF F ; %RETF: 4407
   4560     CO NOM ; %CO:  910
   4561     LOOP I 1 ND ;
   4562       DUM := NG(I) ;
   4563       NG(I) := NG(ND+I) ;
   4564       NG(ND+I) := -DUM ;
   4565       ENDLOOP ;
   4566     POLVAL 2 ML TWOND NG TWOND NG TWOND ;
   4567     RET CL ; %RET: 4393
   4568     RET NG ; %RET: 4393
   4569     ENDPROCEDURE ;
   4570   PROCEDURE SYMP0 F G H ;
   4571     VARIABLE I 1 ;
   4572     VARIABLE J 1 ;
   4573     VARIABLE ID 1 ;
   4574     VARIABLE JD 1 ;
   4575     LOOP I 1 TWOND ;
   4576       G(I) := DER(I,F) ; %DER:  252
   4577       ENDLOOP ;
   4578     LOOP ID 1 ND ;
   4579       I := 2*ID-1 ;
   4580       LOOP JD 1 ND ;
   4581         J := 2*JD ;
   4582         H(ID,JD) := DER(J,G(I)) ; %DER:  252
   4583         ENDLOOP ;
   4584       ENDLOOP ;
   4585     ENDPROCEDURE ;
   4586   PROCEDURE SYMP AM AN G H TY IE ;
   4587     VARIABLE A 1 TWOND ;
   4588     VARIABLE GI 1 ND ;
   4589     VARIABLE D 1 ND ;
   4590     VARIABLE ID 1 ;
   4591     VARIABLE JD 1 ;
   4592     VARIABLE I 1 ;
   4593     VARIABLE F 1 ;
   4594     VARIABLE GM NM1 TWOND ;
   4595     VARIABLE GA 1 TWOND ;
   4596     VARIABLE DIF 1 ;
   4597     VARIABLE HM NM1 ND ND ;
   4598     VARIABLE HA 1 ND ND ;
   4599     VARIABLE IER 1 ;
   4600     VARIABLE TRY 1 ;
   4601     VARIABLE SCR NM1 ;
   4602     VARIABLE K 1 ;
   4603     PROCEDURE PLUA PIN K1 P ;
   4604       P := PIN ;
   4605       LOOP K K1 TWOND 2 ;
   4606         DAPLU P K A(K) P ;
   4607         ENDLOOP ;
   4608       ENDPROCEDURE ;
   4609     LOOP ID 1 ND ;
   4610       F := 2*ID ;
   4611       I := F-1 ;
   4612       IF     TY=1 ;
   4613         A(I) := AN(I) ;
   4614         A(F) := AM(I) ;
   4615         GI(ID) :=  AN(F) ;
   4616         ELSEIF TY=2 ;
   4617         A(I) := AN(I) ;
   4618         A(F) := AM(F) ;
   4619         GI(ID) :=  AN(F) ;
   4620         ELSEIF TY=3 ;
   4621         A(I) := AN(F) ;
   4622         A(F) := AM(I) ;
   4623         GI(ID) := -AN(I) ;
   4624         ELSEIF TY=4 ;
   4625         A(I) := AN(F) ;
   4626         A(F) := AM(F) ;
   4627         GI(ID) := -AN(I) ;
   4628         ENDIF;
   4629       PLUA G(I) 1 SCR ; %PLUA: 4603
   4630       GM(I) := SCR ;
   4631       PLUA G(F) 1 SCR ; %PLUA: 4603
   4632       GM(F) := SCR ;
   4633       LOOP JD 1 ND ;
   4634         PLUA H(ID,JD) 1 SCR ; %PLUA: 4603
   4635         HM(ID,JD) := SCR ;
   4636         ENDLOOP ;
   4637       PLUA GM(I) 2 SCR ; %PLUA: 4603
   4638       GA(I) := CONS(SCR) ;
   4639       D(ID) := GI(ID)-GA(I) ;
   4640       ENDLOOP ;
   4641     TRY := 0 ;
   4642     IE := 0 ;
   4643     DIF := 1 ;
   4644     WHILE (DIF>10*DEPS)*(IE=0) ;
   4645       TRY := TRY+1 ;
   4646       IF TRY>100 ;
   4647         LWNTR := LWNTR+1 ;
   4648         IE := 1 ;
   4649         ENDIF ;
   4650       LOOP ID 1 ND ;
   4651         LOOP JD 1 ND ;
   4652           PLUA HM(ID,JD) 2 SCR ; %PLUA: 4603
   4653           HA(ID,JD) := CONS(SCR) ;
   4654           ENDLOOP ;
   4655         ENDLOOP ;
   4656       LINV HA HA ND ND IER ;
   4657       IF IER#0 ;
   4658         WRITE 6 ' --- WARNING in SYMP, no inverse' ;
   4659         ENDIF ;
   4660       LOOP ID 1 ND ;
   4661         F := 2*ID ;
   4662         LOOP JD 1 ND ;
   4663           A(F) := A(F)+HA(ID,JD)*D(JD) ;
   4664           ENDLOOP ;
   4665         ENDLOOP ;
   4666       DIF := 0 ;
   4667       LOOP ID 1 ND ;
   4668         I := 2*ID-1 ;
   4669         PLUA GM(I) 2 SCR ; %PLUA: 4603
   4670         GA(I) := CONS(SCR) ;
   4671         D(ID) := GI(ID)-GA(I) ;
   4672         DIF := DIF+ABS(D(ID)) ;
   4673         ENDLOOP ;
   4674       ENDWHILE ;
   4675     LOOP ID 1 ND ;
   4676       F := 2*ID ;
   4677       I := F-1 ;
   4678       PLUA GM(F) 2 SCR ; %PLUA: 4603
   4679       GA(F) := CONS(SCR) ;
   4680       IF     TY=1 ;
   4681         AN(I) :=  A(F) ;
   4682         AN(F) := -GA(F) ;
   4683         ELSEIF TY=2 ;
   4684         AN(I) := GA(F) ;
   4685         AN(F) :=   A(F) ;
   4686         ELSEIF TY=3 ;
   4687         AN(I) :=  A(F) ;
   4688         AN(F) := -GA(F) ;
   4689         ELSEIF TY=4 ;
   4690         AN(I) := GA(F) ;
   4691         AN(F) :=   A(F) ;
   4692         ENDIF ;
   4693       ENDLOOP ;
   4694     ENDPROCEDURE ;
   4695   PROCEDURE TR N NP IID1 IID2 D1 D2 TY NF IU ;
   4696     VARIABLE PLOT 100000 ;
   4697     VARIABLE IS 1 ;
   4698     VARIABLE IMP 1 ;
   4699     VARIABLE TYS 1 ;
   4700     VARIABLE AN 1 TWOND ;
   4701     VARIABLE AM 1 TWOND ;
   4702     VARIABLE DUM MAX(NRAY,NM1) ; %MAX:  171
   4703     VARIABLE G NM1 TWOND ;
   4704     VARIABLE H NM1 ND ND ;
   4705     VARIABLE F NM1 ;
   4706     VARIABLE IE 1 ;
   4707     VARIABLE NOM 1 ;
   4708     VARIABLE ML NV+1 TWOND ;
   4709     VARIABLE LIM 1 ;
   4710     VARIABLE MLI NV+1 TWOND ;
   4711     VARIABLE NN 2*NM1 TWOND ;
   4712     VARIABLE IT 1 ;
   4713     VARIABLE TMAP 2*NM1 TWOND+9 ;
   4714     VARIABLE AL 1 TWOND TWOND ;
   4715     VARIABLE DD1 1 ;
   4716     VARIABLE DD2 1 ;
   4717     VARIABLE ID1 1 ;
   4718     VARIABLE ID2 1 ;
   4719     VARIABLE PART NRAY TWOND+MAX(9,1+NCCT) ; %MAX:  171
   4720     VARIABLE PARI NRAY TWOND ;
   4721     VARIABLE ERAY NRAY TWOND ;
   4722     VARIABLE I 1 ;
   4723     VARIABLE J 1 ;
   4724     VARIABLE IC 1 ;
   4725     VARIABLE XP NRAY ;
   4726     VARIABLE YP NRAY ;
   4727     VARIABLE X 1 ;
   4728     VARIABLE Y 1 ;
   4729     VARIABLE NG 2*NM1 TWOND ;
   4730     VARIABLE CL TWOND TWOND ;
   4731     VARIABLE DFCT 1 ;
   4732     VARIABLE KK NRAY TWOND ;
   4733     VARIABLE TMP NRAY TWOND ;
   4734     VARIABLE SCR 1 ;
   4735     VARIABLE M1 NRAY TWOND ;
   4736     VARIABLE M2 NRAY TWOND ;
   4737     VARIABLE II 1 ;
   4738     VARIABLE TSPI NRAY 3 ;
   4739     VARIABLE TSSC NRAY 3 ;
   4740     VARIABLE NR 1 ;
   4741     VARIABLE NS 1 ;
   4742     VARIABLE STR 120 ;
   4743     VARIABLE DERR 1 ;
   4744     VARIABLE LPL 1 ;
   4745     VARIABLE LPLH 1 ;
   4746     VARIABLE APART NRAY 2*MAX(1,NCT) ; %MAX:  171
   4747     VARIABLE CLIM 1 ;
   4748     VARIABLE CLIM0 1 ;
   4749     PROCEDURE PREAP ;
   4750       PROCEDURE APCOPY IB IE ;
   4751         VARIABLE CMAP NM1 LPL ;
   4752         VARIABLE CPART NRAY LPL ;
   4753         VARIABLE K 1 ;
   4754         VARIABLE NK 1 ;
   4755         NK := IE-IB+1 ;
   4756         LOOP K 1 NK ;
   4757           CMAP(K) := MCT(IB-1+K) ;
   4758           ENDLOOP ;
   4759         POLVAL 1 CMAP NK PART TWOND CPART NK ;
   4760         LOOP K 1 NK ;
   4761           APART(IB-1+K) := CPART(K) ;
   4762           ENDLOOP ;
   4763         ENDPROCEDURE ;
   4764       IC := MIN(NCT,LPLH) ; %MIN:  174
   4765       POLVAL 1 MCT 2*IC PART TWOND APART 2*IC ;
   4766       IC := LPLH ;
   4767       WHILE NCT>IC ;
   4768         APCOPY 2*IC+1 2*MIN(NCT,IC+LPLH) ; %APCOPY: 4750 %MIN:  174
   4769         IC := IC+LPLH ;
   4770         ENDWHILE ;
   4771       ENDPROCEDURE ;
   4772     PROCEDURE CUT ;
   4773       PROCEDURE CUTCND LCND X Y XC YC CADD ;
   4774         IC := IC+1 ;
   4775         IF TWOND=2 ;
   4776           PART(IC) := SQR(X/XC)+CADD ;
   4777           ELSEIF TWOND>2 ;
   4778           IF LCND=1 ;
   4779             PART(IC) := SQR(X/XC)+SQR(Y/YC)+CADD ;
   4780             ELSEIF LCND=2 ;
   4781             PART(IC) := SQR(X/XC)+CADD ;
   4782             IC := IC+1 ;
   4783             PART(IC) := SQR(Y/YC)+CADD ;
   4784             ENDIF ;
   4785           ENDIF ;
   4786         ENDPROCEDURE ;
   4787       IC := TWOND+1 ;
   4788       PART(IC) := REMAIN ;
   4789       CLIM := 1 ;
   4790       LOOP I 1 TWOND ;
   4791         CLIM := MAX(CLIM,CONS(PART(I))) ; %MAX:  171
   4792         ENDLOOP ;
   4793       CLIM := MIN(CLIM,CLIM0)+1 ; %MIN:  174
   4794       IF NCT>0 ;
   4795         LOOP I 1 NCT ;
   4796           CUTCND LCT(I) APART(2*I-1) APART(2*I) XCT(1,I) XCT(2,I) CLIM
                  -1 ; %CUTCND: 4773
   4797           ENDLOOP ;
   4798         ELSEIF LO(1) ;
   4799         CUTCND ABS(LCUT) PART(1) PART(3) XCUT(1) XCUT(2) CLIM-1 ; %CUT
                  CND: 4773
   4800         ENDIF ;
   4801       VEZERO PART IC CLIM ;
   4802       REMOVE := REMOVE+LTRI*(REMAIN-PART(TWOND+1)) ;
   4803       REMAIN := PART(TWOND+1) ;
   4804       ENDPROCEDURE ;
   4805     PROCEDURE OUTPIC IT ;
   4806       IF NF=1 ;
   4807         POLVAL 2 NN TWOND PART TWOND PARI TWOND ;
   4808         XP := PARI(ID1) ;
   4809         YP := PARI(ID2) ;
   4810         ELSEIF TRUE ;
   4811         XP := PART(ID1) ;
   4812         YP := PART(ID2) ;
   4813         ENDIF ;
   4814       IF IID1<0 ;
   4815         XP := TSPI(-IID1) ;
   4816         ENDIF ;
   4817       IF IID2<0 ;
   4818         YP := TSPI(-IID2) ;
   4819         ENDIF ;
   4820       LOOP J 1 NRAY ;
   4821         X := XP|J ;
   4822         Y := YP|J ;
   4823         IF (ABS(X)<DD1)*(ABS(Y)<DD2)*((REMAIN|J)=1) ;
   4824           GRDOT X Y 0 PLOT ;
   4825           ENDIF ;
   4826         ENDLOOP ;
   4827       IF (LTRPRAY+LTRPSPI)>0 ;
   4828         IF LTRPRAY=1 ;
   4829           IF IT=0 ;
   4830             NR := LENGTH(PART(1)) ;
   4831             IF NR=1 ;
   4832               NR := 0 ;
   4833               ENDIF ;
   4834             WRITE LTRPRAYU '# number of rays:'&SF(NR,'(I8)') ; %SF:  2
                  30
   4835             IF NR>0 ;
   4836               STR := '# iteration   ray    X              A' ;
   4837               IF TWOND>2 ;
   4838                 STR := STR&'              Y              B' ;
   4839                 ENDIF ;
   4840               IF TWOND>4 ;
   4841                 STR := STR&'              T              D' ;
   4842                 ENDIF ;
   4843               IF TWOND>6 ;
   4844                 STR := STR&'              G              Z' ;
   4845                 ENDIF ;
   4846               WRITE LTRPRAYU STR ;
   4847               ENDIF ;
   4848             ELSEIF LO(1) ;
   4849             WRITE LTRPRAYU '' ;
   4850             ENDIF ;
   4851           LOOP J 1 NR ;
   4852             STR := SF(IT,'(I10)')&' '&SF(J-1,'(I6)') ; %SF:  230 %SF: 
                   230
   4853             LOOP I 1 TWOND ;
   4854               STR := STR&SF((PART(I)|J),'(E15.7)') ; %SF:  230
   4855               ENDLOOP ;
   4856             WRITE LTRPRAYU STR ;
   4857             ENDLOOP ;
   4858           ENDIF ;
   4859         IF LTRPSPI=1 ;
   4860           IF IT=0 ;
   4861             NS := LENGTH(TSPI(1)) ;
   4862             IF NS=1 ;
   4863               NS := 0 ;
   4864               ENDIF ;
   4865             WRITE LTRPSPIU '# number of spin vectors:'&SF(NS,'(I8)') ;
                   %SF:  230
   4866             IF NS>0 ;
   4867               WRITE LTRPSPIU ('# iteration vector   S_X'&             
                                       '            S_Y            S_Z') ;
   4868               ENDIF ;
   4869             ELSEIF LO(1) ;
   4870             WRITE LTRPSPIU '' ;
   4871             ENDIF ;
   4872           LOOP J 1 NS ;
   4873             STR := SF(IT,'(I10)')&' '&SF(J-1,'(I6)') ; %SF:  230 %SF: 
                   230
   4874             LOOP I 1 3 ;
   4875               STR := STR&SF((TSPI(I)|J),'(E15.7)') ; %SF:  230
   4876               ENDLOOP ;
   4877             WRITE LTRPSPIU STR ;
   4878             ENDLOOP ;
   4879           ENDIF ;
   4880         ENDIF ;
   4881       ENDPROCEDURE ;
   4882     LIM := 1000*MAX(D1,D2) ; %MAX:  171
   4883     DERR := 1E5 ;
   4884     LPL := 16 ;
   4885     LPLH := INT(LPL/2) ;
   4886     NOM := NOC ;
   4887     IMP := TWOND ;
   4888     ESC := 0 ;
   4889     ENC := 0 ;
   4890     LWNTR := 0 ;
   4891     ID1 := IID1 ;
   4892     ID2 := IID2 ;
   4893     CLEAR PLOT ;
   4894     GRCOLR 1 PLOT ;
   4895     TYS := TY ;
   4896     IF (ID1<0)+(ID2<0) ;
   4897       IF NSPN#NRAY ;
   4898         WRITE 6 (' *** ERROR in TR, the number of SSR''s '&           
                   'disagrees with SR''s.') ;
   4899         QUIT 0 ;
   4900         ELSEIF NF#0 ;
   4901         WRITE 6 (' *** ERROR in TR, spin tracking is not '&           
                   'supported for NF.') ;
   4902         QUIT 0 ;
   4903         ENDIF ;
   4904       IS := 1 ;
   4905       IMP := TWOND+9 ;
   4906       IF ID1<0 ;
   4907         ID1 := TWOND-ID1 ;
   4908         ENDIF ;
   4909       IF ID2<0 ;
   4910         ID2 := TWOND-ID2 ;
   4911         ENDIF ;
   4912       LOOP I 1 3 ;
   4913         TSPI(I) := SPI(I) ;
   4914         LOOP J 1 3 ;
   4915           TMAP(TWOND+3*(I-1)+J) := SPNR(I,J)+0*DD(1) ;
   4916           ENDLOOP ;
   4917         ENDLOOP ;
   4918       ENDIF ;
   4919     LOOP I 1 IMP ;
   4920       PART(I) := 0 ;
   4921       ENDLOOP ;
   4922     IF NF=1 ;
   4923       DANF MAP TMAP NN 1 DUM 1E-12 ; %DANF: 3687
   4924       CO 1 ; %CO:  910
   4925       IF TYPE(NN(1))#TYPE(DD(1)) ;
   4926         LOOP I 1 TWOND ;
   4927           NN(I) := XX(I) ;
   4928           ENDLOOP ;
   4929         ENDIF ;
   4930       PART(ID1) := D1 ;
   4931       PART(ID2) := D2 ;
   4932       POLVAL 2 NN TWOND PART TWOND PARI TWOND ;
   4933       I := SQR(PARI(ID1))+SQR(PARI(ID2)) ;
   4934       PART(ID2) := -D2 ;
   4935       POLVAL -2 NN TWOND PART TWOND PARI TWOND ;
   4936       J := SQR(PARI(ID1))+SQR(PARI(ID2)) ;
   4937       DD1 := SQRT(MAX(I,J)) ; %MAX:  171
   4938       DD2 := DD1 ;
   4939       CO NOM ; %CO:  910
   4940       GRMOVE -DD1*1.5 -DD2 0 PLOT ;
   4941       GRMOVE DD1*1.5 DD2 0 PLOT ;
   4942       ELSEIF TRUE ;
   4943       DD1 := D1 ;
   4944       DD2 := D2 ;
   4945       GRMOVE -D1 -D2 0 PLOT ;
   4946       GRMOVE D1 D2 0 PLOT ;
   4947       ENDIF ;
   4948     LOOP I 1 TWOND ;
   4949       TMAP(I) := MAP(I) ;
   4950       ENDLOOP ;
   4951     IF (TY=-12)+(TY=-13) ;
   4952       TYS := TY+10 ;
   4953       CO 1 ; %CO:  910
   4954       I := -1 ;
   4955       MGF MAP F I J ; %MGF: 3298
   4956       GFM ML F I ; %GFM: 3259
   4957       MI ML MLI TWOND IE NOC NV NM1 ; %MI:  375
   4958       CO NOM ; %CO:  910
   4959       IF IE#0 ;
   4960         WRITE 6 ' *** ERROR in TR, no inverse' ;
   4961         QUIT 0 ;
   4962         ENDIF ;
   4963       LOOP I 1 TWOND ;
   4964         TMAP(I) := 0 ;
   4965         LOOP J 1 TWOND ;
   4966           AL(I,J) := COEF(ML(I),J) ; %COEF:  246
   4967           TMAP(I) := TMAP(I)+COEF(MLI(I),J)*MAP(J) ; %COEF:  246
   4968           ENDLOOP ;
   4969         ENDLOOP ;
   4970       ENDIF ;
   4971     IF TY>-1 ;
   4972       CGF TY TMAP CL F NG ; %CGF: 4419
   4973       CO 1 ; %CO:  910
   4974       LOOP I 1 TWOND ;
   4975         ML(I) := TMAP(I) ;
   4976         ENDLOOP ;
   4977       CO NOM ; %CO:  910
   4978       POLVAL 103 CL TWOND AN TWOND AN TWOND ;
   4979       POLVAL 104 NG TWOND AN TWOND AN TWOND ;
   4980       ELSEIF TY#-21 ;
   4981       MGF TMAP F ABS(TYS) IE ; %MGF: 3298
   4982       IF IE#0 ;
   4983         WRITE 6 ' *** ERROR in TR, no generating function.' ;
   4984         QUIT 0 ;
   4985         ENDIF ;
   4986       SYMP0 F G H ; %SYMP0: 4570
   4987       ENDIF ;
   4988     LOOP I 1 TWOND ;
   4989       PART(I) := RAY(I) ;
   4990       PARI(I) := PART(I) ;
   4991       ENDLOOP ;
   4992     LOOP I TWOND+1 IMP ;
   4993       PART(I) := 0*PART(1) ;
   4994       ENDLOOP ;
   4995     POLVAL 105 TMAP IMP PART TWOND PART IMP ;
   4996     IF LTRR=0 ;
   4997       LTRI := 0 ;
   4998       IF (LCUT>0)*(NCT=0) ;
   4999         CUT ; %CUT: 4772
   5000         ENDIF ;
   5001       IF NP>0 ;
   5002         OUTPIC 0 ; %OUTPIC: 4805
   5003         ENDIF ;
   5004       ENDIF ;
   5005     IF (LCUT#0)+(NCT>0) ;
   5006       CLIM0 := 0 ;
   5007       LOOP I 1 TWOND ;
   5008         CLIM0 := MAX(CLIM0,CONS(PART(I))) ; %MAX:  171
   5009         ENDLOOP ;
   5010       CLIM0 := CLIM0+10*DERR ;
   5011       ENDIF ;
   5012     LOOP IT 1 N ;
   5013       LTRI := LTRI+1 ;
   5014       IF (LCUT=0)*(NCT=0) ;
   5015         VEZERO PART TWOND LIM ;
   5016         ELSEIF NCT>0 ;
   5017         PREAP ; %PREAP: 4749
   5018         ENDIF ;
   5019       LOOP I 1 TWOND ;
   5020         PARI(I) := PART(I) ;
   5021         ENDLOOP ;
   5022       POLVAL -5 TMAP IMP PART TWOND PART IMP ;
   5023       LOOP I 1 TWOND ;
   5024         ERAY(I) := PART(I) ;
   5025         ENDLOOP ;
   5026       IF TY>-1 ;
   5027         POLVAL 2 ML TWOND PARI TWOND KK TWOND ;
   5028         LOOP I 1 TWOND ;
   5029           M2(I) := PART(I)-KK(I) ;
   5030           ENDLOOP ;
   5031         II := 0 ;
   5032         DFCT := 1 ;
   5033         WHILE (DFCT>10*DEPS)*(DFCT<DERR)*(II<101) ;
   5034           II := II+1 ;
   5035           POLVAL -3 CL TWOND M2 TWOND TMP TWOND ;
   5036           LOOP I 1 TWOND ;
   5037             TMP(I) := TMP(I)+PARI(I) ;
   5038             ENDLOOP ;
   5039           POLVAL -4 NG TWOND TMP TWOND M1 TWOND ;
   5040           DFCT := 0 ;
   5041           LOOP I 1 TWOND ;
   5042             DFCT := MAX(DFCT,CONS(M1(I)-M2(I))) ; %MAX:  171
   5043             M2(I) := M1(I) ;
   5044             ENDLOOP ;
   5045           ENDWHILE ;
   5046         IF DFCT>100*DEPS ;
   5047           LWNTR := LWNTR+1 ;
   5048           ENDIF ;
   5049         LOOP I 1 TWOND ;
   5050           PART(I) := M2(I)+KK(I) ;
   5051           ENDLOOP ;
   5052         ELSEIF TY#-21 ;
   5053         LOOP J 2 NRAY ;
   5054           LOOP I 1 TWOND ;
   5055             AM(I) := PARI(I)|J ;
   5056             AN(I) := AM(I) ;
   5057             ENDLOOP ;
   5058           SYMP AM AN G H ABS(TYS) IE ; %SYMP: 4586
   5059           IF IE=0 ;
   5060             LOOP I 1 TWOND ;
   5061               DUM := PART(I) ;
   5062               VELSET DUM J AN(I) ;
   5063               PART(I) := DUM ;
   5064               ENDLOOP ;
   5065             ENDIF ;
   5066           ENDLOOP ;
   5067         IF TY>-5 ;
   5068           LOOP I 1 TWOND ;
   5069             PARI(I) := PART(I) ;
   5070             ENDLOOP ;
   5071           ELSEIF (TY=-12)+(TY=-13) ;
   5072           LOOP I 1 TWOND ;
   5073             PARI(I) := 0 ;
   5074             LOOP J 1 TWOND ;
   5075               PARI(I) := PARI(I)+AL(I,J)*PART(J) ;
   5076               ENDLOOP ;
   5077             ENDLOOP ;
   5078           LOOP I 1 TWOND ;
   5079             PART(I) := PARI(I) ;
   5080             ENDLOOP ;
   5081           ENDIF ;
   5082         ENDIF ;
   5083       IF IS=1 ;
   5084         DUM := 0 ;
   5085         LOOP I 1 3 ;
   5086           TSSC(I) := 0 ;
   5087           LOOP J 1 3 ;
   5088             TSSC(I) := TSSC(I)+PART(TWOND+3*(I-1)+J)*TSPI(J) ;
   5089             ENDLOOP ;
   5090           DUM := DUM+SQR(TSSC(I)) ;
   5091           ENDLOOP ;
   5092         DUM := SQRT(DUM) ;
   5093         VELSET DUM 1 1 ;
   5094         ENC := ABS(DUM-1) ;
   5095         LOOP I 1 3 ;
   5096           TSPI(I) := TSSC(I)/DUM ;
   5097           ENDLOOP ;
   5098         ENDIF ;
   5099       LOOP I 1 TWOND ;
   5100         ESC := ESC+ABS(PART(I)-ERAY(I)) ;
   5101         ENDLOOP ;
   5102       IF (LCUT#0)+(NCT>0) ;
   5103         CUT ; %CUT: 4772
   5104         ENDIF ;
   5105       IF MOD(IT,ABS(NP))=0 ; %MOD:  177
   5106         OUTPIC IT ; %OUTPIC: 4805
   5107         ENDIF ;
   5108       ENDLOOP ;
   5109     ESC := ESC/N/(NRAY-1)/TWOND ;
   5110     ENC := ENC/N/(NRAY-1) ;
   5111     IF LTRR>0 ;
   5112       LOOP I 1 TWOND ;
   5113         RAY(I) := PART(I) ;
   5114         ENDLOOP ;
   5115       LOOP I 1 3 ;
   5116         SPI(I) := TSPI(I) ;
   5117         ENDLOOP ;
   5118       ENDIF ;
   5119     GRCOLR 3 PLOT ;
   5120     GRMOVE DD1*37/48 DD2/75 0 PLOT ;
   5121     GRCHAR SF(DD1,'(G9.3)') PLOT ; %SF:  230
   5122     GRMOVE DD1/50 DD2*11/12 0 PLOT ;
   5123     GRCHAR SF(DD2,'(G9.3)') PLOT ; %SF:  230
   5124     GRMOVE  DD1*2/3   0    0 PLOT ;
   5125     GRDRAW  DD1   0 0 PLOT ;
   5126     GRMOVE -DD1*2/3   0    0 PLOT ;
   5127     GRDRAW -DD1   0 0 PLOT ;
   5128     GRMOVE    0    DD2*2/3 0 PLOT ;
   5129     GRDRAW   0  DD2 0 PLOT ;
   5130     GRMOVE    0   -DD2*2/3 0 PLOT ;
   5131     GRDRAW   0 -DD2 0 PLOT ;
   5132     IF LTR=1 ;
   5133       LTR := 0 ;
   5134       GRCOLR 1 PLOT ;
   5135       GRMOVE -DD1 -DD2 0 PLOT ;
   5136       GRCHAR TRTST PLOT ;
   5137       ENDIF ;
   5138     WRITE IU PLOT ;
   5139     IF (LTRPRAY+LTRPSPI)>0 ;
   5140       LTRPRAY := 0 ;
   5141       LTRPSPI := 0 ;
   5142       ENDIF ;
   5143     ENDPROCEDURE ;
   5144   PROCEDURE TRT LIN ;
   5145     LTR := 1 ;
   5146     TRTST := LIN ;
   5147     ENDPROCEDURE ;
   5148   PROCEDURE TRAP X Y I ;
   5149     XCUT(1) := ABS(X) ;
   5150     XCUT(2) := ABS(Y) ;
   5151     LCUT := I ;
   5152     ENDPROCEDURE ;
   5153   PROCEDURE AP X Y I ;
   5154     IF (I=1)+(I=2) ;
   5155       NCT := NCT+1 ;
   5156       NCCT := NCCT+I ;
   5157       LCT(NCT) := I ;
   5158       XCT(1,NCT) := ABS(X) ;
   5159       XCT(2,NCT) := ABS(Y) ;
   5160       MCT(2*NCT-1) := MAP(1) ;
   5161       MCT(2*NCT) := MAP(3) ;
   5162       DR := ABS(Y) ;
   5163       LOCSET 0 0 0 0 0 0 ; %LOCSET: 1059
   5164       UPDATE 0 0 ; %UPDATE: 1206
   5165       ENDIF ;
   5166     ENDPROCEDURE ;
   5167   PROCEDURE TRAPN N ;
   5168     N := ABS(REMAIN)-1 ;
   5169     ENDPROCEDURE ;
   5170   PROCEDURE TRAPHIST FN LT ;
   5171     VARIABLE HIST LENGTH(REMAIN) ;
   5172     VARIABLE L 1 ;
   5173     PROCEDURE PROCESS ;
   5174       VARIABLE I 1 ;
   5175       VARIABLE J 1 ;
   5176       VARIABLE K 1 ;
   5177       VARIABLE DATA 1 L+2 ;
   5178       LOOP J 1 L+2 ;
   5179         DATA(J) := 0 ;
   5180         ENDLOOP ;
   5181       LOOP I 2 NRAY ;
   5182         J := (-HIST)|I ;
   5183         DATA(J+2) := DATA(J+2)+1 ;
   5184         ENDLOOP ;
   5185       OPENF 77 FN 'UNKNOWN' ;
   5186       K := NRAY-1 ;
   5187       WRITE 77 ('#     step   number of survived particles    '&      
                               '(the intial number at step=-1)') ;
   5188       WRITE 77 SF(-1,'(I10)')&' '&SF(K,'(I10)') ; %SF:  230 %SF:  230
   5189       LOOP J 2 L+2 ;
   5190         IF DATA(J)>0 ;
   5191           K := K-DATA(J) ;
   5192           WRITE 77 SF(J-2,'(I10)')&' '&SF(K,'(I10)') ; %SF:  230 %SF: 
                   230
   5193           ENDIF ;
   5194         ENDLOOP ;
   5195       IF L<LT ;
   5196         WRITE 77 SF(LTRI,'(I10)')&' '&SF(K,'(I10)') ; %SF:  230 %SF:  
                  230
   5197         ENDIF ;
   5198       CLOSEF 77 ;
   5199       ENDPROCEDURE ;
   5200     IF NRAY<2 ;
   5201       WRITE 6 ' *** ERROR in TRAPHIST, no rays.' ;
   5202       QUIT 0 ;
   5203       ENDIF ;
   5204     HIST := REMAIN-REMOVE ;
   5205     L := VMAX(-HIST) ;
   5206     PROCESS ; %PROCESS: 5173
   5207     ENDPROCEDURE ;
   5208   PROCEDURE TRAYPAC ;
   5209     VARIABLE L0 1 ;
   5210     VARIABLE L 1 ;
   5211     VARIABLE SPIN 1 ;
   5212     VARIABLE PART NRAY TWOND ;
   5213     VARIABLE TSPI NRAY 3 ;
   5214     VARIABLE REMAIN0 NRAY ;
   5215     VARIABLE I 1 ;
   5216     VARIABLE J 1 ;
   5217     VARIABLE K 1 ;
   5218     L0 := LENGTH(RAY(1)) ;
   5219     IF L0#NRAY ;
   5220       WRITE 6            ' *** ERROR in TRAYPAC, RAY length wrong.' ;
   5221       QUIT 0 ;
   5222       ENDIF ;
   5223     L := ABS(REMAIN) ;
   5224     IF L<NRAY ;
   5225       REMAIN0 := REMAIN ;
   5226       REMAIN := 1 ;
   5227       LOOP I 1 TWOND ;
   5228         PART(I) := RAY(I) ;
   5229         RAY(I) := PART(I)|1 ;
   5230         ENDLOOP ;
   5231       SPIN := LO(0) ;
   5232       IF LENGTH(SPI(1))=L0 ;
   5233         SPIN := LO(1) ;
   5234         ENDIF ;
   5235       IF SPIN ;
   5236         LOOP I 1 3 ;
   5237           TSPI(I) := SPI(I) ;
   5238           SPI(I) := TSPI(I)|1 ;
   5239           ENDLOOP ;
   5240         ENDIF;
   5241       K := 1 ;
   5242       LOOP J 2 L0 ;
   5243         IF (REMAIN0|J)=1 ;
   5244           K := K+1 ;
   5245           REMAIN := REMAIN&1 ;
   5246           LOOP I 1 TWOND ;
   5247             RAY(I) := RAY(I)&(PART(I)|J) ;
   5248             ENDLOOP ;
   5249           IF SPIN ;
   5250             LOOP I 1 3 ;
   5251               SPI(I) := SPI(I)&(TSPI(I)|J) ;
   5252               ENDLOOP ;
   5253             ENDIF ;
   5254           ENDIF ;
   5255         ENDLOOP ;
   5256       ENDIF ;
   5257     IF K#L ;
   5258       WRITE 6 ' *** ERROR in TRAYPAC, REMAIN length wrong.' ;
   5259       QUIT 0 ;
   5260       ENDIF;
   5261     NRAY := L ;
   5262     IF SPIN ;
   5263       NSPN := L ;
   5264       ENDIF ;
   5265     REMOVE := 0*REMAIN ;
   5266     ENDPROCEDURE ;
   5267   PROCEDURE TRR L ;
   5268     IF LOV=0 ;
   5269       WRITE 6 ' *** ERROR, call OV before TRR' ;
   5270       QUIT 0 ;
   5271       ENDIF ;
   5272     IF (LTRR=0)+(L=0) ;
   5273       LTRI := 0 ;
   5274       ENDIF ;
   5275     LTRR := L ;
   5276     ENDPROCEDURE ;
   5277   PROCEDURE TRPRAY IU ;
   5278     LTRPRAY := 1 ;
   5279     LTRPRAYU := IU ;
   5280     IF LTRPSPI=1 ;
   5281       IF LTRPRAYU=LTRPSPIU ;
   5282         WRITE 6         ' *** ERROR in TRPRAY, avoid the same unit num
                  ber with TRPSPI''s' ;
   5283         QUIT 0 ;
   5284         ENDIF ;
   5285       ENDIF ;
   5286     ENDPROCEDURE ;
   5287   PROCEDURE TRPSPI IU ;
   5288     LTRPSPI := 1 ;
   5289     LTRPSPIU := IU ;
   5290     IF LTRPRAY=1 ;
   5291       IF LTRPRAYU=LTRPSPIU ;
   5292         WRITE 6         ' *** ERROR in TRPSPI, avoid the same unit num
                  ber with TRPRAY''s' ;
   5293         QUIT 0 ;
   5294         ENDIF ;
   5295       ENDIF ;
   5296     ENDPROCEDURE ;
   5297   PROCEDURE TRSC E ;
   5298     E := ESC ;
   5299     ENDPROCEDURE ;
   5300   PROCEDURE TRNC E ;
   5301     E := ENC ;
   5302     ENDPROCEDURE ;
   5303   PROCEDURE SYSCFL IU AA FF LL INOR ;
   5304     VARIABLE MIS NM1 ;
   5305     VARIABLE NOR 1 ;
   5306     VARIABLE J 1 ;
   5307     VARIABLE LIN 80 ;
   5308     READ IU LIN ;
   5309     J := R(LIN,8,10) ; %R:  224
   5310     READ IU LIN ;
   5311     AA(4) := R(LIN,8,30) ; %R:  224
   5312     AA(5) := R(LIN,31,53) ; %R:  224
   5313     AA(6) := R(LIN,54,76) ; %R:  224
   5314     IF INOR<0 ;
   5315       NOR := J+1 ;
   5316       ELSEIF TRUE ;
   5317       NOR := INOR ;
   5318       ENDIF ;
   5319     IF J+1<NOR ;
   5320       WRITE 6 ' --- WARNING in SYSCFL, order not saved' ;
   5321       NOR := J+1 ;
   5322       ENDIF ;
   5323     AA(8) := NOR ;
   5324     READ IU LIN ;
   5325     J := R(LIN,13,15) ; %R:  224
   5326     READ IU LIN ;
   5327     AA(1) := R(LIN,8,30) ; %R:  224
   5328     AA(2) := R(LIN,31,53) ; %R:  224
   5329     AA(3) := R(LIN,54,76) ; %R:  224
   5330     IF J<0 ;
   5331       AA(1) := 0 ;
   5332       ENDIF ;
   5333     READ IU LIN ;
   5334     READ IU LIN ;
   5335     AA(7) := R(LIN,35,36) ; %R:  224
   5336     READ IU LIN ;
   5337     CO NOC+1 ; %CO:  910
   5338     LOOP J 0 NOR ;
   5339       DAREA IU MIS TWOND ;
   5340       FF(J+1) := MIS ;
   5341       DAREA IU MIS TWOND ;
   5342       LL(J+1) := MIS ;
   5343       ENDLOOP ;
   5344     CO NOC-1 ; %CO:  910
   5345     AA(9) := 0 ;
   5346     AA(10) := 0 ;
   5347     LOOP J NOR+2 10 ;
   5348       LL(J) := 0*DD(1) ;
   5349       FF(J) := 0*DD(1) ;
   5350       ENDLOOP ;
   5351     ENDPROCEDURE ;
   5352   PROCEDURE FC2 POL IEE FILE ;
   5353     VARIABLE J 1 ;
   5354     VARIABLE AA 1 10 ;
   5355     VARIABLE FF NM1 10 ;
   5356     VARIABLE LL NM1 10 ;
   5357     OPENF 99 FILE 'OLD' ;
   5358     SYSCFL 99 AA FF LL -1 ; %SYSCFL: 5303
   5359     CLOSEF 99 ;
   5360     CO NOC+1 ; %CO:  910
   5361     LOOP J 1 10 ;
   5362       GFF2(IEE,POL,J) := FF(J) ;
   5363       LFF2(IEE,POL,J) := LL(J) ;
   5364       DATFF2(IEE,POL,J) := AA(J) ;
   5365       ENDLOOP ;
   5366     CO NOC-1 ; %CO:  910
   5367     ENDPROCEDURE ;
   5368   PROCEDURE FD2 ;
   5369     VARIABLE I 1 ;
   5370     VARIABLE J 1 ;
   5371     VARIABLE K 1 ;
   5372     VARIABLE AA 1 10 ;
   5373     VARIABLE FF NM1 10 ;
   5374     VARIABLE LL NM1 10 ;
   5375     CO NOC+1 ; %CO:  910
   5376     OPENF 99 'SYSCA.DAT' 'OLD' ;
   5377     LOOP I 1 6 ;
   5378       LOOP J 1 2 ;
   5379         SYSCFL 99 AA FF LL -1 ; %SYSCFL: 5303
   5380         LOOP K 1 10 ;
   5381           GFF2(J,I,K) := FF(K) ;
   5382           LFF2(J,I,K) := LL(K) ;
   5383           DATFF2(J,I,K) := AA(K) ;
   5384           ENDLOOP ;
   5385         ENDLOOP ;
   5386       ENDLOOP ;
   5387     CLOSEF 99 ;
   5388     CO NOC-1 ; %CO:  910
   5389     ENDPROCEDURE ;
   5390   PROCEDURE FR I ;
   5391     IF LOV=0 ;
   5392       WRITE 6 ' *** ERROR, call OV before FR' ;
   5393       QUIT 0 ;
   5394       ENDIF ;
   5395     LFR := I ;
   5396     IF (I<3)*(I>0)*(LFR2=0) ;
   5397       FD2 ; %FD2: 5368
   5398       LFR2 := 1 ;
   5399       ENDIF ;
   5400     ENDPROCEDURE ;
   5401   PROCEDURE KC I ;
   5402     LKC := I ;
   5403     IF I=1 ;
   5404       WRITE 6 ' --- WARNING in KC, effects only in ODE and DLACT' ;
   5405       ENDIF ;
   5406     ENDPROCEDURE ;
   5407   PROCEDURE WAS I ;
   5408     LWA := -I ;
   5409     ENDPROCEDURE ;
   5410   FUNCTION LEN2 X Y ;
   5411     VARIABLE XY2 NM1+1 ;
   5412     VARIABLE LENC 1 ;
   5413     VARIABLE TYP 1 ;
   5414     XY2 := SQR(X)+SQR(Y) ;
   5415     LENC := SQRT(CONS(XY2)) ;
   5416     TYP := TYPE(XY2) ;
   5417     IF TYP=TYPE(1) ;
   5418       LEN2 := LENC ;
   5419       ELSEIF TYP=TYPE(DA(1)) ;
   5420       IF LENC<1.D-8 ;
   5421         LEN2 := LENC+0*DA(1) ;
   5422         ELSEIF LO(1) ;
   5423         LEN2 := SQRT(XY2) ;
   5424         ENDIF ;
   5425       ELSEIF LO(1) ;
   5426       WRITE 6 ' *** ERROR in LEN2, only RE or DA supported.' ;
   5427       QUIT 0 ;
   5428       ENDIF ;
   5429     ENDFUNCTION ;
   5430   PROCEDURE NORMAL X Z X0 Z0 X1 Z1 DIS XS ZS ;
   5431     VARIABLE NX 1 ;
   5432     VARIABLE NZ 1 ;
   5433     VARIABLE SCR 1 ;
   5434     NX := -(Z1-Z0) ;
   5435     NZ := X1-X0 ;
   5436     SCR := SQRT(SQR(NX)+SQR(NZ)) ;
   5437     NX := NX/SCR ;
   5438     NZ := NZ/SCR ;
   5439     DIS := (X-X0)*NX+(Z-Z0)*NZ ;
   5440     XS := X-DIS*NX ;
   5441     ZS := Z-DIS*NZ ;
   5442     ENDPROCEDURE ;
   5443   PROCEDURE EDGESEC X Z IB IE XS ZS DIS ;
   5444     VARIABLE X0 1 ;
   5445     VARIABLE Z0 1 ;
   5446     VARIABLE X1 1 ;
   5447     VARIABLE Z1 1 ;
   5448     VARIABLE XC 1 ;
   5449     VARIABLE ZC 1 ;
   5450     VARIABLE T NM1+1 ;
   5451     VARIABLE IS 1 ;
   5452     VARIABLE SIDE 1 ;
   5453     VARIABLE N 1 ;
   5454     N := BX1BOXPN(IB,IE) ;
   5455     IF N=1 ;
   5456       IS := IE+1 ;
   5457       IF IS>4 ;
   5458         IS := 1 ;
   5459         ENDIF ;
   5460       X0 := BX1BOXP(IB,IE,1,1) ;
   5461       Z0 := BX1BOXP(IB,IE,2,1) ;
   5462       X1 := BX1BOXP(IB,IS,1,1) ;
   5463       Z1 := BX1BOXP(IB,IS,2,1) ;
   5464       T := ( (X-X0)*(X1-X0)+(Z-Z0)*(Z1-Z0) )/( SQR(X1-X0)+SQR(Z1-Z0) )
                   ;
   5465       IF     CONS(T)<0 ;
   5466         T := 0 ;
   5467         XS := X0 ;
   5468         ZS := Z0 ;
   5469         XC := CONS(X) ;
   5470         ZC := CONS(Z) ;
   5471         SIDE := SIG(-(XC-XS)*(Z1-Z0)+(ZC-ZS)*(X1-X0)) ; %SIG:  180
   5472         DIS := SIDE*LEN2(X-XS,Z-ZS) ; %LEN2: 5410
   5473         ELSEIF CONS(T)>1 ;
   5474         T := 1 ;
   5475         XS := X1 ;
   5476         ZS := Z1 ;
   5477         XC := CONS(X) ;
   5478         ZC := CONS(Z) ;
   5479         SIDE := SIG(-(XC-XS)*(Z1-Z0)+(ZC-ZS)*(X1-X0)) ; %SIG:  180
   5480         DIS := SIDE*LEN2(X-XS,Z-ZS) ; %LEN2: 5410
   5481         ELSEIF LO(1) ;
   5482         NORMAL X Z X0 Z0 X1 Z1 DIS XS ZS ; %NORMAL: 5430
   5483         ENDIF ;
   5484       ELSEIF LO(1) ;
   5485       WRITE 6 '*** ERROR in EDGESEC, N#1 -- not supported.' ;
   5486       QUIT 0 ;
   5487       ENDIF ;
   5488     ENDPROCEDURE ;
   5489   PROCEDURE PTBOX X Z IB INSIDE DISE SIDE ;
   5490     VARIABLE XC 1 ;
   5491     VARIABLE ZC 1 ;
   5492     VARIABLE I 1 ;
   5493     VARIABLE XS 1 ;
   5494     VARIABLE ZS 1 ;
   5495     VARIABLE DIS 1 ;
   5496     XC := CONS(X) ;
   5497     ZC := CONS(Z) ;
   5498     INSIDE := 0 ;
   5499     LOOP I 1 4 ;
   5500       EDGESEC XC ZC IB I XS ZS DIS ; %EDGESEC: 5443
   5501       DISE(I) := ABS(DIS) ;
   5502       SIDE(I) := SIG(DIS) ; %SIG:  180
   5503       INSIDE := INSIDE+SIDE(I) ;
   5504       ENDLOOP ;
   5505     IF NINT(INSIDE)=4 ;
   5506       INSIDE := 1 ;
   5507       ELSEIF LO(1) ;
   5508       INSIDE := 0 ;
   5509       ENDIF ;
   5510     ENDPROCEDURE ;
   5511   FUNCTION MCSDIST X Z ;
   5512     VARIABLE IM 1 ;
   5513     VARIABLE IM0 1 ;
   5514     VARIABLE INSIDE 1 ;
   5515     VARIABLE R NM1+1 ;
   5516     VARIABLE DISE 1 4 ;
   5517     VARIABLE SDIS 1 ;
   5518     VARIABLE SIE 1 ;
   5519     VARIABLE SIDE 1 4 ;
   5520     VARIABLE IE 1 ;
   5521     VARIABLE LHE 1 ;
   5522     VARIABLE BY NM1+1 ;
   5523     VARIABLE DH NM1+1 ;
   5524     VARIABLE DIS NM1+1 ;
   5525     VARIABLE XS NM1+1 ;
   5526     VARIABLE ZS NM1+1 ;
   5527     VARIABLE RS NM1+1 ;
   5528     FUNCTION POLB X P IB N ;
   5529       VARIABLE I 1 ;
   5530       POLB := P(IB,N+1) ;
   5531       LOOP I N 1 -1 ;
   5532         POLB := POLB*X+P(IB,I) ;
   5533         ENDLOOP ;
   5534       ENDFUNCTION ;
   5535     MCSDIST := 0*DA(1) ;
   5536     LHE := 0 ;
   5537     IF LHE=0 ;
   5538       LOOP IM 1 BXIBOX ;
   5539         PTBOX X Z IM INSIDE DISE SIDE ; %PTBOX: 5489
   5540         IF INSIDE=1 ;
   5541           IM0 := BXBOXID(IM) ;
   5542           R := LEN2(X,Z) ; %LEN2: 5410
   5543           BY := POLB(R,BXBDT,IM0,BXNOB(IM0)) ; %POLB: 5528
   5544           LOOP IE 1 4 ;
   5545             EDGESEC X Z IM IE XS ZS DIS ; %EDGESEC: 5443
   5546             RS := LEN2(XS,ZS) ; %LEN2: 5410
   5547             DH := POLB(RS,BXDDT,IM0,BXNOD(IM0)) ; %POLB: 5528
   5548             BY := BY*ENGE(1,1,1,-DIS/(2*DH)) ; %ENGE:  659
   5549             ENDLOOP ;
   5550           ELSEIF LO(1) ;
   5551           SDIS := -SIDE(1)*DISE(1) ;
   5552           LOOP IE 2 4 ;
   5553             SDIS := MAX(SDIS,-SIDE(IE)*DISE(IE)) ; %MAX:  171
   5554             ENDLOOP ;
   5555           IF SDIS>10*DMAX ;
   5556             BY := 0 ;
   5557             ELSEIF LO(1) ;
   5558             IM0 := BXBOXID(IM) ;
   5559             LOOP IE 1 4 ;
   5560               IF IE=1 ;
   5561                 SDIS := DISE(IE) ;
   5562                 SIE := IE ;
   5563                 ELSEIF DISE(IE)<SDIS ;
   5564                 SDIS := DISE(IE) ;
   5565                 SIE := IE ;
   5566                 ENDIF ;
   5567               ENDLOOP ;
   5568             EDGESEC X Z IM SIE XS ZS DIS ; %EDGESEC: 5443
   5569             RS := LEN2(XS,ZS) ; %LEN2: 5410
   5570             BY := POLB(RS,BXBDT,IM0,BXNOB(IM0)) ; %POLB: 5528
   5571             LOOP IE 1 4 ;
   5572               IF SIDE(IE)*DISE(IE)<6*DMAX ;
   5573                 EDGESEC X Z IM IE XS ZS DIS ; %EDGESEC: 5443
   5574                 RS := LEN2(XS,ZS) ; %LEN2: 5410
   5575                 DH := POLB(RS,BXDDT,IM0,BXNOD(IM0)) ; %POLB: 5528
   5576                 BY := BY*ENGE(1,1,1,-DIS/(2*DH)) ; %ENGE:  659
   5577                 ENDIF ;
   5578               ENDLOOP ;
   5579             ENDIF ;
   5580           ENDIF ;
   5581         MCSDIST := MCSDIST+BY ;
   5582         ENDLOOP ;
   5583       ELSEIF LHE=1 ;
   5584       LOOP IM 1 BXIBOX ;
   5585         PTBOX X Z IM INSIDE DISE SIDE ; %PTBOX: 5489
   5586         IF INSIDE=1 ;
   5587           IM0 := BXBOXID(IM) ;
   5588           R := LEN2(X,Z) ; %LEN2: 5410
   5589           MCSDIST := POLB(R,BXBDT,IM0,BXNOB(IM0))+0*DA(1) ; %POLB: 552
                  8
   5590           ENDIF ;
   5591         ENDLOOP ;
   5592       ENDIF ;
   5593     ENDFUNCTION ;
   5594   FUNCTION FOURIERGAUSS X Z ;
   5595     VARIABLE RAD NM1+1 ;
   5596     VARIABLE PHI NM1+1 ;
   5597     VARIABLE IB 1;
   5598     VARIABLE IL 1;
   5599     VARIABLE I 1 ;
   5600     VARIABLE NB 1 ;
   5601     VARIABLE R 1 ;
   5602     VARIABLE NS 1 ;
   5603     VARIABLE NL 1 ;
   5604     VARIABLE SIGMA 1 ;
   5605     VARIABLE DX 1 ;
   5606     VARIABLE W NM1+1 ;
   5607     VARIABLE RES NM1+1 ;
   5608     VARIABLE ARG NM1+1 ;
   5609     RAD := SQRT(SQR(X)+SQR(Z)) ;
   5610     PHI := ATAN2(Z,X) ; %ATAN2:  189
   5611     NB := MFD(1,1) ;
   5612     DX := ABS(MFD(3,2)|1-MFD(2,2)|1) ;
   5613     SIGMA := PPOL(1) ;
   5614     FOURIERGAUSS := 0 ;
   5615     LOOP IB 2 NB+1 ;
   5616       NL := MFD(IB,1) ;
   5617       R := MFD(IB,2)|1 ;
   5618       NS := MFD(IB,2)|2 ;
   5619       ARG := (R - RAD)/DX ;
   5620       IF ABS(RE(ARG))<8*SIGMA ;
   5621         W := EXP(-SQR(ARG/SIGMA)) ;
   5622         IF     IB=2 ;
   5623           LOOP I 1 4 ;
   5624             W := W+EXP(-SQR((ARG-I)/SIGMA)) ;
   5625             ENDLOOP ;
   5626           ELSEIF IB=NB+1 ;
   5627           LOOP I 1 4 ;
   5628             W := W+EXP(-SQR((ARG+I)/SIGMA)) ;
   5629             ENDLOOP ;
   5630           ENDIF ;
   5631         RES := MFD(IB,3)|1 ;
   5632         LOOP IL 4 NL+1 ;
   5633           ARG := (IL-3)*NS*PHI+MFD(IB,IL)|2 ;
   5634           RES := RES+MFD(IB,IL)|1*SIN(ARG) ;
   5635           ENDLOOP ;
   5636         FOURIERGAUSS := FOURIERGAUSS+RES*W ;
   5637         ENDIF ;
   5638       ENDLOOP ;
   5639     FOURIERGAUSS := FOURIERGAUSS/(SQRT(PI)*SIGMA) ;
   5640     ENDFUNCTION ;
   5641   PROCEDURE POTFLD X S ;
   5642     VARIABLE I 1 ;
   5643     VARIABLE JPOL 1 ;
   5644     VARIABLE JEM 1 ;
   5645     VARIABLE P NM3 ;
   5646     PROCEDURE POFF P H IX IY IS ;
   5647       VARIABLE HF NM3 ;
   5648       VARIABLE HI NM3 ;
   5649       VARIABLE I 1 ;
   5650       VARIABLE POLD NM3 ;
   5651       HF := 1+H*DA(IX) ;
   5652       HI := 1/HF ;
   5653       POLD := P ;
   5654       LOOP I 2 NOC+2 2 ;
   5655         P := POLD - INTEG(IY,INTEG(IY,            HI*( DER(IX,HF*DER(I
                  X,P)) + DER(IS,HI*DER(IS,P)) ) )) ; %INTEG:  255 %INTEG:  25
                  5 %DER:  252 %DER:  252 %DER:  252 %DER:  252
   5656         ENDLOOP ;
   5657       ENDPROCEDURE ;
   5658     PROCEDURE PMFF P L IX IY IS ;
   5659       VARIABLE S NM3 ;
   5660       VARIABLE R2 NM2 ;
   5661       VARIABLE R2N NM2 ;
   5662       VARIABLE K 1 ;
   5663       R2 := DD(IX)*DD(IX)+DD(IY)*DD(IY) ;
   5664       R2N := 1 ;
   5665       S := P ;
   5666       IF L=20 ;
   5667         L:= 0 ;
   5668         ENDIF ;
   5669       LOOP K L+2 NOC+1 2 ;
   5670         S := DER(IS,DER(IS,S))/(L*L-K*K) ; %DER:  252 %DER:  252
   5671         R2N := R2N*R2 ;
   5672         P := P + S*R2N ;
   5673         ENDLOOP ;
   5674       ENDPROCEDURE ;
   5675     PROCEDURE FCCT ;
   5676       VARIABLE ACCT NM1 8 ;
   5677       VARIABLE X2 NM2 ;
   5678       X2 := X(2) ;
   5679       X(2) := 0*X(2) ;
   5680       ACCT(1) := EFX ;
   5681       ACCT(2) := EFY ;
   5682       ACCT(3) := EFZ ;
   5683       ACCT(4) := V ;
   5684       ACCT(5) := BFX ;
   5685       ACCT(6) := BFY ;
   5686       ACCT(7) := BFZ ;
   5687       ACCT(8) := W ;
   5688       POLVAL 1 ACCT 8    X TWOND    ACCT 8 ;
   5689       EFX := ACCT(1) ;
   5690       EFY := ACCT(2) ;
   5691       EFZ := ACCT(3) ;
   5692       V := ACCT(4) ;
   5693       BFX := ACCT(5) ;
   5694       BFY := ACCT(6) ;
   5695       BFZ := ACCT(7) ;
   5696       W := ACCT(8) ;
   5697       X(2) := X2 ;
   5698       ENDPROCEDURE ;
   5699     PROCEDURE INTERP ;
   5700       VARIABLE AC 100 3 ;
   5701       VARIABLE BC 3 3 ;
   5702       FUNCTION POL X P N ;
   5703         VARIABLE I 1 ;
   5704         POL := P(N+1) ;
   5705         LOOP I N 1 -1 ;
   5706           POL := POL*X+P(I) ;
   5707           ENDLOOP ;
   5708         ENDFUNCTION ;
   5709       LOOP I NN 2 -1 ;
   5710         IF S<SN(I) ;
   5711           INP := I-1 ;
   5712           ENDIF ;
   5713         ENDLOOP ;
   5714       P:=POL((2*(S+DD(2))-SN(INP)-SN(INP+1))/(SN(INP+1)-SN(INP)),PN,2*
                  NPG+1); %POL: 5702
   5715       BC(1) := DD(1) ;
   5716       BC(2) := S-SN(INP)+DD(2) ;
   5717       BC(3) := DD(3) ;
   5718       P := 1-P ;
   5719       AC(1) := HN(INP) + 0*DD(2) ;
   5720       AC(2) := VN(INP) + 0*DD(2) ;
   5721       AC(3) := WN(INP) + 0*DD(2) ;
   5722       POLVAL 1 AC 3 BC 3 AC 3 ;
   5723       H :=    AC(1)*P ;
   5724       V :=    AC(2)*P ;
   5725       W :=    AC(3)*P ;
   5726       BC(1) := DD(1) ;
   5727       BC(2) := S-SN(INP+1)+DD(2) ;
   5728       BC(3) := DD(3) ;
   5729       P := 2-P;
   5730       AC(1) := HN(INP+1) + 0*DD(2) ;
   5731       AC(2) := VN(INP+1) + 0*DD(2) ;
   5732       AC(3) := WN(INP+1) + 0*DD(2) ;
   5733       POLVAL 1 AC 3 BC 3 AC 3 ;
   5734       H := (H+AC(1)*P)/2 ;
   5735       V := (V+AC(2)*P)/2 ;
   5736       W := (W+AC(3)*P)/2 ;
   5737       ENDPROCEDURE ;
   5738     FUNCTION ENGEP IMP IEE IEM S ;
   5739       VARIABLE ENGEPP 100 ;
   5740       ENGEP :=       ENGEC(IMP,IEE,IEM,1) + S*(   ENGEC(IMP,IEE,IEM,2)
                                  + S*(   ENGEC(IMP,IEE,IEM,3) + S*(   ENGEC(I
                  MP,IEE,IEM,4)                + S*(   ENGEC(IMP,IEE,IEM,5) + 
                  S*    ENGEC(IMP,IEE,IEM,6))))) ;
   5741       ENGEPP :=      ENGEC(IMP,IEE,IEM,2) + S*( 2*ENGEC(IMP,IEE,IEM,3)
                                  + S*( 3*ENGEC(IMP,IEE,IEM,4) + S*( 4*ENGEC(I
                  MP,IEE,IEM,5)                + S*  5*ENGEC(IMP,IEE,IEM,6) ))
                  ) ;
   5742       IF     ABS(CONS(ENGEP))>30 ;
   5743         ENGEP := 0 ;
   5744         ELSEIF TRUE ;
   5745         ENGEP := EXP(ENGEP) ;
   5746         ENGEP := -ENGEPP/(2+ENGEP+1/ENGEP) ;
   5747         ENDIF ;
   5748       ENDFUNCTION ;
   5749     FUNCTION EDGE X ;
   5750       VARIABLE I 1 ;
   5751       EDGE := 0 ;
   5752       LOOP I 16 8 -1 ;
   5753         EDGE := (EDGE+PPOL(I))*(-X) ;
   5754         ENDLOOP ;
   5755       EDGE := EDGE+PPOL(7) ;
   5756       IF CONS(EDGE)<-60 ;
   5757         EDGE := -60 ;
   5758         ELSEIF CONS(EDGE)>30 ;
   5759         EDGE := 30 ;
   5760         ENDIF ;
   5761       EDGE := 1/(1+EXP(EDGE)) ;
   5762       ENDFUNCTION ;
   5763     PROCEDURE DIST X Z XP ZP XC ZC H D LEV DIS XS ZS IDS ;
   5764       VARIABLE P 10 ;
   5765       VARIABLE SCR 100 ;
   5766       XS := X ;
   5767       ZS := Z ;
   5768       IDS := 0 ;
   5769       IF CONS(H)#0 ;
   5770         P := (X-XC)*(XP-XC)+(Z-ZC)*(ZP-ZC) ;
   5771         IF CONS(P)>0 ;
   5772           SCR := SQRT(SQR(X-XC)+SQR(Z-ZC)) ;
   5773           DIS := SCR - (ABS(CONS(H))/CONS(H))/H ;
   5774           DIS := DIS*H/ABS(H) ;
   5775           IF LEV=0 ;
   5776             IF CONS(DIS)>0 ;
   5777               IF CONS(H)<0 ;
   5778                 SCR := -SCR ;
   5779                 ENDIF ;
   5780               XS := X-DIS*(X-XC)/SCR ;
   5781               ZS := Z-DIS*(Z-ZC)/SCR ;
   5782               IDS := 1 ;
   5783               ENDIF ;
   5784             ENDIF ;
   5785           ELSEIF TRUE ;
   5786           DIS := -100*D ;
   5787           DIS := DIS*H/ABS(H) ;
   5788           ENDIF ;
   5789         ELSEIF TRUE ;
   5790         DIS := (X-XP)*(XP-XC)+(Z-ZP)*(ZP-ZC) ;
   5791         IF LEV=0 ;
   5792           IF CONS(DIS)>0 ;
   5793             XS := X-DIS*(XP-XC) ;
   5794             ZS := Z-DIS*(ZP-ZC) ;
   5795             IDS := 1 ;
   5796             ENDIF ;
   5797           ENDIF ;
   5798         ENDIF ;
   5799       ENDPROCEDURE ;
   5800     PROCEDURE ENGESIDES X Z D LEV IEM XF ZF ENGES ;
   5801       VARIABLE XS 100 ;
   5802       VARIABLE ZS 100 ;
   5803       VARIABLE IDS 1 ;
   5804       VARIABLE DIS1 100 ;
   5805       VARIABLE DIS2 100 ;
   5806       XF := X ;
   5807       ZF := Z ;
   5808       DIST X Z PPOL(5) PPOL(6)  PPOL(7)  PPOL(8)  PPOL(13) D LEV      
                        DIS1 XS ZS IDS ; %DIST: 5763
   5809       IF IDS=1 ;
   5810         XF := XS ;
   5811         ZF := ZS ;
   5812         ENDIF ;
   5813       DIST X Z PPOL(9) PPOL(10) PPOL(11) PPOL(12) PPOL(14) D LEV      
                        DIS2 XS ZS IDS ; %DIST: 5763
   5814       IF IDS=1 ;
   5815         XF := XS ;
   5816         ZF := ZS ;
   5817         ENDIF ;
   5818       ENGES := ENGE(1,1,IEM,DIS1/D/2)*ENGE(1,2,IEM,DIS2/D/2) ; %ENGE: 
                   659 %ENGE:  659
   5819       ENDPROCEDURE ;
   5820     FUNCTION CENT X Z DR PHI0 ;
   5821       VARIABLE PH 1 ;
   5822       IF CONS(X)=0 ;
   5823         PH := 0.5*PI ;
   5824         IF CONS(Z)<0 ;
   5825           PH := -0.5*PI ;
   5826           ENDIF ;
   5827         ELSEIF CONS(X)>0 ;
   5828         PH := ATAN(CONS(Z)/CONS(X)) ;
   5829         ELSEIF TRUE ;
   5830         PH := ATAN(CONS(Z)/CONS(X))+PI ;
   5831         ENDIF ;
   5832       PH := PH-0.5*PHI0 ;
   5833       CENT := PPOL(21)+PH*(PPOL(22)+PH*(PPOL(23)+PH*PPOL(24)))        
                           +DR*(PPOL(25)+PH*(PPOL(26)+PH*(PPOL(27)+PH*PPOL(28)
                  ))) ;
   5834       CENT := CENT+DR*DR*(PPOL(29)+PH*(PPOL(30)+PH*(PPOL(31)+PH*PPOL(3
                  2))))                 +DR*DR*DR*(PPOL(33)+PH*(PPOL(34)+PH*(P
                  POL(35)+PH*PPOL(36)))) ;
   5835       ENDFUNCTION ;
   5836     FUNCTION BENDIST X Z IC ;
   5837       VARIABLE XR0 100 ;
   5838       VARIABLE XR 100 ;
   5839       VARIABLE XRR 100 ;
   5840       VARIABLE I 1 ;
   5841       VARIABLE XF 100 ;
   5842       VARIABLE ZF 100 ;
   5843       VARIABLE ENGES 100 ;
   5844       VARIABLE IEM 1 ;
   5845       IEM := 1 ;
   5846       IF IC<0 ;
   5847         IEM := 2 ;
   5848         ENDIF ;
   5849       ENGESIDES X Z PPOL(4) 0 IEM XF ZF ENGES ; %ENGESIDES: 5800
   5850       XR0 := SQRT(SQR(XF-PPOL(2))+SQR(ZF-PPOL(3)))-ABS(PPOL(2)) ;
   5851       IF IC=2 ;
   5852         BENDIST := CENT(XF-PPOL(2),ZF-PPOL(3),XR0,PPOL(20)) ; %CENT: 5
                  820
   5853         ELSEIF LO(1) ;
   5854         XR := XR0/ABS(PPOL(2)) ;
   5855         XRR := 1 ;
   5856         BENDIST := 1 ;
   5857         LOOP I 1 PPOL(20) ;
   5858           XRR := XRR*XR ;
   5859           BENDIST := BENDIST-PPOL(20+I)*XRR ;
   5860           ENDLOOP ;
   5861         IF IC=-1 ;
   5862           BENDIST := BENDIST*XR0 ;
   5863           ENDIF ;
   5864         ENDIF ;
   5865       BENDIST := BENDIST*PPOL(1)*ENGES ;
   5866       ENDFUNCTION ;
   5867     PROCEDURE POTS ;
   5868       VARIABLE P1 NM3 ;
   5869       VARIABLE IS 1 ;
   5870       VARIABLE SL 1 ;
   5871       V := 0*DD(1) ;
   5872       W := 0*DD(2) ;
   5873       H := 0 ;
   5874       IF NSDP=20 ;
   5875         INTERP ; %INTERP: 5699
   5876         ENDIF ;
   5877       LOOP I 1 NPOL ;
   5878         JPOL := ABS(MPOL(I)) ;
   5879         JEM := (3-MPOL(I)/JPOL)/2 ;
   5880         IF     NSDP=0 ;
   5881           P := PPOL(I) ;
   5882           ELSEIF NSDP=1 ;
   5883           P := PPOL(I)*ENGE(MOD(JPOL,20),1,JEM,-(S+DD(2))/DR/2) ; %ENG
                  E:  659 %MOD:  177
   5884           ELSEIF NSDP=2 ;
   5885           P := PPOL(I)*ENGE(MOD(JPOL,20),2,JEM,(S+DD(2))/DR/2) ; %ENGE
                  :  659 %MOD:  177
   5886           ELSEIF NSDP=3 ;
   5887           P := PPOL(I)*EXP(-SQR((S+DD(2))/DR)) ;
   5888           ELSEIF NSDP=4 ;
   5889           P := PPOL(I)*(S+DD(2)) ;
   5890           ELSEIF NSDP=5 ;
   5891           P := PPOL(I)*(S+DD(2))*ISRT(1+SQR((S+DD(2))/DR)) ;
   5892           ELSEIF NSDP=6 ;
   5893           P :=     LOG(COSH((S+DD(2))/DR+PPOL(2))/COSH((S+DD(2))/DR+PP
                  OL(3))) ;
   5894           P := P + LOG(COSH((S+DD(2))/DR-PPOL(2))/COSH((S+DD(2))/DR-PP
                  OL(3))) ;
   5895           P := P * PPOL(1) ;
   5896           ELSEIF NSDP=7 ;
   5897           P := PPOL(1)*DR*ATAN((S+DD(2))/DR) ;
   5898           ELSEIF NSDP=8 ;
   5899           IF S<0 ;
   5900             P := LOG((1+EXP( 2/DR*(S+DD(2))))/(1+EXP( 2*(S+DD(2)-PPOL(
                  2))/DR)))         -PPOL(2)/DR ;
   5901             ELSEIF S>PPOL(2) ;
   5902             P := LOG((1+EXP(-2/DR*(S+DD(2))))/(1+EXP(-2*(S+DD(2)-PPOL(
                  2))/DR)))         +PPOL(2)/DR ;
   5903             ELSEIF TRUE ;
   5904             P := LOG((1+EXP(-2/DR*(S+DD(2))))/(1+EXP( 2*(S+DD(2)-PPOL(
                  2))/DR)))+         (2*(S+DD(2))-PPOL(2))/DR ;
   5905             ENDIF ;
   5906           P := PPOL(1)*P ;
   5907           ELSEIF NSDP=9 ;
   5908           P :=     (S+DD(2)+PPOL(3))*ATAN((S+DD(2)+PPOL(3))/DR) ;
   5909           P := P + (S+DD(2)-PPOL(3))*ATAN((S+DD(2)-PPOL(3))/DR) ;
   5910           P := P - (S+DD(2)+PPOL(2))*ATAN((S+DD(2)+PPOL(2))/DR) ;
   5911           P := P - (S+DD(2)-PPOL(2))*ATAN((S+DD(2)-PPOL(2))/DR) ;
   5912           P := P * PPOL(1) ;
   5913           ELSEIF NSDP=10 ;
   5914           P := SQRT(SQR(S+DD(2))+SQR(DR))-SQRT(SQR(S+DD(2)-PPOL(2))+SQ
                  R(DR)) ;
   5915           P := P * PPOL(1) ;
   5916           ELSEIF NSDP=11 ;
   5917           P := PPOL(1)*(S+DD(2)) ;
   5918           ELSEIF NSDP=12 ;
   5919           P := GAUSS1(S+DD(2),PPOL(1),PPOL(2),PPOL(3),I,MFD,IS) ; %GAU
                  SS1:  569
   5920           MFP(1) := MFP(1)+IS ;
   5921           ELSEIF NSDP=13 ;
   5922           P1 := SQRT(SQR(S+DD(2))+SQR(PPOL(4))) ;
   5923           P :=     SQR(S+DD(2))*LOG(PPOL(4)+P1) + PPOL(4)*P1 ;
   5924           P1 := SQRT(SQR(S+DD(2))+SQR(PPOL(3))) ;
   5925           P := P - SQR(S+DD(2))*LOG(PPOL(3)+P1) - PPOL(3)*P1 ;
   5926           P1 := SQRT(SQR(S-PPOL(2)+DD(2))+SQR(PPOL(4))) ;
   5927           P := P - SQR(S-PPOL(2)+DD(2))*LOG(PPOL(4)+P1) - PPOL(4)*P1 ;

   5928           P1 := SQRT(SQR(S-PPOL(2)+DD(2))+SQR(PPOL(3))) ;
   5929           P := P + SQR(S-PPOL(2)+DD(2))*LOG(PPOL(3)+P1) + PPOL(3)*P1 ;

   5930           P := P * PPOL(1) ;
   5931           ELSEIF NSDP=14 ;
   5932           P := 0 ;
   5933           LOOP IS 1 PPOL(1) ;
   5934             SL := S-MFD(IS,5) ;
   5935             P1 := SQRT(SQR(SL+DD(2))+SQR(MFD(IS,4))) ;
   5936             P := P+MFD(IS,1)*(SQR(SL+DD(2))*LOG(MFD(IS,4)+P1)+MFD(IS,4
                  )*P1) ;
   5937             P1 := SQRT(SQR(SL+DD(2))+SQR(MFD(IS,3))) ;
   5938             P := P-MFD(IS,1)*(SQR(SL+DD(2))*LOG(MFD(IS,3)+P1)+MFD(IS,3
                  )*P1) ;
   5939             P1 := SQRT(SQR(SL-MFD(IS,2)+DD(2))+SQR(MFD(IS,4))) ;
   5940             P := P-MFD(IS,1)*                (SQR(SL-MFD(IS,2)+DD(2))*
                  LOG(MFD(IS,4)+P1)+MFD(IS,4)*P1) ;
   5941             P1 := SQRT(SQR(SL-MFD(IS,2)+DD(2))+SQR(MFD(IS,3))) ;
   5942             P := P+MFD(IS,1)*                (SQR(SL-MFD(IS,2)+DD(2))*
                  LOG(MFD(IS,3)+P1)+MFD(IS,3)*P1) ;
   5943             ENDLOOP ;
   5944           ELSEIF TRUE ;
   5945           WRITE 6 ' *** ERROR in POTFLD' ;
   5946           QUIT 0 ;
   5947           ENDIF ;
   5948         IF     MPOL(I)=1  ;
   5949           H := H +      P/CHIM1 ;
   5950           ELSEIF MPOL(I)=-1 ;
   5951           H := H + 1000*P/CHIE1 ;
   5952           ENDIF ;
   5953         IF     LOFF=1 ;
   5954           IF     JEM=1 ;
   5955             P := P*PMM(JPOL) ;
   5956             IF NSDP#0 ;
   5957               PMFF P JPOL 1 3 2 ; %PMFF: 5658
   5958               ENDIF ;
   5959             W := W + P ;
   5960             ELSEIF JEM=2 ;
   5961             P := P*PEM(JPOL) ;
   5962             IF NSDP#0 ;
   5963               PMFF P JPOL 1 3 2 ; %PMFF: 5658
   5964               ENDIF ;
   5965             V := V + P ;
   5966             ENDIF ;
   5967           ELSEIF LOFF=2 ;
   5968           IF     JEM=1 ;
   5969             IF JPOL#1 ;
   5970               P := P*DX(JPOL-1) ;
   5971               ENDIF ;
   5972             P := P*DD(3) ;
   5973             W := W + P ;
   5974             ELSEIF JEM=2 ;
   5975             P := P*DX(JPOL) ;
   5976             V := V + P ;
   5977             ENDIF ;
   5978           ENDIF ;
   5979         ENDLOOP ;
   5980       IF LOFF=2 ;
   5981         POFF V H 1 3 2 ; %POFF: 5646
   5982         POFF W H 1 3 2 ; %POFF: 5646
   5983         ENDIF ;
   5984       H := CONS(H) ;
   5985       ENDPROCEDURE ;
   5986     PROCEDURE POTXZ ;
   5987       VARIABLE CPHI 20 ;
   5988       VARIABLE SPHI 20 ;
   5989       PROCEDURE FIELDXZ X Z T V W ;
   5990         VARIABLE F 100 2 ;
   5991         VARIABLE XPP 200 20 ;
   5992         VARIABLE ZZ 100 ;
   5993         VARIABLE XR0 100 ;
   5994         VARIABLE I 1 ;
   5995         VARIABLE J 1 ;
   5996         VARIABLE R 1 ;
   5997         VARIABLE NM 1 ;
   5998         VARIABLE XR 100 ;
   5999         VARIABLE XF 100 ;
   6000         VARIABLE ZF 100 ;
   6001         VARIABLE ENGES 100 ;
   6002         VARIABLE XS 100 ;
   6003         VARIABLE ZS 100 ;
   6004         VARIABLE IDS 1 ;
   6005         VARIABLE DIS1 100 ;
   6006         VARIABLE DIS2 100 ;
   6007         BFY := 0 ;
   6008         V := 0 ;
   6009         IF (NSDP=-1)+(NSDP=-2) ;
   6010           EFX := 0 ;
   6011           EFZ := 0 ;
   6012           XPP(1) := 1 ;
   6013           LOOP I 2 20 ;
   6014             XPP(I) := XPP(I-1)*X ;
   6015             ENDLOOP ;
   6016           LOOP I 1 NPOL ;
   6017             JPOL := ABS(MPOL(I)) ;
   6018             JEM := (3-MPOL(I)/JPOL)/2 ;
   6019             P := XPP(JPOL)*PPOL(I) ;
   6020             ZZ := Z/DR/2 ;
   6021             IF  NSDP=-1 ;
   6022               ZZ := -ZZ ;
   6023               ENDIF ;
   6024             IF     JEM=1 ;
   6025               BFY := BFY + P*ENGE(1,1,JEM,ZZ) ; %ENGE:  659
   6026               ELSEIF JEM=2 ;
   6027               EFX := EFX-1000*P*JPOL*ENGE(1,1,JEM,ZZ) ; %ENGE:  659
   6028               IF NSDP=-1 ;
   6029                 P := -P ;
   6030                 ENDIF ;
   6031               EFZ := EFZ-1000*P*X*ENGEP(1,1,JEM,ZZ)/DR/2 ; %ENGEP: 573
                  8
   6032               ENDIF ;
   6033             ENDLOOP ;
   6034           F(1) :=  CPHI*EFX+SPHI*EFZ+0*DD(1) ;
   6035           F(2) := -SPHI*EFX+CPHI*EFZ+0*DD(1) ;
   6036           POTI F 2 V ; %POTI:  531
   6037           V := - V*.001 ;
   6038           ELSEIF NSDP=-3 ;
   6039           BFY := PPOL(1)*COS((PPOL(2)+PPOL(5)*Z)*Z) ;
   6040           BFY := EDGE(Z/PPOL(3))*EDGE((-Z+PPOL(4))/PPOL(3))*BFY ; %EDG
                  E: 5749 %EDGE: 5749
   6041           ELSEIF NSDP=-4 ;
   6042           IF MFP(2)=1 ;
   6043             MFP(2) := 0 ;
   6044             LOOP I MFP(3) MFP(4) MFP(5) ;
   6045               LOOP J MFP(6) MFP(7) MFP(8) ;
   6046                 WRITE 98 SF(BENDIST(I,J,1),'(G23.16)') ; %SF:  230 %BE
                  NDIST: 5836
   6047                 ENDLOOP ;
   6048               ENDLOOP ;
   6049             CLOSEF 98 ;
   6050             ENDIF ;
   6051           BFY := BENDIST(X,Z,1) ; %BENDIST: 5836
   6052           ELSEIF NSDP=-5 ;
   6053           BFY := GAUSS(X,Z,PPOL(1),PPOL(2),PPOL(3),PPOL(4),PPOL(5),MFD
                  ,J) ; %GAUSS:  596
   6054           MFP(1) := MFP(1)+J ;
   6055           ELSEIF NSDP=-6 ;
   6056           BFY := FOURIERGAUSS(X,Z) ; %FOURIERGAUSS: 5594
   6057           ELSEIF NSDP=-7 ;
   6058           IF MFP(2)=1 ;
   6059             MFP(2) := 0 ;
   6060             LOOP I MFP(3) MFP(4) MFP(5) ;
   6061               LOOP J MFP(6) MFP(7) MFP(8) ;
   6062                 WRITE 98 SF(BENDIST(I,J,2),'(G23.16)') ; %SF:  230 %BE
                  NDIST: 5836
   6063                 ENDLOOP ;
   6064               ENDLOOP ;
   6065             CLOSEF 98 ;
   6066             ENDIF ;
   6067           BFY := BENDIST(X,Z,2) ; %BENDIST: 5836
   6068           ELSEIF NSDP=-8 ;
   6069           IF MFP(2)=1 ;
   6070             MFP(2) := 0 ;
   6071             LOOP I MFP(3) MFP(4) MFP(5) ;
   6072               LOOP J MFP(6) MFP(7) MFP(8) ;
   6073                 WRITE 98 SF(MCSDIST(I,J),'(G23.16)') ; %SF:  230 %MCSD
                  IST: 5511
   6074                 ENDLOOP ;
   6075               ENDLOOP ;
   6076             CLOSEF 98 ;
   6077             ENDIF ;
   6078           BFY := MCSDIST(X,Z) ; %MCSDIST: 5511
   6079           ELSEIF NSDP=-11 ;
   6080           V := BENDIST(X,Z,-1) ; %BENDIST: 5836
   6081           ELSEIF NSDP=-12 ;
   6082           XR0 := SQRT(SQR(X-PPOL(2))+SQR(Z)) ;
   6083           V := PPOL(1)*LOG(-XR0/PPOL(2)) ;
   6084           ELSEIF NSDP=-13 ;
   6085           XR0 := SQRT(SQR(X-PPOL(2))+SQR(Z)) ;
   6086           V := PPOL(1)*(1+PPOL(2)/XR0) ;
   6087           ELSEIF NSDP=-21 ;
   6088           R := PPOL(NPOL+1) ;
   6089           NM := MPOL(NPOL+1) ;
   6090           XF := X ;
   6091           ZF := Z ;
   6092           DIST X Z 0 0 0 1 0 DR 0 DIS1 XS ZS IDS ; %DIST: 5763
   6093           IF IDS=1 ;
   6094             XF := XS ;
   6095             ZF := ZS ;
   6096             ENDIF ;
   6097           DIST X Z PPOL(NPOL+2) PPOL(NPOL+3) PPOL(NPOL+4) PPOL(NPOL+5)
                   0                  DR 0 DIS2 XS ZS IDS ; %DIST: 5763
   6098           IF IDS=1 ;
   6099             XF := XS ;
   6100             ZF := ZS ;
   6101             ENDIF ;
   6102           J := 2 ;
   6103           XR0 := SQRT(SQR(X+R)+SQR(Z))-R ;
   6104           XR := 1 ;
   6105           BFY := PPOL(1) ;
   6106           LOOP I 2 MPOL(NM) ;
   6107             XR := XR*XR0 ;
   6108             IF I=MPOL(J) ;
   6109               BFY := BFY+PPOL(J)*XR ;
   6110               J := J+1 ;
   6111               ENDIF ;
   6112             ENDLOOP ;
   6113           IF MPOL(NPOL+2)=1 ;
   6114             XR0 := SQRT(SQR(XF+R)+SQR(ZF))-R ;
   6115             XR := XR0 ;
   6116             V := 0 ;
   6117             LOOP I 2 ABS(MPOL(NPOL)) ;
   6118               XR := XR*XR0 ;
   6119               IF I=ABS(MPOL(J)) ;
   6120                 ENGES := ENGE(I,1,2,DIS1/DR/2)*ENGE(I,2,2,DIS2/DR/2) ;
                   %ENGE:  659 %ENGE:  659
   6121                 V := V+PPOL(J)*XR*ENGES ;
   6122                 J := J+1 ;
   6123                 ENDIF ;
   6124               ENDLOOP ;
   6125             ENDIF ;
   6126           ELSEIF TRUE ;
   6127           WRITE 6 ' *** ERROR in FIELDXZ' ;
   6128           QUIT 0 ;
   6129           ENDIF ;
   6130         W := BFY*DD(3) ;
   6131         ENDPROCEDURE ;
   6132       CPHI := COS(X(13)) ;
   6133       SPHI := SIN(X(13)) ;
   6134       FIELDXZ X(11)+CPHI*DD(1)-SPHI*DD(2) X(12)+SPHI*DD(1)+CPHI*DD(2) 
                                                                        0  V W
                   ; %FIELDXZ: 5989
   6135       POFF V 0 1 3 2 ; %POFF: 5646
   6136       POFF W 0 1 3 2 ; %POFF: 5646
   6137       ENDPROCEDURE ;
   6138     IF LM=0 ;
   6139       LM := 1 ;
   6140       CO NOC+1 ; %CO:  910
   6141       JPOL := 1 ;
   6142       DX(1) := DD(1) ;
   6143       LOOP I 2 NOC+1 ;
   6144         DX(I) := DX(I-1)*DD(1) ;
   6145         ENDLOOP ;
   6146       LOOP I 1 NOC+1 ;
   6147         P := JPOL*DD(3) ;
   6148         POFF P 0 1 3 2 ; %POFF: 5646
   6149         PMM(I) := P ;
   6150         PEM(I+20) := P ;
   6151         JPOL := JPOL*DD(1) ;
   6152         P := JPOL ;
   6153         POFF P 0 1 3 2 ; %POFF: 5646
   6154         PEM(I) := P ;
   6155         PMM(I+20) := P ;
   6156         ENDLOOP ;
   6157       PEM(20) := 1 ;
   6158       PMM(20) := 1 ;
   6159       CO NOC-1 ; %CO:  910
   6160       ENDIF ;
   6161     CO NOC+1 ; %CO:  910
   6162     IF NSDP>-1 ;
   6163       POTS ; %POTS: 5867
   6164       ELSEIF NSDP<0 ;
   6165       POTXZ ; %POTXZ: 5986
   6166       ENDIF ;
   6167     EFX := -1000*DER(1,V) ; %DER:  252
   6168     EFY := -1000*DER(3,V) ; %DER:  252
   6169     EFZ := -1000*DER(2,V) ; %DER:  252
   6170     BFX :=       DER(1,W) ; %DER:  252
   6171     BFY :=       DER(3,W) ; %DER:  252
   6172     BFZ :=       DER(2,W) ; %DER:  252
   6173     IF NSDP<0 ;
   6174       H := CONS(BFY)/CHIM1-CONS(EFX)/CHIE1 ;
   6175       ENDIF ;
   6176     CO NOC-1 ; %CO:  910
   6177     IF LCCT=1 ;
   6178       FCCT ; %FCCT: 5675
   6179       ENDIF ;
   6180     ENDPROCEDURE ;
   6181   PROCEDURE ODE X S XP ;
   6182     VARIABLE ETA1 NM2                 ;
   6183     VARIABLE P0PZ NM2         ;
   6184     VARIABLE EPG  NM2          ;
   6185     VARIABLE EPHX NM2            ;
   6186     VARIABLE XP5  NM2      ;
   6187     VARIABLE POP0 1 ;
   6188     VARIABLE ETA10 1 ;
   6189     VARIABLE SCR  NM2 ;
   6190     VARIABLE LAMBDA NM2 ;
   6191     VARIABLE SCR0 NM2 ;
   6192     VARIABLE SCR1 NM2 ;
   6193     VARIABLE SCR2 NM2 ;
   6194     VARIABLE SCR3 NM2 ;
   6195     VARIABLE WX NM2 ;
   6196     VARIABLE WY NM2 ;
   6197     VARIABLE WZ NM2 ;
   6198     IF LRP#1 ;
   6199       WRITE 6 ' *** ERROR, call RP before ODE' ;
   6200       QUIT 0 ;
   6201       ENDIF ;
   6202     ETA10 := (1+0.001*CONS(X(15))/CONS(E0))*CONS(ETA) ;
   6203     IF ETA10<1E-10 ;
   6204       WRITE 6 ' *** VOLTAGE TOO HIGH ' ;
   6205       QUIT 0 ;
   6206       ENDIF ;
   6207     POP0 := SQRT((ETA10/CONS(ETA))*((2+ETA10)/(2+CONS(ETA)))) ;
   6208     TP1 := ((1+ETA10)/(1+CONS(ETA)))/CONS(POP0) ;
   6209     CHIM1 := CONS(CHIM)*POP0 ;
   6210     CHIE1 := CONS(CHIE)*POP0/TP1 ;
   6211     POTFLD X S ; %POTFLD: 5641
   6212     XP(11) := -SIN(X(13)) ;
   6213     XP(12) := COS(X(13)) ;
   6214     XP(14) := TP1/CONS(V0) ;
   6215     XP(13) := H ;
   6216     XP(15) := 0.001*CONS(Z0)*CONS(EFZ) ;
   6217     EPHX := 1+H*X(1) ;
   6218     EPG := 1+X(7) ;
   6219     ETA1 := ( 1+X(6) -0.001*(1+X(8))*(CONS(Z0)*(V-CONS(V))-X(15))/CONS
                  (E0) )              *CONS(ETA)/EPG ;
   6220     SCR := SQR(EPG)*(ETA1/CONS(ETA))*((2+ETA1)/(2+CONS(ETA))) ;
   6221     IF LKC=0 ;
   6222       P0PZ := ISRT(SCR-SQR(X(2))-SQR(X(4))) ;
   6223       ELSEIF LKC=1 ;
   6224       P0PZ := ISRT(SCR) ;
   6225       ENDIF ;
   6226     SCR := EPHX*P0PZ ;
   6227     XP5 := EPHX*EPG*((1+ETA1)/(1+CONS(ETA)))*P0PZ ;
   6228     XP(1) := SCR*X(2) ;
   6229     XP(2) := ( EFX/CONS(CHIE)*XP5               + (-BFY +X(4)*P0PZ*BFZ
                  )/CONS(CHIM)*EPHX )*(1+X(8)) + H/P0PZ ;
   6230     IF ND>1 ;
   6231       XP(3) := SCR*X(4) ;
   6232       XP(4) := ( EFY/CONS(CHIE)*XP5               + ( BFX -X(2)*P0PZ*B
                  FZ)/CONS(CHIM)*EPHX )*(1+X(8)) ;
   6233       ENDIF ;
   6234     IF ND>2 ;
   6235       XP(5) := -(XP5-CONS(XP5))*(1+CONS(ETA))/(2+CONS(ETA)) ;
   6236       ENDIF ;
   6237     XP(6) := 0*DD(6) ;
   6238     XP(7) := 0*DD(7) ;
   6239     XP(8) := 0*DD(8) ;
   6240     IF LSPN=1 ;
   6241       SCR1 := -SCR*(1+G0*(1+ETA1))*(1+X(8))/CONS(CHIM) ;
   6242       SCR0 := CONS(ETA)*(2+CONS(ETA))*(1+X(8))/EPG ;
   6243       LAMBDA := SCR*(X(2)*BFX+X(4)*BFY+BFZ/P0PZ)/CONS(CHIM) ;
   6244       SCR2 := SCR0*G0*LAMBDA/(2+ETA1)/EPG ;
   6245       SCR3 := SCR0*(G0+1/(2+ETA1))/(1+CONS(ETA))/CONS(CHIE)*EPHX ;
   6246       WX := SCR1*BFX + SCR2*X(2) + SCR3*(X(4)*P0PZ*EFZ-EFY) ;
   6247       WY := SCR1*BFY + SCR2*X(4) + SCR3*(EFX-X(2)*P0PZ*EFZ) + H ;
   6248       WZ := SCR1*BFZ + SCR2/P0PZ + SCR3*(X(2)*EFY-X(4)*EFX)*P0PZ ;
   6249       XP(21) := -WZ*X(24) + WY*X(27) ;
   6250       XP(22) := -WZ*X(25) + WY*X(28) ;
   6251       XP(23) := -WZ*X(26) + WY*X(29) ;
   6252       XP(24) :=  WZ*X(21) - WX*X(27) ;
   6253       XP(25) :=  WZ*X(22) - WX*X(28) ;
   6254       XP(26) :=  WZ*X(23) - WX*X(29) ;
   6255       XP(27) := -WY*X(21) + WX*X(24) ;
   6256       XP(28) := -WY*X(22) + WX*X(25) ;
   6257       XP(29) := -WY*X(23) + WX*X(26) ;
   6258       ENDIF ;
   6259     ENDPROCEDURE ;
   6260   FUNCTION HAMILTONIAN A V H ;
   6261     PROCEDURE HFULL ;
   6262       VARIABLE ETA NM2 ;
   6263       VARIABLE PREL NM2 ;
   6264       VARIABLE CHIM NM2 ;
   6265       ETA  := ((E0-.001*Z0*V)/M0)/AMUMEV ;
   6266       PREL := SQRT(ETA*(2+ETA)) ;
   6267       CHIM := (AMU*C/Z0/EZERO)*M0*PREL ;
   6268       HAMILTONIAN := A/CONS(CHIM) - (1+H*DD(1))*            SQRT((CHIM
                  /CONS(CHIM))*(CHIM/CONS(CHIM))-DD(2)*DD(2)-DD(4)*DD(4)) ;
   6269       ENDPROCEDURE ;
   6270     IF LRP#1 ;
   6271       WRITE 6 ' *** ERROR, call RP before HAMILTONIAN ' ;
   6272       QUIT 0 ;
   6273       ENDIF ;
   6274     CO NOC+1 ; %CO:  910
   6275     IF ABS(V)=0 ;
   6276       HAMILTONIAN := A/CONS(CHIM) - (1+H*DD(1))*HFAC ;
   6277       ELSEIF TRUE ;
   6278       HFULL ; %HFULL: 6261
   6279       ENDIF ;
   6280     CO NOC-1 ; %CO:  910
   6281     ENDFUNCTION ;
   6282   PROCEDURE RP E M Z ;
   6283     VARIABLE PHI NM1 ;
   6284     VARIABLE I 1 ;
   6285     VARIABLE NOM 1 ;
   6286     IF LOV#1 ;
   6287       WRITE 6 ' *** ERROR, call OV before RP ' ;
   6288       QUIT 0 ;
   6289       ENDIF ;
   6290     LRP := 1 ;
   6291     NOM := NOC ;
   6292     CO NO+1 ; %CO:  910
   6293     E0 := E ;
   6294     M0 := M ;
   6295     Z0 := Z ;
   6296     IF ND=3 ;
   6297       E0 := CONS(E0)*(1+DD(6)) ;
   6298       ENDIF ;
   6299     LOOP I 1 8 ;
   6300       XX(I) := DD(I) ;
   6301       IF I>TWOND ;
   6302         XX(I) := 0*DD(I) ;
   6303         ENDIF ;
   6304       ENDLOOP ;
   6305     XX(6) := (E0-CONS(E0))/CONS(E0) ;
   6306     XX(7) := (M0-CONS(M0))/CONS(M0) ;
   6307     XX(8) := (Z0-CONS(Z0))/CONS(Z0) ;
   6308     XX(21) := 1 ;
   6309     XX(22) := 0 ;
   6310     XX(23) := 0 ;
   6311     XX(24) := 0 ;
   6312     XX(25) := 1 ;
   6313     XX(26) := 0 ;
   6314     XX(27) := 0 ;
   6315     XX(28) := 0 ;
   6316     XX(29) := 1 ;
   6317     ETA   := E0/M0/AMUMEV ;
   6318     PHI := SQRT(ETA*(2+ETA)) ;
   6319     P0 := (AMUMEV*M0)*PHI ;
   6320     V0  := CLIGHT*(PHI/(1+ETA)) ;
   6321     TFAC := ((1+CONS(ETA))/(2+CONS(ETA)))*CONS(V0) ;
   6322     CHIM  := (AMU*CLIGHT/EZERO)*M0/Z0*PHI ;
   6323     CHIE := CHIM*V0 ;
   6324     HFAC := SQRT(SQR(CHIM/CONS(CHIM))-DD(2)*DD(2)-DD(4)*DD(4)) ;
   6325     CO NOM ; %CO:  910
   6326     ENDPROCEDURE ;
   6327   PROCEDURE RPR  CHI M Z ;
   6328     VARIABLE PHI 100 ;
   6329     VARIABLE ETA 100 ;
   6330     VARIABLE NOM 1 ;
   6331     NOM := NOC ;
   6332     RP 1 1 1 ; %RP: 6282
   6333     CO NO+1 ; %CO:  910
   6334     PHI := CHI/(AMU*CLIGHT/EZERO)/M*Z ;
   6335     ETA := SQRT(1+PHI*PHI) - 1 ;
   6336     RP ETA*M*AMUMEV M Z ; %RP: 6282
   6337     CO NOM ; %CO:  910
   6338     ENDPROCEDURE ;
   6339   PROCEDURE RPM  MEVC M Z ;
   6340     RP 1 1 1 ; %RP: 6282
   6341     RPR MEVC*(1E6/CLIGHT)/Z M Z ; %RPR: 6327
   6342     ENDPROCEDURE ;
   6343   PROCEDURE RPP E    ;
   6344     RP E 1.00727646688   1 ; %RP: 6282
   6345     G0 := 1.792847337 ;
   6346     ENDPROCEDURE ;
   6347   PROCEDURE RPE E    ;
   6348     RP E 5.485799110D-4 -1 ; %RP: 6282
   6349     G0 := 0.001159652187 ;
   6350     ENDPROCEDURE ;
   6351   PROCEDURE RPPI E Z ;
   6352     RP E 0.149834758     Z ; %RP: 6282
   6353     G0 := 0 ;
   6354     ENDPROCEDURE ;
   6355   PROCEDURE RPMU E   ;
   6356     RP E 0.1134289168   -1 ; %RP: 6282
   6357     G0 := 0.0011659160 ;
   6358     ENDPROCEDURE ;
   6359   PROCEDURE RPS LS G ;
   6360     LSPN := LS ;
   6361     IF G#0 ;
   6362       G0 := G ;
   6363       ENDIF ;
   6364     ENDPROCEDURE ;
   6365   PROCEDURE RK N X0 X1 Y0 H0 HS H1 EPS BS Z Y1 ERREST ;
   6366     VARIABLE I 1 ;
   6367     VARIABLE J 1 ;
   6368     VARIABLE K 1 ;
   6369     VARIABLE X 1 ;
   6370     VARIABLE H 1;
   6371     VARIABLE RFNORM 1 ;
   6372     VARIABLE HH0 1 ;
   6373     VARIABLE HH1 1 ;
   6374     VARIABLE ISTP 1 ;
   6375     VARIABLE FORM 10 ;
   6376     VARIABLE STR 400 ;
   6377     VARIABLE SCR 1 ;
   6378     PROCEDURE NORM N X AX ;
   6379       VARIABLE I 1 ;
   6380       AX := 0 ;
   6381       LOOP I 1 N ;
   6382         IF TYPE(X(I))=TYPE(DD(1)) ;
   6383           AX := MAX(AX,WABS(X(I),WAF)) ; %MAX:  171 %WABS:  249
   6384           ELSEIF         TRUE ;
   6385           AX := MAX(AX,ABS(X(I))) ; %MAX:  171
   6386           ENDIF ;
   6387         ENDLOOP ;
   6388       ENDPROCEDURE ;
   6389     IF LRKCO=0 ;
   6390       RKCO HSQR A B C D ;
   6391       LRKCO := 1 ;
   6392       ENDIF ;
   6393     OPENF 77 'RKLOG.DAT' 'UNKNOWN' ;
   6394     ISTP := 0 ;
   6395     STR := '# STEP    S                 DS' ;
   6396     IF LRKO>0 ;
   6397       WRITE 6 '## LRKO = '&SI(LRKO)&' ##' ; %SI:  233
   6398       STR := STR&'           POSITION(X,    Z,             Phi,'&     
                                 '           Radius)        By             Ex'
                  &                    '             Ez             Egain' ;
   6399       FORM := '(E15.7)' ;
   6400       ENDIF ;
   6401     WRITE 77 '#RUNGE KUTTA   S1,S2 = '&S(X0)&', '&S(X1)               
                  '#        HMIN,H,HMAX = '&S(H0)&', '&S(HS)&', '&S(H1)       
                          '#             EPS,BS = '&S(EPS)&', '&S(BS)       ST
                  R ; %S:  227 %S:  227 %S:  227 %S:  227 %S:  227 %S:  227 %S
                  :  227
   6402     LOOP I 1 N ;
   6403       Z(I,1) := Y0(I) ;
   6404       Z(I,2) := 0.D0 ;
   6405       ENDLOOP ;
   6406     H := ABS(HS) ;
   6407     HH0 := ABS(H0) ;
   6408     HH1 := ABS(H1) ;
   6409     IF X1-X0<0 ;
   6410       H := -H ;
   6411       HH0 := -HH0 ;
   6412       HH1 := -HH1 ;
   6413       ENDIF ;
   6414     X := X0 ;
   6415     RFNORM := 0 ;
   6416     ERREST := 0 ;
   6417     ISTP := 0 ;
   6418     STR := SF(ISTP,'(I6)')&SF(X,'(E18.10)')&SF(H,'(E13.5)') ; %SF:  23
                  0 %SF:  230 %SF:  230
   6419     IF LRKO>0 ;
   6420       SCR := LEN2(CONS(Z(11,1)),CONS(Z(12,1))) ; %LEN2: 5410
   6421       RKO := SCR&SCR ;
   6422       LOOP I 11 13 ;
   6423         STR := STR&SF(CONS(Z(I,1)),FORM) ; %SF:  230
   6424         ENDLOOP ;
   6425       STR := STR&SF(SCR,FORM)&SF(CONS(BFY),FORM)&SF(CONS(EFX),FORM)&  
                                    SF(CONS(EFZ),FORM)&SF(CONS(Z(15,1)),FORM) 
                  ; %SF:  230 %SF:  230 %SF:  230 %SF:  230 %SF:  230
   6426       ENDIF ;
   6427     WRITE 77 STR ;
   6428     WHILE X#X1 ;
   6429       IF RFNORM#0 ;
   6430         H := H*MIN(4,(EPS/RFNORM)^HSQR) ; %MIN:  174
   6431         ENDIF ;
   6432       IF ABS(H)>ABS(HH1) ;
   6433         H := HH1 ;
   6434         ELSEIF ABS(H)<ABS(HH0)*.99 ;
   6435         H := HH0 ;
   6436         WRITE 6 ' --- WARNING, minimum stepsize reached in RK' ;
   6437         ENDIF ;
   6438       IF (X+H-X1)*H>0 ;
   6439         H := X1-X ;
   6440         ENDIF ;
   6441       ISTP := ISTP + 1 ;
   6442       LOOP J 1 13 ;
   6443         LOOP I 1 N ;
   6444           Y0(I) := 0 ;
   6445           LOOP K 1 J-1 ;
   6446             Y0(I) := Y0(I) + Z(I,K+3)*B(J,K) ;
   6447             ENDLOOP ;
   6448           Y0(I) := H * Y0(I) + Z(I,1) ;
   6449           ENDLOOP ;
   6450         ODE Y0 X+H*A(J) Y1 ; %ODE: 6181
   6451         LOOP I 1 N ;
   6452           Z(I,J+3) := Y1(I) ;
   6453           ENDLOOP ;
   6454         ENDLOOP ;
   6455       LOOP I 1 N ;
   6456         Z(I,2) := 0 ;
   6457         Z(I,3) := 0 ;
   6458         LOOP J 1 13 ;
   6459           Z(I,2) := Z(I,2) + Z(I,J+3)*D(J) ;
   6460           Z(I,3) := Z(I,3) + Z(I,J+3)*C(J) ;
   6461           ENDLOOP ;
   6462         Y1(I) := (Z(I,3)-Z(I,2))*H ;
   6463         Z(I,3) := Z(I,3)*H+Z(I,1) ;
   6464         ENDLOOP ;
   6465       NORM N Y1 RFNORM ; %NORM: 6378
   6466       IF (RFNORM>BS)*(ABS(H/H0)>1.2) ;
   6467         H := H/3 ;
   6468         RFNORM := 0 ;
   6469         ELSEIF TRUE ;
   6470         LOOP I 1 N ;
   6471           Z(I,1) := Z(I,3) ;
   6472           ENDLOOP ;
   6473         X := X + H ;
   6474         STR := SF(ISTP,'(I6)')&SF(X,'(E18.10)')&SF(H,'(E13.5)') ; %SF:
                    230 %SF:  230 %SF:  230
   6475         IF LRKO>0 ;
   6476           SCR := LEN2(CONS(Z(11,1)),CONS(Z(12,1))) ; %LEN2: 5410
   6477           RKO := MIN((RKO|1),SCR)&MAX((RKO|2),SCR) ; %MIN:  174 %MAX: 
                   171
   6478           LOOP I 11 13 ;
   6479             STR := STR&SF(CONS(Z(I,1)),FORM) ; %SF:  230
   6480             ENDLOOP ;
   6481           STR := STR&SF(SCR,FORM)&SF(CONS(BFY),FORM)&SF(CONS(EFX),FORM
                  )&                          SF(CONS(EFZ),FORM)&SF(CONS(Z(15,
                  1)),FORM) ; %SF:  230 %SF:  230 %SF:  230 %SF:  230 %SF:  23
                  0
   6482           ENDIF ;
   6483         WRITE 77 STR ;
   6484         ERREST := ERREST + RFNORM ;
   6485         ENDIF ;
   6486       ENDWHILE ;
   6487     WRITE 77 '#ERROR ESTIMATE '&S(ERREST) ; %S:  227
   6488     LOOP I 1 N ;
   6489       Y1(I) := Z(I,1) ;
   6490       ENDLOOP ;
   6491     CLOSEF 77 ;
   6492     IF LRKO>0 ;
   6493       OS 'cp RKLOG.DAT RKLOG'&SI(LRKO)&'.DAT' ; %SI:  233
   6494       LRKO := LRKO+1 ;
   6495       ENDIF ;
   6496     ENDPROCEDURE ;
   6497   PROCEDURE DLACT ARR L ;
   6498     VARIABLE LP0PZ NM1 ;
   6499     LP0PZ := CONS(ETA) ;
   6500     LP0PZ := (1+ARR(6))*( 2*(1+ARR(7))+(1+ARR(6))*LP0PZ )/(2+LP0PZ) ;
   6501     IF LKC=0 ;
   6502       LP0PZ := L*ISRT(LP0PZ-SQR(ARR(2))-SQR(ARR(4))) ;
   6503       ELSEIF LKC=1 ;
   6504       LP0PZ := L*ISRT(LP0PZ) ;
   6505       ENDIF ;
   6506     ARR(1) := ARR(1) + LP0PZ*ARR(2) ;
   6507     IF ND>1 ;
   6508       ARR(3) := ARR(3) + LP0PZ*ARR(4) ;
   6509       ENDIF ;
   6510     IF ND>2 ;
   6511       LP0PZ := (1+ARR(7)+(1+ARR(6))*CONS(ETA))*LP0PZ/(1+CONS(ETA))-   
                        L ;
   6512       ARR(5) := ARR(5) - LP0PZ*(1+CONS(ETA))/(2+CONS(ETA)) ;
   6513       ENDIF ;
   6514     ENDPROCEDURE ;
   6515   PROCEDURE DL L ;
   6516     IF LUM#1 ;
   6517       WRITE 6 ' *** ERROR, call UM before DL' ;
   6518       QUIT 0 ;
   6519       ENDIF ;
   6520     DLACT MAP L ; %DLACT: 6497
   6521     UMS ; %UMS: 1414
   6522     DLACT MSC L ; %DLACT: 6497
   6523     LOCSET 0 L 0 L 0 0 ; %LOCSET: 1059
   6524     DR := 0 ;
   6525     UPDATE 0 1 ; %UPDATE: 1206
   6526     ENDPROCEDURE ;
   6527   PROCEDURE PS D ;
   6528     DR := D ;
   6529     LOCSET 0 0 0 0 0 0 ; %LOCSET: 1059
   6530     UPDATE 0 0 ; %UPDATE: 1206
   6531     ENDPROCEDURE ;
   6532   PROCEDURE SDELE S1 S2 H1 H2 H3 D ;
   6533     VARIABLE ERREST 1 ;
   6534     VARIABLE I 1 ;
   6535     VARIABLE J 1 ;
   6536     VARIABLE EE0 1 ;
   6537     VARIABLE PP0 1 ;
   6538     VARIABLE TFAC0 1 ;
   6539     VARIABLE RKSCR NM2 29 16 ;
   6540     VARIABLE MMP NM2 29 ;
   6541     VARIABLE MMQ NM2 29 ;
   6542     LCCT := 1 ;
   6543     DR := D ;
   6544     IF LUM#1 ;
   6545       WRITE 6 ' *** ERROR, call UM before element' ;
   6546       QUIT 0 ;
   6547       ENDIF ;
   6548     LOOP I 1 8 ;
   6549       MMP(I) := XX(I) ;
   6550       ENDLOOP ;
   6551     LOOP I 9 29 ;
   6552       MMP(I) := 0 ;
   6553       ENDLOOP ;
   6554     LOOP I 21 29 4 ;
   6555       MMP(I) := 1 ;
   6556       ENDLOOP ;
   6557     MMP(11) := XLOC ;
   6558     MMP(12) := ZLOC ;
   6559     MMP(13) := PLOC ;
   6560     MMP(14) := TLOC ;
   6561     MMP(15) := VLOC ;
   6562     RK 29 CONS(S1) CONS(S2) MMP CONS(H1) CONS(H2) CONS(H3) EPS EPS*20 
                  RKSCR            MMQ ERREST ; %RK: 6365
   6563     LOOP I 1 8 ;
   6564       MSC(I) := MMQ(I) ;
   6565       ENDLOOP ;
   6566     LOOP I 1 3 ;
   6567       LOOP J 1 3 ;
   6568         SSCR(I,J) := MMQ((I-1)*3+J+20) ;
   6569         ENDLOOP ;
   6570       ENDLOOP ;
   6571     LOCSET MMQ(11) MMQ(12) MMQ(13) S2-S1 MMQ(15) MMQ(14) ; %LOCSET: 10
                  59
   6572     IF NSDP>-1 ;
   6573       IF VLOC#0 ;
   6574         PP0 := CONS(P0) ;
   6575         EE0 := CONS(E0) ;
   6576         TFAC0 := TFAC ;
   6577         RP E0+VLOC*.001 M0 Z0 ; %RP: 6282
   6578         VLOC := 0 ;
   6579         MSC(2) := MSC(2)*(PP0/CONS(P0)) ;
   6580         IF ND>1 ;
   6581           MSC(4) := MSC(4)*(PP0/CONS(P0)) ;
   6582           ENDIF ;
   6583         IF ND>2 ;
   6584           MSC(5) := MSC(5)*(TFAC/TFAC0) ;
   6585           MSC(6) := MSC(6)*(EE0/CONS(E0)) ;
   6586           ENDIF ;
   6587         ENDIF ;
   6588       ENDIF ;
   6589     ENDPROCEDURE ;
   6590   PROCEDURE SDELEREF S1 S2 H1 H2 H3 D ;
   6591     VARIABLE RKSCR 1 29 16 ;
   6592     VARIABLE MMP 1 29 ;
   6593     VARIABLE MMQ 1 29 ;
   6594     VARIABLE ERREST 1 ;
   6595     VARIABLE I 1 ;
   6596     VARIABLE LSPNO 1 ;
   6597     LSPNO := LSPN ;
   6598     LSPN := 0 ;
   6599     LCCT := 1 ;
   6600     DR := D ;
   6601     LOOP I 1 8 ;
   6602       MMP(I) := 0*XX(I) ;
   6603       ENDLOOP ;
   6604     LOOP I 9 29 ;
   6605       MMP(I) := 0 ;
   6606       ENDLOOP ;
   6607     MMP(11) := XLOC ;
   6608     MMP(12) := ZLOC ;
   6609     MMP(13) := PLOC ;
   6610     MMP(14) := TLOC ;
   6611     MMP(15) := VLOC ;
   6612     RK 29 CONS(S1) CONS(S2) MMP CONS(H1) CONS(H2) CONS(H3) EPS EPS*20 
                  RKSCR            MMQ ERREST ; %RK: 6365
   6613     LOCSET MMQ(11) MMQ(12) MMQ(13) S2 MMQ(15) MMQ(14) ; %LOCSET: 1059
   6614     LSPN := LSPNO ;
   6615     ENDPROCEDURE ;
   6616   PROCEDURE DSDED LDL L H1 H2 H3 D ;
   6617     VARIABLE MS NM1 MAX(8,NV) ; %MAX:  171
   6618     VARIABLE SM NM2 3 3 ;
   6619     VARIABLE SCE 1 ;
   6620     SCE := 2E-5 ;
   6621     UMS ; %UMS: 1414
   6622     DLACT MSC -LDL ; %DLACT: 6497
   6623     SNM MSC MS ; %SNM: 1476
   6624     SSNM SSCR SM ; %SSNM: 1491
   6625     LOCSET 0 -LDL 0 -LDL 0 0 ; %LOCSET: 1059
   6626     SDELE -LDL L+LDL H1 H2 H3 D ; %SDELE: 6532
   6627     UPDATEMAP MSC MS MSC SSCR SM SSCR ; %UPDATEMAP: 1170
   6628     DLACT MSC -LDL ; %DLACT: 6497
   6629     IF L<1E-5 ;
   6630       LOCSET 0 L 0 L+SCE 0 0 ; %LOCSET: 1059
   6631       UPDATE 1 1 ; %UPDATE: 1206
   6632       SPOS := SPOS-SCE ;
   6633       ELSEIF LO(1) ;
   6634       LOCSET 0 L 0 L 0 0 ; %LOCSET: 1059
   6635       UPDATE 1 1 ; %UPDATE: 1206
   6636       ENDIF ;
   6637     ENDPROCEDURE ;
   6638   PROCEDURE SIELE L D ;
   6639     VARIABLE XP NM2 29 ;
   6640     VARIABLE I 1 ;
   6641     VARIABLE RES NM1 ;
   6642     PROCEDURE SPNFLO ;
   6643       VARIABLE J 1 ;
   6644       VARIABLE K 1 ;
   6645       VARIABLE N 1 ;
   6646       VARIABLE VN NM2 3 3 ;
   6647       VARIABLE VNP NM2 3 3 ;
   6648       VARIABLE W NM2 3 3 ;
   6649       VARIABLE VNIJ NM2 ;
   6650       RES := 1 ;
   6651       N := 0 ;
   6652       LOOP I 1 3 ;
   6653         LOOP J 1 3 ;
   6654           W(I,J) := XP(3*(I-1)+J+20)*L ;
   6655           SSCR(I,J) := 0 ;
   6656           VNP(I,J) := 0 ;
   6657           ENDLOOP ;
   6658         VNP(I,I) := 1 ;
   6659         SSCR(I,I) := 1 ;
   6660         ENDLOOP ;
   6661       WHILE RES#0 ;
   6662         N := N+1 ;
   6663         RES := 0 ;
   6664         LOOP I 1 3 ;
   6665           LOOP J 1 3 ;
   6666             VNIJ := 0 ;
   6667             LOOP K 1 TWOND ;
   6668               VNIJ := VNIJ + XP(K)*DER(K,VNP(I,J)) ; %DER:  252
   6669               ENDLOOP ;
   6670             LOOP K 1 3 ;
   6671               VNIJ := VNIJ + W(K,J)*VNP(I,K) ;
   6672               ENDLOOP ;
   6673             RES := RES + ABS(VNIJ) ;
   6674             VN(I,J) := VNIJ/N ;
   6675             SSCR(I,J) := SSCR(I,J) + VN(I,J) ;
   6676             ENDLOOP ;
   6677           ENDLOOP ;
   6678         LOOP I 1 3 ;
   6679           LOOP J 1 3 ;
   6680             VNP(I,J) := VN(I,J) ;
   6681             ENDLOOP ;
   6682           ENDLOOP ;
   6683         IF N>200 ;
   6684           WRITE 6 ' $$$ ERROR in SPNFLO, no convergence ' ;
   6685           QUIT 0 ;
   6686           ENDIF ;
   6687         ENDWHILE ;
   6688       ENDPROCEDURE ;
   6689     IF LUM#1 ;
   6690       WRITE 6 ' *** ERROR, call UM before element' ;
   6691       QUIT 0 ;
   6692       ENDIF ;
   6693     DR := D ;
   6694     NSDP := 0 ;
   6695     LCCT := 0 ;
   6696     ODE XX 0 XP ; %ODE: 6181
   6697     LOOP I 1 TWOND ;
   6698       XP(I) := XP(I)*L ;
   6699       ENDLOOP ;
   6700     LOOP I 1 TWOND ;
   6701       DAFLO XP DD(I) RES TWOND ;
   6702       MSC(I) := RES ;
   6703       ENDLOOP ;
   6704     IF LSPN=1 ;
   6705       SPNFLO ; %SPNFLO: 6642
   6706       ENDIF ;
   6707     ENDPROCEDURE ;
   6708   PROCEDURE SYSCLM IAP L0 B0 D0 AA FF LL ;
   6709     VARIABLE FAC NM1 21 ;
   6710     VARIABLE MAG NM1 ;
   6711     VARIABLE I 1 ;
   6712     VARIABLE C 1 TWOND ;
   6713     VARIABLE LIN 2 ;
   6714     VARIABLE P NM1 ;
   6715     VARIABLE PR 1 ;
   6716     VARIABLE COP NM1 NV ;
   6717     VARIABLE BT 100 ;
   6718     VARIABLE J 1 ;
   6719     VARIABLE EP NM1 ;
   6720     VARIABLE MP NM1 ;
   6721     VARIABLE ZP NM1 ;
   6722     VARIABLE KD NM1 NV ;
   6723     VARIABLE F NM1 ;
   6724     FUNCTION PE E M ;
   6725       PE := SQRT(E*(E+2*AMUMEV*M)) ;
   6726       ENDFUNCTION ;
   6727     IF (CONS(B0)=0)+(CONS(Z0)=0) ;
   6728       LOOP I 1 NV ;
   6729         IAP(I) := XX(I) ;
   6730         ENDLOOP ;
   6731       DLACT IAP L0 ; %DLACT: 6497
   6732       ELSEIF TRUE ;
   6733       EP := E0 ;
   6734       MP := M0 ;
   6735       ZP := Z0 ;
   6736       I := CONS(P0)/CONS(B0)/CONS(Z0)/CONS(D0) ;
   6737       J := PE(AA(4),AA(5))/        AA(2)/AA(6)/AA(3) ; %PE: 6724
   6738       IF ABS(I)>100*ABS(J) ;
   6739         LOOP I 1 NV ;
   6740           IAP(I) := XX(I) ;
   6741           ENDLOOP ;
   6742         DLACT IAP L0 ; %DLACT: 6497
   6743         ELSEIF TRUE ;
   6744         IF ABS(I)*100<ABS(J) ;
   6745           WRITE 6 (' --- WARNING in SYSCLM,'&             ' large devi
                  ation from scaling map: '&S(ABS((I-J)/(I+J)))) ; %S:  227
   6746           ENDIF;
   6747         MAG := D0/AA(3) ;
   6748         PR := PE(AA(4),AA(5)) ; %PE: 6724
   6749         BT := PR/PE(CONS(E0),CONS(M0)) ; %PE: 6724
   6750         LIN := (ND<3)*(NV#TWOND) ;
   6751         IF LIN ;
   6752           BT := BT*CONS(Z0)/AA(6)*CONS(MAG)*CONS(B0)*PARA(1) ; %PARA: 
                   989
   6753           ELSEIF TRUE ;
   6754           BT := BT*Z0/AA(6)*MAG*B0 ;
   6755           ENDIF ;
   6756         FAC(1) := BT/AA(2)-1 ;
   6757         LOOP I 2 AA(8) ;
   6758           FAC(I) := FAC(I-1)*FAC(1) ;
   6759           ENDLOOP ;
   6760         CO NOC+1 ; %CO:  910
   6761         F := FF(1) ;
   6762         P := LL(1) ;
   6763         LOOP I 1 AA(8) ;
   6764           F := F + FF(I+1)*FAC(I) ;
   6765           P := P + LL(I+1)*FAC(I) ;
   6766           ENDLOOP ;
   6767         CO NOC-1 ; %CO:  910
   6768         GFM IAP F AA(7) ; %GFM: 3259
   6769         LOOP I 1 TWOND ;
   6770           C(I) := 0 ;
   6771           ENDLOOP ;
   6772         IF LFR=1.9 ;
   6773           LOOP I 1 TWOND ;
   6774             IAP(I) := DD(I) ;
   6775             ENDLOOP ;
   6776           ENDIF ;
   6777         LFM IAP C IAP P -1 ; %LFM: 3010
   6778         RP AA(4) AA(5) AA(6) ; %RP: 6282
   6779         CATR IAP IAP AA(1) ; %CATR: 1602
   6780         LOOP I 1 NV ;
   6781           COP(I) := DD(I) ;
   6782           ENDLOOP ;
   6783         LOOP I 1 TWOND 2 ;
   6784           COP(I) := DD(I)/MAG ;
   6785           ENDLOOP ;
   6786         POLVAL 1 IAP TWOND COP NV IAP TWOND ;
   6787         LOOP I 1 TWOND 2 ;
   6788           IAP(I) := MAG*IAP(I) ;
   6789           ENDLOOP ;
   6790         IF LIN ;
   6791           RP CONS(EP) CONS(MP) CONS(ZP) ; %RP: 6282
   6792           ELSEIF TRUE ;
   6793           RP EP MP ZP ; %RP: 6282
   6794           ENDIF ;
   6795         IF LFR<0 ;
   6796           TRCA IAP IAP 0 ; %TRCA: 1649
   6797           ELSEIF TRUE ;
   6798           TRCA IAP IAP L0 ; %TRCA: 1649
   6799           ENDIF ;
   6800         IF LIN ;
   6801           RP EP MP ZP ; %RP: 6282
   6802           BDEP IAP L0 1 ; %BDEP: 3419
   6803           ENDIF ;
   6804         ENDIF ;
   6805       ENDIF ;
   6806     ENDPROCEDURE ;
   6807   PROCEDURE RSM IU L0 B0 D0 ;
   6808     VARIABLE FF NM1 10 ;
   6809     VARIABLE LL NM1 10 ;
   6810     VARIABLE AA 1 10 ;
   6811     SYSCFL IU AA FF LL -1 ; %SYSCFL: 5303
   6812     SYSCLM MSC L0 B0 D0 AA FF LL ; %SYSCLM: 6708
   6813     LOCSET 0 L0 0 L0 0 0 ; %LOCSET: 1059
   6814     UPDATE 1 1 ; %UPDATE: 1206
   6815     ENDPROCEDURE ;
   6816   PROCEDURE FFELE L D H LF1 LF2 CI ;
   6817     VARIABLE MS NM1 MAX(8,NV) ; %MAX:  171
   6818     VARIABLE SM NM2 3 3 ;
   6819     VARIABLE LLPI 1 ;
   6820     VARIABLE I 1 ;
   6821     VARIABLE J 1 ;
   6822     PROCEDURE SYSCFF IE ;
   6823       VARIABLE FF NM1 10 ;
   6824       VARIABLE LL NM1 10 ;
   6825       VARIABLE AA 1 10 ;
   6826       VARIABLE NAP NM1 MAX(8,NV) ; %MAX:  171
   6827       VARIABLE B0 5 ;
   6828       UMS ; %UMS: 1414
   6829       LOOP I 1 MIN(6,NPOL) ; %MIN:  174
   6830         B0 := SIG(PPOL(I)*CONS(Z0))*PPOL(I) ; %SIG:  180
   6831         LOOP J 2 MOD(MPOL(I),20) ; %MOD:  177
   6832           B0 := B0*D ;
   6833           ENDLOOP ;
   6834         CO NOC+1 ; %CO:  910
   6835         LOOP J 1 10 ;
   6836           FF(J) :=   GFF2(IE,MOD(MPOL(I),20),J) ; %MOD:  177
   6837           LL(J) :=   LFF2(IE,MOD(MPOL(I),20),J) ; %MOD:  177
   6838           AA(J) := DATFF2(IE,MOD(MPOL(I),20),J) ; %MOD:  177
   6839           ENDLOOP ;
   6840         CO NOC-1 ; %CO:  910
   6841         SYSCLM NAP 0 B0 D AA FF LL ; %SYSCLM: 6708
   6842         IF CONS(PPOL(I)*Z0)<0 ;
   6843           MT NAP NAP 180/MOD(MPOL(I),20) ; %MT: 1098 %MOD:  177
   6844           ENDIF ;
   6845         ANM NAP MSC MSC ; %ANM: 1508
   6846         ENDLOOP ;
   6847       ENDPROCEDURE ;
   6848     CE := CI ;
   6849     DR := D ;
   6850     IF LFR=0 ;
   6851       SIELE L D ; %SIELE: 6638
   6852       IF H=0 ;
   6853         LOCSET 0 L 0 L 0 0 ; %LOCSET: 1059
   6854         ELSEIF H#0 ;
   6855         LOCSET (COS(H*L)-1)/H SIN(H*L)/H H*L L 0 0 ; %LOCSET: 1059
   6856         ENDIF ;
   6857       UPDATE 1 1 ; %UPDATE: 1206
   6858       ELSEIF LFR=1 ;
   6859       UMS ; %UMS: 1414
   6860       DLACT MSC -4*D ; %DLACT: 6497
   6861       SNM MSC MS ; %SNM: 1476
   6862       SSNM SSCR SM ; %SSNM: 1491
   6863       LOCSET 0 -4*D 0 -4*D 0 0 ; %LOCSET: 1059
   6864       NSDP := LF1 ;
   6865       SDELE -4*D 0 4*D 4*D 4*D D ; %SDELE: 6532
   6866       UPDATEMAP MSC MS MS SSCR SM SM ; %UPDATEMAP: 1170
   6867       SDELE  0 2*D 2*D 2*D 2*D D ; %SDELE: 6532
   6868       UPDATEMAP MSC MS MS SSCR SM SM ; %UPDATEMAP: 1170
   6869       SIELE L-4*D D ; %SIELE: 6638
   6870       UPDATEMAP MSC MS MS SSCR SM SM ; %UPDATEMAP: 1170
   6871       NSDP := LF2 ;
   6872       IF H=0 ;
   6873         LOCSET 0 -2*D 0 -2*D 0 0 ; %LOCSET: 1059
   6874         ELSEIF H#0 ;
   6875         LOCSET (COS(2*H*D)-1)/H -SIN(2*H*D)/H -2*H*D -2*D 0 0 ; %LOCSE
                  T: 1059
   6876         ENDIF ;
   6877       SDELE -2*D 0 2*D 2*D 2*D D ; %SDELE: 6532
   6878       UPDATEMAP MSC MS MS SSCR SM SM ; %UPDATEMAP: 1170
   6879       SDELE 0 4*D 4*D 4*D 4*D D ; %SDELE: 6532
   6880       UPDATEMAP MSC MS MSC SSCR SM SSCR ; %UPDATEMAP: 1170
   6881       DLACT MSC -4*D ; %DLACT: 6497
   6882       IF H=0 ;
   6883         LOCSET 0 L 0 L 0 0 ; %LOCSET: 1059
   6884         ELSEIF H#0 ;
   6885         LOCSET (COS(H*L)-1)/H SIN(H*L)/H H*L L 0 0 ; %LOCSET: 1059
   6886         ENDIF ;
   6887       UPDATE 1 1 ; %UPDATE: 1206
   6888       ELSEIF (LFR=1.9)+(LFR=2) ;
   6889       IF SS(CE,1,1)#'M' ; %SS:  221
   6890         WRITE 6            ' *** ERROR, FR 2 or 1.9 with non magnetic 
                  element' ;
   6891         QUIT 0 ;
   6892         ENDIF ;
   6893       J := 0 ;
   6894       LOOP I 1 NPOL ;
   6895         J := MAX(J,MOD(MPOL(I),20)) ; %MAX:  171 %MOD:  177
   6896         ENDLOOP ;
   6897       IF J>6 ;
   6898         WRITE 6            ' --- WARNING, MPOL>6 for LFR='&SF(LFR,'(F3
                  .1)') ; %SF:  230
   6899         ENDIF ;
   6900       SYSCFF 1 ; %SYSCFF: 6822
   6901       SNM MSC MS ; %SNM: 1476
   6902       SSNM SSCR SM ; %SSNM: 1491
   6903       SIELE L D ; %SIELE: 6638
   6904       UPDATEMAP MSC MS MS SSCR SM SM ; %UPDATEMAP: 1170
   6905       SYSCFF 2 ; %SYSCFF: 6822
   6906       UPDATEMAP MSC MS MSC SSCR SM SSCR ; %UPDATEMAP: 1170
   6907       IF H=0 ;
   6908         LOCSET 0 L 0 L 0 0 ; %LOCSET: 1059
   6909         ELSEIF H#0 ;
   6910         LOCSET (COS(H*L)-1)/H SIN(H*L)/H H*L L 0 0 ; %LOCSET: 1059
   6911         ENDIF ;
   6912       UPDATE 1 1 ; %UPDATE: 1206
   6913       ELSEIF (LFR=3)+(LFR=2.5) ;
   6914       UMS ; %UMS: 1414
   6915       DLACT MSC -8*D ; %DLACT: 6497
   6916       SNM MSC MS ; %SNM: 1476
   6917       SSNM SSCR SM ; %SSNM: 1491
   6918       LOCSET 0 -8*D 0 -8*D 0 0 ; %LOCSET: 1059
   6919       NSDP := LF1 ;
   6920       SDELE -8*D 6*D D/200 D 7*D D ; %SDELE: 6532
   6921       UPDATEMAP MSC MS MS SSCR SM SM ; %UPDATEMAP: 1170
   6922       SIELE L-12*D D ; %SIELE: 6638
   6923       UPDATEMAP MSC MS MS SSCR SM SM ; %UPDATEMAP: 1170
   6924       NSDP := LF2 ;
   6925       IF H=0 ;
   6926         LOCSET 0 -6*D 0 -6*D 0 0 ; %LOCSET: 1059
   6927         ELSEIF H#0 ;
   6928         LOCSET (COS(6*H*D)-1)/H -SIN(6*H*D)/H -6*H*D -6*D 0 0 ; %LOCSE
                  T: 1059
   6929         ENDIF ;
   6930       SDELE -6*D 8*D D/200 D 7*D D ; %SDELE: 6532
   6931       UPDATEMAP MSC MS MSC SSCR SM SSCR ; %UPDATEMAP: 1170
   6932       DLACT MSC -8*D ; %DLACT: 6497
   6933       IF H=0 ;
   6934         LOCSET 0 L 0 L 0 0 ; %LOCSET: 1059
   6935         ELSEIF H#0 ;
   6936         LOCSET (COS(H*L)-1)/H SIN(H*L)/H H*L L 0 0 ; %LOCSET: 1059
   6937         ENDIF ;
   6938       UPDATE 1 1 ; %UPDATE: 1206
   6939       ELSEIF LFR=-1 ;
   6940       UMS ; %UMS: 1414
   6941       DLACT MSC -8*D ; %DLACT: 6497
   6942       SNM MSC MS ; %SNM: 1476
   6943       SSNM SSCR SM ; %SSNM: 1491
   6944       LOCSET 0 -8*D 0 -8*D 0 0 ; %LOCSET: 1059
   6945       NSDP := LF1 ;
   6946       SDELE -8*D 6*D D/200 D 7*D D ; %SDELE: 6532
   6947       UPDATEMAP MSC MS MS SSCR SM SM ; %UPDATEMAP: 1170
   6948       SIELE -6*D D ; %SIELE: 6638
   6949       UPDATEMAP MSC MS MSC SSCR SM SSCR ; %UPDATEMAP: 1170
   6950       LOCSET 0 0 0 0 0 0 ; %LOCSET: 1059
   6951       LLPI := LPI ;
   6952       LPI := 0 ;
   6953       UPDATE 1 1 ; %UPDATE: 1206
   6954       LPI := LLPI ;
   6955       ELSEIF LFR=-2 ;
   6956       SIELE -6*D D ; %SIELE: 6638
   6957       SNM MSC MS ; %SNM: 1476
   6958       SSNM SSCR SM ; %SSNM: 1491
   6959       NSDP := LF2 ;
   6960       IF H=0 ;
   6961         LOCSET 0 -6*D 0 -6*D 0 0 ; %LOCSET: 1059
   6962         ELSEIF H#0 ;
   6963         LOCSET (COS(6*H*D)-1)/H -SIN(6*H*D)/H -6*H*D -6*D 0 0 ; %LOCSE
                  T: 1059
   6964         ENDIF ;
   6965       SDELE -6*D 8*D D/200 D 7*D D ; %SDELE: 6532
   6966       UPDATEMAP MSC MS MSC SSCR SM SSCR ; %UPDATEMAP: 1170
   6967       DLACT MSC -8*D ; %DLACT: 6497
   6968       LOCSET 0 0 0 0 0 0 ; %LOCSET: 1059
   6969       LLPI := LPI ;
   6970       LPI := 0 ;
   6971       UPDATE 1 1 ; %UPDATE: 1206
   6972       LPI := LLPI ;
   6973       ELSEIF LFR=-10 ;
   6974       LOCSET 0 0 0 0 0 0 ; %LOCSET: 1059
   6975       SDELE 0 L D/200 D 7*D D ; %SDELE: 6532
   6976       UPDATE 1 1 ; %UPDATE: 1206
   6977       ELSEIF TRUE ;
   6978       WRITE 6 ' *** ERROR, wrong fringe field ID' ;
   6979       QUIT 0 ;
   6980       ENDIF ;
   6981     ENDPROCEDURE ;
   6982   PROCEDURE CB ;
   6983     VARIABLE I 1 ;
   6984     IF LUM=0 ;
   6985       WRITE 6 ' *** ERROR, call UM before CB' ;
   6986       QUIT 0 ;
   6987       ENDIF ;
   6988     MAP(1) := -MAP(1) ;
   6989     MAP(2) := -MAP(2) ;
   6990     RAY(1) := -RAY(1) ;
   6991     RAY(2) := -RAY(2) ;
   6992     RSC(1) := -RSC(1) ;
   6993     RSC(2) := -RSC(2) ;
   6994     IF LSPN=1 ;
   6995       LOOP I 1 3 ;
   6996         SPNR(1,I) := -SPNR(1,I) ;
   6997         ENDLOOP ;
   6998       SPI(1) := -SPI(1) ;
   6999       SSC(1) := -SSC(1) ;
   7000       ENDIF ;
   7001     LCB := -LCB ;
   7002     ENDPROCEDURE ;
   7003   PROCEDURE GE N M S H V W ;
   7004     VARIABLE I 1 ;
   7005     VARIABLE S1 1 ;
   7006     VARIABLE S2 1 ;
   7007     CO NOC+1 ; %CO:  910
   7008     NSDP := 20 ;
   7009     IF M<NOC ;
   7010       WRITE 6 ' --- WARNING in GE, M < calculation order' ;
   7011       ENDIF ;
   7012     INTPOL PN M ;
   7013     LOOP I 1 N ;
   7014       SN(I) := S(I) ;
   7015       HN(I) := H(I) ;
   7016       VN(I) := V(I) ;
   7017       WN(I) := W(I) ;
   7018       ENDLOOP ;
   7019     INP := 1 ;
   7020     NN := N ;
   7021     NPOL := 0 ;
   7022     NPG := M ;
   7023     S1 := CONS(S(1)) ;
   7024     S2 := CONS(S(N)) ;
   7025     LOCSET 0 0 0 0 0 0 ; %LOCSET: 1059
   7026     CE := 'GE' ;
   7027     LOFF := 2 ;
   7028     SDELE S1 S2 (S2-S1)/100 (S2-S1)/10 (S2-S1) .1 ; %SDELE: 6532
   7029     UPDATE 1 1 ; %UPDATE: 1206
   7030     CO NOC-1 ; %CO:  910
   7031     ENDPROCEDURE ;
   7032   PROCEDURE MQ L B D ;
   7033     PROCEDURE MQUAD IAP L F AP ;
   7034       VARIABLE C 1 ;
   7035       VARIABLE OM1 1 ;
   7036       VARIABLE OM2 NMP ;
   7037       VARIABLE FI NM1 ;
   7038       VARIABLE FP  NM1 ;
   7039       VARIABLE N NM1 ;
   7040       VARIABLE OM NM1 ;
   7041       PROCEDURE MAPY C X Y ;
   7042         N := IAP(C) ;
   7043         IAP(C) := IAP(C)*X+IAP(C+1)/FP*Y ;
   7044         IF C=1 ;
   7045           IAP(C+1) := -FP*N*Y+IAP(C+1)*X ;
   7046           ELSEIF C=3 ;
   7047           IAP(C+1) :=  FP*N*Y+IAP(C+1)*X ;
   7048           ENDIF ;
   7049         ENDPROCEDURE ;
   7050       IF LUM#1 ;
   7051         WRITE 6 ' *** ERROR, call UM before MQ' ;
   7052         QUIT 0 ;
   7053         ENDIF ;
   7054       IF ABS(CONS(F))<1E-15 ;
   7055         DLACT IAP L ; %DLACT: 6497
   7056         ELSEIF TRUE ;
   7057         FI := F ;
   7058         IF CONS(F*Z0)<0 ;
   7059           FI := -F ;
   7060           N := IAP(1) ;
   7061           IAP(1) := IAP(3) ;
   7062           IAP(3) := N ;
   7063           N := IAP(2) ;
   7064           IAP(2) := IAP(4) ;
   7065           IAP(4) := N ;
   7066           ENDIF ;
   7067         C := CONS(ETA) ;
   7068         OM := SQRT(FI/(AP*CHIM)) ;
   7069         OM1 := CONS(OM) ;
   7070         OM2 := 2*OM1*L ;
   7071         FP := SQRT((1+IAP(6))*((1+IAP(6))*C+2*(1+IAP(7)))/(C+2))*OM ;
   7072         IF ND>2 ;
   7073           N := IAP(3)*IAP(4)*(COSH(OM2)-1)+IAP(1)*IAP(2)*(COS(OM2)-1) 
                  ;
   7074           N := N             +SQR(IAP(2))*(L+.5/OM1*SIN(OM2))+SQR(IAP(
                  4))*(L+.5/OM1*SINH(OM2)) ;
   7075           N := N+(SQR(IAP(1))*(L-SIN(OM2)*.5/OM1)                +SQR(
                  IAP(3))*(-L+SINH(OM2)*.5/OM1))*SQR(OM1) ;
   7076           IAP(5) := IAP(5)               +((1+C)*(1-.25*N/L)-((1+IAP(7
                  ))+(1+IAP(6))*C)*OM/FP)/(2+C)*L ;
   7077           ENDIF ;
   7078         OM := OM*L ;
   7079         MAPY 1 COS(OM) SIN(OM) ; %MAPY: 7041
   7080         MAPY 3 COSH(OM) SINH(OM) ; %MAPY: 7041
   7081         IF CONS(F*Z0)<0 ;
   7082           N := IAP(1) ;
   7083           IAP(1) := IAP(3) ;
   7084           IAP(3) := N ;
   7085           N := IAP(2) ;
   7086           IAP(2) := IAP(4) ;
   7087           IAP(4) := N ;
   7088           ENDIF ;
   7089         ENDIF ;
   7090       ENDPROCEDURE ;
   7091     IF (NOC<3)*(LFR=0)*(LSPN=0) ;
   7092       MQUAD MAP L B D ; %MQUAD: 7033
   7093       IF NRAY#0 ;
   7094         UMS ; %UMS: 1414
   7095         MQUAD MSC L B D ; %MQUAD: 7033
   7096         ENDIF ;
   7097       LOCSET 0 L 0 L 0 0 ; %LOCSET: 1059
   7098       DR := D ;
   7099       CE := 'MQ' ;
   7100       UPDATE 0 1 ; %UPDATE: 1206
   7101       ELSEIF TRUE ;
   7102       NPOL := 1 ;
   7103       PPOL(1) := B/D ;
   7104       MPOL(1) := 2 ;
   7105       LOFF := 1 ;
   7106       FFELE L D 0 1 2 'MQ' ; %FFELE: 6816
   7107       ENDIF ;
   7108     ENDPROCEDURE ;
   7109   PROCEDURE MH L B D ;
   7110     PROCEDURE MHEXA IAP L F AP ;
   7111       VARIABLE C 1 ;
   7112       VARIABLE X NM1 ;
   7113       VARIABLE XZ NM1 ;
   7114       VARIABLE Y NM1 ;
   7115       VARIABLE FP  NM1 ;
   7116       VARIABLE FI NM1 ;
   7117       C := CONS(ETA) ;
   7118       IF LUM#1 ;
   7119         WRITE 6 ' *** ERROR, call UM before MH' ;
   7120         QUIT 0 ;
   7121         ENDIF ;
   7122       FP := SQRT((1+IAP(6))*((1+IAP(6))*C+2*(1+IAP(7)))/(C+2)) ;
   7123       X  := IAP(1) ;
   7124       XZ := IAP(2) ;
   7125       Y := IAP(3) ;
   7126       DLACT IAP L ; %DLACT: 6497
   7127       IF NO>1 ;
   7128         FI := F/(3*SQR(AP)) ;
   7129         C := CONS(CHIM) ;
   7130         IAP(1) := IAP(1) - FI/C*1.5*SQR(L)*(SQR(X)-SQR(Y)         +2/3
                  *L*(X*XZ-Y*IAP(4)+.25*L*(SQR(XZ)-SQR(IAP(4))))) ;
   7131         IAP(2) := IAP(2) - FI/C*L*3*(SQR(X)-SQR(Y)         +L*(X*XZ-Y*
                  IAP(4)+1/3*L*(SQR(XZ)-SQR(IAP(4))))) ;
   7132         IAP(3) := IAP(3)+FI/C*SQR(L)*(3*X*Y+L*(Y*XZ+X*IAP(4)+.5*L*XZ*I
                  AP(4))) ;
   7133         IAP(4) := IAP(4) + FI/C*L*(6*X*Y+L*(3*(Y*XZ+X*IAP(4))+2*L*XZ*I
                  AP(4))) ;
   7134         ENDIF ;
   7135       ENDPROCEDURE ;
   7136     IF (NOC<3)*(LFR=0)*(LSPN=0) ;
   7137       MHEXA MAP L B D ; %MHEXA: 7110
   7138       IF NRAY#0 ;
   7139         UMS ; %UMS: 1414
   7140         MHEXA MSC L B D ; %MHEXA: 7110
   7141         ENDIF ;
   7142       LOCSET 0 L 0 L 0 0 ; %LOCSET: 1059
   7143       DR := D ;
   7144       CE := 'MH' ;
   7145       UPDATE 0 1 ; %UPDATE: 1206
   7146       ELSEIF TRUE ;
   7147       NPOL := 1 ;
   7148       PPOL(1) := B/D/D ;
   7149       MPOL(1) := 3 ;
   7150       LOFF := 1 ;
   7151       FFELE L D 0 1 2 'MH' ; %FFELE: 6816
   7152       ENDIF ;
   7153     ENDPROCEDURE ;
   7154   PROCEDURE MO L B D ;
   7155     NPOL := 1 ;
   7156     PPOL(1) := B/D/D/D ;
   7157     MPOL(1) := 4 ;
   7158     LOFF := 1 ;
   7159     FFELE L D 0 1 2 'MO' ; %FFELE: 6816
   7160     ENDPROCEDURE ;
   7161   PROCEDURE MD L B D ;
   7162     NPOL := 1 ;
   7163     PPOL(1) := B/D/D/D/D ;
   7164     MPOL(1) := 5 ;
   7165     LOFF := 1 ;
   7166     FFELE L D 0 1 2 'MD' ; %FFELE: 6816
   7167     ENDPROCEDURE ;
   7168   PROCEDURE MZ L B D ;
   7169     NPOL := 1 ;
   7170     PPOL(1) := B/D/D/D/D/D ;
   7171     MPOL(1) := 6 ;
   7172     LOFF := 1 ;
   7173     FFELE L D 0 1 2 'MZ' ; %FFELE: 6816
   7174     ENDPROCEDURE ;
   7175   PROCEDURE M5 L BQ BH BO BD BZ D ;
   7176     PPOL(1) := BQ/D ;
   7177     MPOL(1) := 2 ;
   7178     PPOL(2) := BH/D/D ;
   7179     MPOL(2) := 3 ;
   7180     PPOL(3) := BO/D/D/D ;
   7181     MPOL(3) := 4 ;
   7182     PPOL(4) := BD/D/D/D/D ;
   7183     MPOL(4) := 5 ;
   7184     PPOL(5) := BZ/D/D/D/D/D ;
   7185     MPOL(5) := 6 ;
   7186     LOFF := 1 ;
   7187     NPOL := 5 ;
   7188     FFELE L D 0 1 2 'M5' ; %FFELE: 6816
   7189     ENDPROCEDURE ;
   7190   PROCEDURE MM L BA NBA D ;
   7191     VARIABLE I 1 ;
   7192     VARIABLE DP NM2 ;
   7193     DP := 1 ;
   7194     LOOP I 1 NBA ;
   7195       DP := DP/D ;
   7196       PPOL(I) := BA(I)*DP ;
   7197       MPOL(I) := I+1 ;
   7198       ENDLOOP ;
   7199     LOFF := 1 ;
   7200     NPOL := NBA ;
   7201     FFELE L D 0 1 2 'MM' ; %FFELE: 6816
   7202     ENDPROCEDURE ;
   7203   PROCEDURE MMS L BA BS NB D ;
   7204     VARIABLE I 1 ;
   7205     VARIABLE DP NM2 ;
   7206     DP := 1 ;
   7207     LOOP I 1 NB ;
   7208       DP := DP/D ;
   7209       PPOL(I) := BA(I)*DP ;
   7210       MPOL(I) := I+1 ;
   7211       ENDLOOP ;
   7212     DP := 1 ;
   7213     LOOP I 1 NB ;
   7214       DP := DP/D ;
   7215       PPOL(I+NB) := BS(I)*DP/(I+1) ;
   7216       MPOL(I+NB) := I+1+20 ;
   7217       ENDLOOP ;
   7218     LOFF := 1 ;
   7219     NPOL := 2*NB ;
   7220     FFELE L D 0 1 2 'MMS' ; %FFELE: 6816
   7221     ENDPROCEDURE ;
   7222   PROCEDURE MQK L K D ;
   7223     MQ L K*CONS(CHIM)*D   D ; %MQ: 7032
   7224     ENDPROCEDURE ;
   7225   PROCEDURE MSK L K D ;
   7226     MH L K*CONS(CHIM)*D*D D ; %MH: 7109
   7227     ENDPROCEDURE ;
   7228   PROCEDURE MOK L K D ;
   7229     NPOL := 1 ;
   7230     PPOL(1) := K*CONS(CHIM) ;
   7231     MPOL(1):=4 ;
   7232     LOFF := 1 ;
   7233     FFELE L D 0 1 2 'MOK' ; %FFELE: 6816
   7234     ENDPROCEDURE ;
   7235   PROCEDURE MDK L K D ;
   7236     NPOL := 1 ;
   7237     PPOL(1) := K*CONS(CHIM) ;
   7238     MPOL(1):=5 ;
   7239     LOFF := 1 ;
   7240     FFELE L D 0 1 2 'MDK' ; %FFELE: 6816
   7241     ENDPROCEDURE ;
   7242   PROCEDURE MZK L K D ;
   7243     NPOL := 1 ;
   7244     PPOL(1) := K*CONS(CHIM) ;
   7245     MPOL(1):=6 ;
   7246     LOFF := 1 ;
   7247     FFELE L D 0 1 2 'MZK' ; %FFELE: 6816
   7248     ENDPROCEDURE ;
   7249   PROCEDURE MMK L BA NBA D ;
   7250     VARIABLE I 1 ;
   7251     VARIABLE DP NM3 ;
   7252     LOOP I 1 NBA ;
   7253       PPOL(I) := BA(I)*CONS(CHIM) ;
   7254       MPOL(I) := I+1 ;
   7255       ENDLOOP ;
   7256     LOFF := 1 ;
   7257     NPOL := NBA ;
   7258     FFELE L D 0 1 2 'MMK' ; %FFELE: 6816
   7259     ENDPROCEDURE ;
   7260   PROCEDURE MMSK L KA TA NA D ;
   7261     VARIABLE I 1 ;
   7262     VARIABLE DP NM3 ;
   7263     VARIABLE BS NM3 ;
   7264     DP := 1 ;
   7265     LOOP I 1 NA ;
   7266       DP := DP*D ;
   7267       KA(I) := KA(I)*CONS(CHIM)*DP ;
   7268       BS := KA(I)*SIN((I+1)*TA(I)*DEGRAD) ;
   7269       KA(I) := KA(I)*COS((I+1)*TA(I)*DEGRAD) ;
   7270       TA(I) := BS ;
   7271       ENDLOOP ;
   7272     MMS L KA TA NA D ; %MMS: 7203
   7273     ENDPROCEDURE ;
   7274   PROCEDURE MGE NP A NS DS SIGMA D ;
   7275     VARIABLE I 1 ;
   7276     VARIABLE IS 1 ;
   7277     VARIABLE S2 1 ;
   7278     LOOP I 1 NP ;
   7279       MPOL(I) := I+1 ;
   7280       LOOP IS 1 NS ;
   7281         MFD(I,IS) := A(I,IS)/(D^I) ;
   7282         ENDLOOP ;
   7283       ENDLOOP ;
   7284     PPOL(1) := NS ;
   7285     PPOL(2) := DS ;
   7286     PPOL(3) := SIGMA ;
   7287     NSDP := 12 ;
   7288     LOFF := 1 ;
   7289     NPOL := NP ;
   7290     S2 := (NS-1)*DS ;
   7291     LOCSET 0 0 0 0 0 0 ; %LOCSET: 1059
   7292     CE := 'MGE' ;
   7293     DR := D ;
   7294     SDELE 0 S2 D/200 1*D 7*D D ; %SDELE: 6532
   7295     UPDATE 1 1 ; %UPDATE: 1206
   7296     ENDPROCEDURE ;
   7297   PROCEDURE BEND R PHI D E1 H1 E2 H2 N S1 S2 NT ;
   7298     VARIABLE I 1 ;
   7299     VARIABLE NTS 1 ;
   7300     VARIABLE F NMP ;
   7301     VARIABLE LPIP 1 ;
   7302     VARIABLE S1N NMP MAX(NOC,NT) ; %MAX:  171
   7303     VARIABLE S2N NMP MAX(NOC,NT) ; %MAX:  171
   7304     VARIABLE E1N NMP ;
   7305     VARIABLE E2N NMP ;
   7306     VARIABLE H1N NMP ;
   7307     VARIABLE H2N NMP ;
   7308     VARIABLE NAP NM1 MAX(NV,8) ; %MAX:  171
   7309     VARIABLE AA 1 10 ;
   7310     VARIABLE FF NM1 10 ;
   7311     VARIABLE LL NM1 10 ;
   7312     FUNCTION FK X E XI ;
   7313       IF CONS(XI)#0 ;
   7314         FK := (COS(E)-SQRT(1-SQR(X*XI+SIN(E))))/XI ;
   7315         ELSEIF TRUE ;
   7316         FK := TAN(E)*X ;
   7317         ENDIF ;
   7318       ENDFUNCTION ;
   7319     PROCEDURE SNS S E H SN NT ;
   7320       VARIABLE I 1 ;
   7321       VARIABLE L 1 ;
   7322       VARIABLE F NM1 ;
   7323       E := 0 ;
   7324       H := 0 ;
   7325       IF NT>0 ;
   7326         E := ATAN(S(1)) ;
   7327         IF NT>1 ;
   7328           H := 1+SQR(S(1)) ;
   7329           H := 2*S(2)/SQRT(H)/H ;
   7330           ENDIF ;
   7331         ENDIF ;
   7332       F := FK(DD(1),E,H) ; %FK: 7312
   7333       L := 1 ;
   7334       LOOP I 1 NT ;
   7335         L := L*I ;
   7336         F := DER(1,F) ; %DER:  252
   7337         SN(I) := S(I)-CONS(F)/L ;
   7338         ENDLOOP ;
   7339       LOOP I NT+1 NTS ;
   7340         L := L*I ;
   7341         F := DER(1,F) ; %DER:  252
   7342         SN(I) := -CONS(F)/L ;
   7343         ENDLOOP ;
   7344       ENDPROCEDURE ;
   7345     PROCEDURE KICK I F IAP ;
   7346       VARIABLE A NM1 1 ;
   7347       VARIABLE NAP NM1 NV ;
   7348       VARIABLE J 1 ;
   7349       LOOP J 1 NV ;
   7350         NAP(J) := DD(J) ;
   7351         ENDLOOP ;
   7352       NAP(1) := IAP(1) ;
   7353       IF ND>1 ;
   7354         NAP(3) := IAP(3) ;
   7355         ENDIF ;
   7356       IF I=1 ;
   7357         A(1) := F ;
   7358         ELSEIF I=2 ;
   7359         A(1) := -DER(1,F)*DD(3) ; %DER:  252
   7360         NAP(1) := 0*NAP(1) ;
   7361         ENDIF ;
   7362       POLVAL 1 A 1 NAP NV A 1 ;
   7363       IAP(2*I) := IAP(2*I)+A(1) ;
   7364       ENDPROCEDURE ;
   7365     FUNCTION POL X CO NT ;
   7366       VARIABLE I 1 ;
   7367       POL := 0 ;
   7368       LOOP I NT 1 -1 ;
   7369         POL := (POL+CO(I))*X ;
   7370         ENDLOOP ;
   7371       ENDFUNCTION ;
   7372     PROCEDURE KICKSXYN SN IAP ;
   7373       VARIABLE F NM1 ;
   7374       F := POL(DD(1),SN,NTS) ; %POL: 7365
   7375       KICK 1 F/R IAP ; %KICK: 7345
   7376       KICK 2 F/R IAP ; %KICK: 7345
   7377       ENDPROCEDURE ;
   7378     PROCEDURE BENDFF3 ;
   7379       VARIABLE LDL 1 ;
   7380       VARIABLE MS NM1 MAX(8,NV) ; %MAX:  171
   7381       VARIABLE SM NM2 3 3 ;
   7382       NSDP := -4 ;
   7383       LOFF := 2 ;
   7384       PPOL( 1) := CONS(CHIM)/R ;
   7385       PPOL( 2) := -R ;
   7386       PPOL( 3) := 0 ;
   7387       PPOL( 4) := D ;
   7388       PPOL( 5) := 0 ;
   7389       PPOL( 6) := 0 ;
   7390       PPOL( 7) := SIN(-E1N) ;
   7391       PPOL( 8) :=  COS(-E1N) ;
   7392       IF H1N#0 ;
   7393         PPOL( 7) := PPOL( 7)/H1N ;
   7394         PPOL( 8) :=  PPOL( 8)/H1N ;
   7395         ENDIF ;
   7396       PPOL( 9) := R*(COS(PHI) - 1) ;
   7397       PPOL(10) :=  R*SIN(PHI) ;
   7398       PPOL(11) := SIN(PHI-E2N) ;
   7399       PPOL(12) := -COS(E2N-PHI) ;
   7400       IF H2N#0 ;
   7401         PPOL(11) := PPOL(11)/H2N ;
   7402         PPOL(12) :=  PPOL(12)/H2N ;
   7403         ENDIF ;
   7404       PPOL(11) := PPOL(11) + PPOL(9) ;
   7405       PPOL(12) := PPOL(12) + PPOL(10) ;
   7406       PPOL(13) := H1N ;
   7407       PPOL(14) := H2N ;
   7408       LOOP I 1 NT ;
   7409         PPOL(20+I) := N(I) ;
   7410         ENDLOOP ;
   7411       PPOL(20) := NT ;
   7412       LDL := 10*D ;
   7413       LOCSET 0 -LDL 0 0 0 0 ; %LOCSET: 1059
   7414       IF LFR=3 ;
   7415         LOCSET R*(COS(0.5*PHI)-1) R*SIN(0.5*PHI) 0.5*PHI 0.5*R*PHI 0 0
                   ; %LOCSET: 1059
   7416         SDELEREF 0.5*R*PHI -LDL D/200 D 7*D D ; %SDELEREF: 6590
   7417         ENDIF ;
   7418       UMS ; %UMS: 1414
   7419       DLACT MSC -LDL ; %DLACT: 6497
   7420       SNM MSC MS ; %SNM: 1476
   7421       SSNM SSCR SM ; %SSNM: 1491
   7422       SDELE 0 R*PHI+2*LDL MIN(R/10000,D/200) MIN(R/20,D) MIN(R,7*D) D 
                  ; %SDELE: 6532 %MIN:  174 %MIN:  174 %MIN:  174
   7423       UPDATEMAP MSC MS MSC SSCR SM SSCR ; %UPDATEMAP: 1170
   7424       DLACT MSC -LDL ; %DLACT: 6497
   7425       SLOC := R*PHI ;
   7426       XLOC := XLOC+LDL*SIN(PLOC) ;
   7427       ZLOC := ZLOC-LDL*COS(PLOC) ;
   7428       UPDATE 1 1 ; %UPDATE: 1206
   7429       ENDPROCEDURE ;
   7430     PROCEDURE BENDFF0 ;
   7431       VARIABLE LGH 10 ;
   7432       VARIABLE F NOC+1 ;
   7433       VARIABLE ISC NM1 MAX(8,NV) ; %MAX:  171
   7434       VARIABLE XP NM2 MAX(8,NV) ; %MAX:  171
   7435       VARIABLE RES NM1 ;
   7436       PROCEDURE DIPOLE R0 PHI E1 XI1 E2 XI2 IN OUT LGH ;
   7437         VARIABLE IER 1 ;
   7438         VARIABLE Z1 NM1 ;
   7439         VARIABLE X1 NM1 ;
   7440         VARIABLE R NM1 ;
   7441         VARIABLE ZRI NM1 ;
   7442         VARIABLE XRI NM1 ;
   7443         VARIABLE ZR NM1 ;
   7444         VARIABLE XR NM1 ;
   7445         VARIABLE Z2 NM1 ;
   7446         VARIABLE X2 NM1 ;
   7447         VARIABLE ZA NM1 ;
   7448         VARIABLE XA NM1 ;
   7449         VARIABLE ZB NM1 ;
   7450         VARIABLE XB NM1 ;
   7451         VARIABLE CO NM1 ;
   7452         VARIABLE SI NM1 ;
   7453         VARIABLE THE NM1 ;
   7454         VARIABLE ST1 NM1 ;
   7455         VARIABLE ST2 NM1 ;
   7456         VARIABLE LN NM1 ;
   7457         VARIABLE NC 1 ;
   7458         VARIABLE PC 1 ;
   7459         VARIABLE VC 1 ;
   7460         VARIABLE MG NM1 ;
   7461         FUNCTION RADI X Y ;
   7462           RADI := SQRT(SQR(X)+SQR(Y)) ;
   7463           ENDFUNCTION ;
   7464         PROCEDURE CAPO X Y PHI IER ;
   7465           VARIABLE XC 1 ;
   7466           VARIABLE YC 1 ;
   7467           VARIABLE TINY 1 ;
   7468           TINY := 1E-16 ;
   7469           XC := CONS(X) ;
   7470           YC := CONS(Y) ;
   7471           IF (ABS(XC)+ABS(YC))<TINY ;
   7472             PHI := 0 ;
   7473             IER := 1 ;
   7474             ELSEIF TRUE ;
   7475             IER := 0 ;
   7476             IF ABS(XC)>ABS(YC) ;
   7477               PHI := ATAN(Y/X) ;
   7478               IF (XC<0)*(YC<0) ;
   7479                 PHI := PHI-PI ;
   7480                 ELSEIF TRUE ;
   7481                 PHI := PHI+PI ;
   7482                 ENDIF ;
   7483               ELSEIF TRUE ;
   7484               PHI := PI/2-ATAN(X/Y) ;
   7485               IF YC<0 ;
   7486                 PHI := PHI-PI ;
   7487                 ENDIF ;
   7488               ENDIF ;
   7489             ENDIF ;
   7490           ENDPROCEDURE ;
   7491         PROCEDURE EQ2 A B C Z1 Z2 ;
   7492           IF (CONS(A)=0)+(SQR(CONS(B))+CONS(C)*CONS(A)<0) ;
   7493             WRITE 6 ' *** ERROR in DIPOLE, no solution' ;
   7494             QUIT 0 ;
   7495             ENDIF ;
   7496           Z1 := B/A ;
   7497           Z2 := SQRT(SQR(Z1)+C/A) ;
   7498           ENDPROCEDURE ;
   7499         PROCEDURE LINLIN A1 B1 C1 A2 B2 C2 X Y ;
   7500           VARIABLE D NM1 ;
   7501           VARIABLE TINY 1 ;
   7502           TINY := 1E-16 ;
   7503           D := A1*B2-A2*B1 ;
   7504           IF ABS(CONS(D))<TINY ;
   7505             WRITE 6 ' *** ERROR in DIPOLE, no solution' ;
   7506             QUIT 0 ;
   7507             ENDIF ;
   7508           X := (B1*C2-B2*C1)/D ;
   7509           Y := (A2*C1-A1*C2)/D ;
   7510           ENDPROCEDURE ;
   7511         PROCEDURE LINCIR A B C XR YR R X1 Y1 X2 Y2 ;
   7512           VARIABLE A1 NM1 ;
   7513           VARIABLE C1 NM1 ;
   7514           VARIABLE Z1 NM1 ;
   7515           VARIABLE Z2 NM1 ;
   7516           IF ABS(CONS(B))>ABS(CONS(A)) ;
   7517             A1 := A/B ;
   7518             C1 := C/B ;
   7519             EQ2 1+SQR(A1) XR-A1*(YR+C1) SQR(R)-SQR(XR)-SQR(YR+C1) Z1 Z
                  2 ; %EQ2: 7491
   7520             X1 := Z1-Z2 ;
   7521             X2 := Z1+Z2 ;
   7522             Y1 := -A1*X1-C1 ;
   7523             Y2 := -A1*X2-C1 ;
   7524             ELSEIF TRUE ;
   7525             A1 := B/A ;
   7526             C1 := C/A ;
   7527             EQ2 1+SQR(A1) YR-A1*(XR+C1) SQR(R)-SQR(YR)-SQR(XR+C1) Z1 Z
                  2 ; %EQ2: 7491
   7528             Y1 := Z1-Z2 ;
   7529             Y2 := Z1+Z2 ;
   7530             X1 := -A1*Y1-C1 ;
   7531             X2 := -A1*Y2-C1 ;
   7532             ENDIF ;
   7533           ENDPROCEDURE ;
   7534         PROCEDURE CIRCIR XR1 YR1 R1 XR2 YR2 R2 X1 Y1 X2 Y2 ;
   7535           VARIABLE C NM1 ;
   7536           C := (SQR(R2)-SQR(XR2)-SQR(YR2))-(SQR(R1)-SQR(XR1)-SQR(YR1))
                   ;
   7537           LINCIR 2*(XR2-XR1) 2*(YR2-YR1) C XR1 YR1 R1 X1 Y1 X2 Y2 ; %L
                  INCIR: 7511
   7538           ENDPROCEDURE ;
   7539         PC := CONS(P0) ;
   7540         MG := SQRT(SQR(P0/PC)-SQR(IN(2))-SQR(IN(4))) ;
   7541         IN(2) := IN(2)/MG ;
   7542         IN(4) := IN(4)/MG ;
   7543         CO := COS(E1) ;
   7544         SI := SIN(E1) ;
   7545         IF CONS(XI1)#0 ;
   7546           R := 1/XI1 ;
   7547           ZR := CO/XI1 ;
   7548           XR := -SI/XI1 ;
   7549           LINCIR IN(2) -1 IN(1) ZR XR R ZA XA ZB XB ; %LINCIR: 7511
   7550           IF CONS(XI1)>0 ;
   7551             Z1 := ZA ;
   7552             X1 := XA ;
   7553             ELSEIF TRUE ;
   7554             Z1 := ZB ;
   7555             X1 := XB ;
   7556             ENDIF ;
   7557           ELSEIF TRUE ;
   7558           LINLIN IN(2) -1 IN(1) CO -SI 0 Z1 X1 ; %LINLIN: 7499
   7559           ENDIF ;
   7560         ST1 := 1+SQR(IN(2)) ;
   7561         IF ND=1 ;
   7562           ST1 := SQRT(ST1) ;
   7563           ST2 := ST1 ;
   7564           ELSEIF ND>1 ;
   7565           ST2 := SQRT(ST1+SQR(IN(4))) ;
   7566           ST1 := SQRT(ST1) ;
   7567           ENDIF ;
   7568         R := R0*P0/PC*CONS(Z0)/Z0*ST1/ST2 ;
   7569         XRI := X1-R/ST1 ;
   7570         ZRI := Z1+R*IN(2)/ST1 ;
   7571         CO := COS(PHI) ;
   7572         SI := SIN(PHI) ;
   7573         Z2 := R0*SI ;
   7574         X2 := R0*(CO-1) ;
   7575         ZR := (ZRI-Z2)*CO - (XRI-X2)*SI ;
   7576         XR := (XRI-X2)*CO + (ZRI-Z2)*SI ;
   7577         CO := COS(E2) ;
   7578         SI := SIN(E2) ;
   7579         IF CONS(XI2)#0 ;
   7580           THE := 1/XI2 ;
   7581           Z2 := -CO/XI2 ;
   7582           X2 := -SI/XI2 ;
   7583           CIRCIR ZR XR R Z2 X2 THE ZA XA ZB XB ; %CIRCIR: 7534
   7584           ELSEIF TRUE ;
   7585           LINCIR CO SI 0 ZR XR R ZA XA ZB XB ; %LINCIR: 7511
   7586           ENDIF ;
   7587         IF RADI(CONS(ZA),CONS(XA))<RADI(CONS(ZB),CONS(XB)) ; %RADI: 74
                  61 %RADI: 7461
   7588           Z2 := ZA ;
   7589           X2 := XA ;
   7590           ELSEIF TRUE ;
   7591           Z2 := ZB ;
   7592           X2 := XB ;
   7593           ENDIF ;
   7594         CAPO X1-XRI Z1-ZRI X1 IER ; %CAPO: 7464
   7595         CAPO X2-XR Z2-ZR THE IER ; %CAPO: 7464
   7596         THE := PHI+THE-X1 ;
   7597         X1 := -(Z2-ZR)/(X2-XR) ;
   7598         LINLIN X1 -1 X2-Z2*X1 1 0 0 ZRI XRI ; %LINLIN: 7499
   7599         OUT(1) := XRI ;
   7600         OUT(2) := X1 ;
   7601         LGH := R0*PHI ;
   7602         LN := Z1*ST1 + R*THE - Z2*SQRT(1+SQR(OUT(2))) ;
   7603         IF ND>1 ;
   7604           OUT(3) := IN(3)+IN(4)*LN/ST1 ;
   7605           OUT(4) := IN(4)*SQRT(1+SQR(OUT(2)))/ST1 ;
   7606           ENDIF ;
   7607         MG := SQRT(1+SQR(OUT(2))+SQR(OUT(4)))*PC/P0 ;
   7608         OUT(2) := OUT(2)/MG ;
   7609         OUT(4) := OUT(4)/MG ;
   7610         IF ND>2 ;
   7611           NC := CONS(ETA) ;
   7612           VC := CONS(V0) ;
   7613           MG := -(1+NC)/(2+NC)*VC/V0 ;
   7614           OUT(5) := IN(5)+(LN*ST2/ST1-V0/VC*LGH)*MG ;
   7615           OUT(6) := IN(6) ;
   7616           ENDIF ;
   7617         ENDPROCEDURE ;
   7618       PROCEDURE DIPOLEY R0 PHI E1 XI1 E2 XI2 IN OUT LGH ;
   7619         KICK 2 FK(DD(1),E1,XI1)/R0 IN ; %KICK: 7345 %FK: 7312
   7620         DIPOLE R0 PHI E1 XI1 E2 XI2 IN OUT LGH ; %DIPOLE: 7436
   7621         KICK 2 FK(DD(1),E2,XI2)/R0 OUT ; %KICK: 7345 %FK: 7312
   7622         ENDPROCEDURE ;
   7623       IF LUM#1 ;
   7624         WRITE 6 ' *** ERROR, call UM before element' ;
   7625         QUIT 0 ;
   7626         ENDIF ;
   7627       IF (NT=0)*(LSPN=0) ;
   7628         DIPOLEY R PHI E1 H1 E2 H2 MSC MSC LGH ; %DIPOLEY: 7618
   7629         ELSEIF TRUE ;
   7630         NPOL := NT+1 ;
   7631         PPOL(1) :=  CONS(CHIM)/R ;
   7632         MPOL(1) := 1 ;
   7633         F := 1/R ;
   7634         LOOP I 2 NPOL ;
   7635           PPOL(I) := -PPOL(1)*N(I-1)*F ;
   7636           MPOL(I) := I ;
   7637           F := F/R ;
   7638           ENDLOOP ;
   7639         LOFF := 2 ;
   7640         DIPOLEY R 0 E1N H1N 0 0 MSC ISC LGH ; %DIPOLEY: 7618
   7641         LOOP I TWOND+1 MIN(NV,8) ; %MIN:  174
   7642           ISC(I) := MSC(I) ;
   7643           ENDLOOP ;
   7644         SIELE R*PHI D ; %SIELE: 6638
   7645         POLVAL 1 MSC TWOND ISC MIN(NV,8) MSC TWOND ; %MIN:  174
   7646         DIPOLEY R 0 0 0 E2N H2N MSC MSC LGH ; %DIPOLEY: 7618
   7647         ENDIF ;
   7648       ENDPROCEDURE ;
   7649     IF CONS(R)<0 ;
   7650       WRITE 6 ' *** ERROR in '&CE&' BEND, negative radius' ;
   7651       QUIT 0 ;
   7652       ELSEIF CONS(PHI)<0;
   7653       WRITE 6 ' *** ERROR in '&CE&' BEND, negative angle' ;
   7654       QUIT 0 ;
   7655       ELSEIF (ABS(E1)+ABS(E2)+ABS(H1)+ABS(H2)#0)*(NT#0) ;
   7656       WRITE 6         ' @@@ ERROR in '&CE&' BEND, wrong parameters' ;
   7657       QUIT 0 ;
   7658       ENDIF ;
   7659     DR := D ;
   7660     LOOP I 1 8 ;
   7661       MSC(I) := DD(I) ;
   7662       ENDLOOP ;
   7663     IF (NRAY=0)*(LSPN=0) ;
   7664       LOOP I 1 TWOND ;
   7665         MSC(I) := MAP(I) ;
   7666         ENDLOOP ;
   7667       ENDIF ;
   7668     NTS := NOC ;
   7669     E1N := E1 ;
   7670     H1N := H1 ;
   7671     E2N := E2 ;
   7672     H2N := H2 ;
   7673     IF (LFR=3)+(LFR=2.5) ;
   7674       IF NT#0 ;
   7675         SNS S1 E1N H1N S1N NT ; %SNS: 7319
   7676         SNS S2 E2N H2N S2N NT ; %SNS: 7319
   7677         UMS ; %UMS: 1414
   7678         KICKSXYN S1N MSC ; %KICKSXYN: 7372
   7679         LPIP := LPI ;
   7680         LPI := 0 ;
   7681         LOCSET 0 0 0 0 0 0 ; %LOCSET: 1059
   7682         UPDATE 1 1 ; %UPDATE: 1206
   7683         LPI := LPIP ;
   7684         ENDIF ;
   7685       BENDFF3 ; %BENDFF3: 7378
   7686       IF NT#0 ;
   7687         UMS ; %UMS: 1414
   7688         KICKSXYN S2N MSC ; %KICKSXYN: 7372
   7689         LPI := 0 ;
   7690         LOCSET 0 0 0 0 0 0 ; %LOCSET: 1059
   7691         UPDATE 1 1 ; %UPDATE: 1206
   7692         LPI := LPIP ;
   7693         ENDIF ;
   7694       ELSEIF (LFR=-1)+(LFR=-2) ;
   7695       NPOL := NT+1 ;
   7696       PPOL(1) :=  CONS(CHIM)/R ;
   7697       F := 1/R ;
   7698       MPOL(1) := 1 ;
   7699       LOOP I 2 NPOL ;
   7700         PPOL(I) := -PPOL(1)*N(I-1)*F ;
   7701         MPOL(I) := I ;
   7702         F := F/R ;
   7703         ENDLOOP ;
   7704       LOFF := 2 ;
   7705       FFELE R*PHI D 1/R -1 -2 '  ' ; %FFELE: 6816
   7706       ELSEIF TRUE ;
   7707       IF NT#0 ;
   7708         SNS S1 E1N H1N S1N NT ; %SNS: 7319
   7709         SNS S2 E2N H2N S2N NT ; %SNS: 7319
   7710         KICKSXYN S1N MSC ; %KICKSXYN: 7372
   7711         ENDIF ;
   7712       IF LFR=0 ;
   7713         BENDFF0 ; %BENDFF0: 7430
   7714         ELSEIF (LFR=1)+(LFR=1.9)+(LFR=2) ;
   7715         CO NOC+1 ; %CO:  910
   7716         LOOP I 1 10 ;
   7717           AA(I) := DATFF2(1,1,I) ;
   7718           FF(I) := GFF2(1,1,I) ;
   7719           LL(I) := LFF2(1,1,I) ;
   7720           ENDLOOP ;
   7721         CO NOC-1 ; %CO:  910
   7722         SYSCLM NAP 0 CONS(P0)*1E6/CLIGHT/CONS(Z0)/R D AA FF LL ; %SYSC
                  LM: 6708
   7723         ANM NAP MSC MSC ; %ANM: 1508
   7724         BENDFF0 ; %BENDFF0: 7430
   7725         CO NOC+1 ; %CO:  910
   7726         LOOP I 1 10 ;
   7727           AA(I) := DATFF2(2,1,I) ;
   7728           FF(I) := GFF2(2,1,I) ;
   7729           LL(I) := LFF2(2,1,I) ;
   7730           ENDLOOP ;
   7731         CO NOC-1 ; %CO:  910
   7732         SYSCLM NAP 0 CONS(P0)*1E6/CLIGHT/CONS(Z0)/R D AA FF LL ; %SYSC
                  LM: 6708
   7733         ANM NAP MSC MSC ; %ANM: 1508
   7734         ELSEIF LO(1) ;
   7735         WRITE 6            ' *** ERROR in '&CE&' BEND, FR '&S(LFR)&' n
                  ot supported.' ; %S:  227
   7736         QUIT 0 ;
   7737         ENDIF ;
   7738       IF NT#0 ;
   7739         KICKSXYN S2N MSC ; %KICKSXYN: 7372
   7740         ENDIF ;
   7741       LOCSET (COS(PHI)-1)*R SIN(PHI)*R PHI R*PHI 0 0 ; %LOCSET: 1059
   7742       IF (NRAY=0)*(LSPN=0) ;
   7743         LOOP I 1 TWOND ;
   7744           MAP(I) := MSC(I) ;
   7745           ENDLOOP ;
   7746         UPDATE 0 1 ; %UPDATE: 1206
   7747         ELSEIF TRUE ;
   7748         UPDATE 1 1 ; %UPDATE: 1206
   7749         ENDIF ;
   7750       ENDIF ;
   7751     ENDPROCEDURE ;
   7752   PROCEDURE DI R PHI D E1 H1 E2 H2 ;
   7753     CE := 'DI' ;
   7754     BEND R PHI*DEGRAD D E1*DEGRAD H1 E2*DEGRAD H2 0 0 0 0 ; %BEND: 729
                  7
   7755     ENDPROCEDURE ;
   7756   PROCEDURE DP R PHI D ;
   7757     VARIABLE PH 1 ;
   7758     PH := PHI*DEGRAD ;
   7759     CE := 'DP' ;
   7760     BEND R PH D PH/2 0 PH/2 0 0 0 0 0 ; %BEND: 7297
   7761     ENDPROCEDURE ;
   7762   PROCEDURE MC R PHI D N S1 S2 NT ;
   7763     CE := 'MC' ;
   7764     BEND R PHI*DEGRAD D 0 0 0 0 N S1 S2 NT ; %BEND: 7297
   7765     ENDPROCEDURE ;
   7766   PROCEDURE MS R PHI D N1 N2 N3 N4 N5 ;
   7767     VARIABLE S1 1 5 ;
   7768     VARIABLE S2 1 5 ;
   7769     VARIABLE N NMP 5 ;
   7770     VARIABLE I 1 ;
   7771     LOOP I 1 5 ;
   7772       S1(I) := 0 ;
   7773       S2(I) := 0 ;
   7774       ENDLOOP ;
   7775     N(1) := N1 ;
   7776     N(2) := N2 ;
   7777     N(3) := N3 ;
   7778     N(4) := N4 ;
   7779     N(5) := N5 ;
   7780     CE := 'MS' ;
   7781     BEND R PHI*DEGRAD D 0 0 0 0 N S1 S2 5 ; %BEND: 7297
   7782     ENDPROCEDURE ;
   7783   PROCEDURE MSL L PHI D N1 N2 N3 N4 N5 ;
   7784     VARIABLE S1 1 5 ;
   7785     VARIABLE S2 1 5 ;
   7786     VARIABLE N NMP 5 ;
   7787     VARIABLE I 1 ;
   7788     IF PHI=0 ;
   7789       DL L ; %DL: 6515
   7790       ELSEIF TRUE ;
   7791       LOOP I 1 5 ;
   7792         S1(I) := 0 ;
   7793         S2(I) := 0 ;
   7794         ENDLOOP ;
   7795       N(1) := N1 ;
   7796       N(2) := N2 ;
   7797       N(3) := N3 ;
   7798       N(4) := N4 ;
   7799       N(5) := N5 ;
   7800       CE := 'MSL' ;
   7801       BEND L/PHI/DEGRAD PHI*DEGRAD D 0 0 0 0 N S1 S2 5 ; %BEND: 7297
   7802       ENDIF ;
   7803     ENDPROCEDURE ;
   7804   PROCEDURE MPL L PHI D N1 N2 N3 N4 N5 ;
   7805     VARIABLE S1 1 5 ;
   7806     VARIABLE S2 1 5 ;
   7807     VARIABLE N NMP 5 ;
   7808     VARIABLE I 1 ;
   7809     VARIABLE PH 1 ;
   7810     IF PHI=0 ;
   7811       DL L ; %DL: 6515
   7812       ELSEIF TRUE ;
   7813       PH := PHI*DEGRAD ;
   7814       S1(1) := TAN(PH/2) ;
   7815       S2(1) := TAN(PH/2) ;
   7816       LOOP I 2 5 ;
   7817         S1(I) := 0 ;
   7818         S2(I) := 0 ;
   7819         ENDLOOP ;
   7820       N(1) := N1 ;
   7821       N(2) := N2 ;
   7822       N(3) := N3 ;
   7823       N(4) := N4 ;
   7824       N(5) := N5 ;
   7825       CE := 'MPL' ;
   7826       BEND L/PH PH D 0 0 0 0 N S1 S2 5 ; %BEND: 7297
   7827       ENDIF ;
   7828     ENDPROCEDURE ;
   7829   PROCEDURE DIL L PHI D E1 H1 E2 H2 ;
   7830     IF PHI=0 ;
   7831       DL L ; %DL: 6515
   7832       ELSEIF TRUE ;
   7833       DI L/PHI/DEGRAD PHI D E1 H1 E2 H2 ; %DI: 7752
   7834       ENDIF ;
   7835     ENDPROCEDURE ;
   7836   PROCEDURE MCLK L PHI D K S1 S2 NT ;
   7837     VARIABLE I 1 ;
   7838     VARIABLE RPOW 1 ;
   7839     VARIABLE R 1 ;
   7840     VARIABLE KN NM3 NT ;
   7841     VARIABLE TA 1 NT ;
   7842     IF (ABS(PHI)>1E-9) ;
   7843       R := L/(PHI*DEGRAD) ;
   7844       RPOW := R ;
   7845       LOOP I 1 NT ;
   7846         RPOW := RPOW*R ;
   7847         KN(I) := -K(I)*RPOW ;
   7848         ENDLOOP ;
   7849       MC R PHI D KN S1 S2 NT ; %MC: 7762
   7850       ELSEIF 1=1 ;
   7851       LOOP I 1 NT ;
   7852         TA(I) := 0 ;
   7853         ENDLOOP ;
   7854       MMSK L K TA NT D ; %MMSK: 7260
   7855       ENDIF ;
   7856     ENDPROCEDURE ;
   7857   PROCEDURE MSS R PHID D E1D H1 E2D H2 W ;
   7858     VARIABLE E1N NMP ;
   7859     VARIABLE E2N NMP ;
   7860     VARIABLE H1N NMP ;
   7861     VARIABLE H2N NMP ;
   7862     VARIABLE NTS 1 ;
   7863     VARIABLE LDL 1 ;
   7864     VARIABLE PHI 1 ;
   7865     VARIABLE E1 1 ;
   7866     VARIABLE E2 1 ;
   7867     VARIABLE NT 1 ;
   7868     VARIABLE MS NM1 MAX(8,NV) ; %MAX:  171
   7869     VARIABLE SM NM2 3 3 ;
   7870     VARIABLE I 1 ;
   7871     VARIABLE J 1 ;
   7872     VARIABLE LFT 1 ;
   7873     LFT := LFR ;
   7874     LFR := 3 ;
   7875     CE := 'MSS' ;
   7876     NT := 0 ;
   7877     PHI := PHID*DEGRAD ;
   7878     E1 := E1D*DEGRAD ;
   7879     E2 := E2D*DEGRAD ;
   7880     IF CONS(R)<0 ;
   7881       WRITE 6 ' *** ERROR in MSS, negative radius' ;
   7882       QUIT 0 ;
   7883       ELSEIF CONS(PHID)<0 ;
   7884       WRITE 6 ' *** ERROR in MSS, negative angle';
   7885       QUIT 0;
   7886       ELSEIF CONS(PHID)>360 ;
   7887       WRITE 6 ' *** ERROR in MSS, too big angle > 360';
   7888       QUIT 0;
   7889       ELSEIF (ABS(E1)+ABS(E2)+ABS(H1)+ABS(H2)#0)*(NT#0) ;
   7890       WRITE 6 ' @@@ ERROR in MSS, wrong parameters' ;
   7891       QUIT 0 ;
   7892       ENDIF ;
   7893     NSDP := -7 ;
   7894     LOFF := 2 ;
   7895     DR := D ;
   7896     LOOP I 1 8 ;
   7897       MSC(I) := DD(I) ;
   7898       ENDLOOP ;
   7899     IF (NRAY=0)*(LSPN=0) ;
   7900       LOOP I 1 TWOND ;
   7901         MSC(I) := MAP(I) ;
   7902         ENDLOOP ;
   7903       ENDIF ;
   7904     NTS := NOC ;
   7905     E1N := E1 ;
   7906     H1N := H1 ;
   7907     E2N := E2 ;
   7908     H2N := H2 ;
   7909     PPOL( 1) := CONS(CHIM)/R ;
   7910     PPOL( 2) := -R ;
   7911     PPOL( 3) := 0 ;
   7912     PPOL( 4) := D ;
   7913     PPOL( 5) := 0 ;
   7914     PPOL( 6) := 0 ;
   7915     PPOL( 7) := SIN(-E1N) ;
   7916     PPOL( 8) :=  COS(-E1N) ;
   7917     IF H1N#0 ;
   7918       PPOL( 7) := PPOL( 7)/H1N ;
   7919       PPOL( 8) :=  PPOL( 8)/H1N ;
   7920       ENDIF ;
   7921     PPOL( 9) := R*(COS(PHI) - 1) ;
   7922     PPOL(10) :=  R*SIN(PHI) ;
   7923     PPOL(11) := SIN(PHI-E2N) ;
   7924     PPOL(12) := -COS(E2N-PHI) ;
   7925     IF H2N#0 ;
   7926       PPOL(11) := PPOL(11)/H2N ;
   7927       PPOL(12) :=  PPOL(12)/H2N ;
   7928       ENDIF ;
   7929     PPOL(11) := PPOL(11) + PPOL(9) ;
   7930     PPOL(12) := PPOL(12) + PPOL(10) ;
   7931     PPOL(13) := H1N ;
   7932     PPOL(14) := H2N ;
   7933     PPOL(20) := PHI ;
   7934     LOOP I 1 4 ;
   7935       LOOP J 1 4 ;
   7936         PPOL(20+4*(I-1)+J) := W(I,J) ;
   7937         ENDLOOP ;
   7938       ENDLOOP ;
   7939     LDL := 10*D ;
   7940     LOCSET 0 -LDL 0 0 0 0 ; %LOCSET: 1059
   7941     IF LFT=3 ;
   7942       LOCSET R*(COS(0.5*PHI)-1) R*SIN(0.5*PHI) 0.5*PHI 0.5*R*PHI 0 0 ;
                   %LOCSET: 1059
   7943       SDELEREF 0.5*R*PHI -LDL D/200 D 7*D D ; %SDELEREF: 6590
   7944       ENDIF ;
   7945     UMS ; %UMS: 1414
   7946     DLACT MSC -LDL ; %DLACT: 6497
   7947     SNM MSC MS ; %SNM: 1476
   7948     SSNM SSCR SM ; %SSNM: 1491
   7949     SDELE 0 R*PHI+2*LDL MIN(R/10000,D/200) MIN(R/20,D) MIN(R,7*D) D ; 
                  %SDELE: 6532 %MIN:  174 %MIN:  174 %MIN:  174
   7950     UPDATEMAP MSC MS MSC SSCR SM SSCR ; %UPDATEMAP: 1170
   7951     DLACT MSC -LDL ; %DLACT: 6497
   7952     SLOC := R*PHI ;
   7953     XLOC := XLOC+LDL*SIN(PLOC) ;
   7954     ZLOC := ZLOC-LDL*COS(PLOC) ;
   7955     UPDATE 1 1 ; %UPDATE: 1206
   7956     FR LFT ; %FR: 5390
   7957     ENDPROCEDURE ;
   7958   PROCEDURE CMR I D ;
   7959     VARIABLE MU 1 ;
   7960     MU := 1.2566E-6 ;
   7961     CE := 'CMR' ;
   7962     NPOL := 1 ;
   7963     PPOL(1) := MU*I/(2*D) ;
   7964     MPOL(1) := 20 ;
   7965     NSDP := 5 ;
   7966     LOFF := 1 ;
   7967     DSDED 5E4*D 0 1E-4*D 1E4*D 1E4*D D ; %DSDED: 6616
   7968     ENDPROCEDURE ;
   7969   PROCEDURE CMG B D ;
   7970     NPOL := 1 ;
   7971     PPOL(1) := B ;
   7972     MPOL(1) :=  20 ;
   7973     NSDP := 3 ;
   7974     CE := 'CMG' ;
   7975     LOFF := 1 ;
   7976     DSDED 5*D 0 D/40 D 10*D D ; %DSDED: 6616
   7977     ENDPROCEDURE ;
   7978   PROCEDURE CML B D ;
   7979     NPOL := 1 ;
   7980     PPOL(1) := B ;
   7981     MPOL(1) := 20 ;
   7982     NSDP := 7 ;
   7983     CE := 'CML' ;
   7984     LOFF := 1 ;
   7985     DSDED 5E4*D 0 1E-4*D 1E4*D 1E4*D D ; %DSDED: 6616
   7986     ENDPROCEDURE ;
   7987   PROCEDURE CMSI I N D L ;
   7988     VARIABLE MU 1 ;
   7989     MU := 1.2566E-6 ;
   7990     CE := 'CMSI' ;
   7991     NPOL := 1 ;
   7992     PPOL(1) := MU*I*N/2 ;
   7993     PPOL(2) := L ;
   7994     MPOL(1) := 20 ;
   7995     NSDP := 10 ;
   7996     LOFF := 1 ;
   7997     DSDED 200*D L 1E-4*D D 3*D D ; %DSDED: 6616
   7998     ENDPROCEDURE ;
   7999   PROCEDURE CMS B D L ;
   8000     NPOL := 1 ;
   8001     PPOL(1) := B*D/2/TANH(L/2/D) ;
   8002     PPOL(2) := L ;
   8003     MPOL(1) := 20 ;
   8004     NSDP := 8 ;
   8005     LOFF := 1 ;
   8006     CE := 'CMS' ;
   8007     DSDED 25*D L 1E-4*D D 3*D D ; %DSDED: 6616
   8008     ENDPROCEDURE ;
   8009   PROCEDURE CMSP B D L S1 S2 ;
   8010     VARIABLE DS1 1 ;
   8011     VARIABLE DS2 1 ;
   8012     VARIABLE MS NM1 MAX(8,NV) ; %MAX:  171
   8013     VARIABLE SM NM2 3 3 ;
   8014     NPOL := 1 ;
   8015     PPOL(1) := B*D/2/TANH(L/2/D) ;
   8016     PPOL(2) := L ;
   8017     MPOL(1) := 20 ;
   8018     NSDP := 8 ;
   8019     LOFF := 1 ;
   8020     CE := 'CMSP' ;
   8021     UMS ; %UMS: 1414
   8022     SNM MSC MS ; %SNM: 1476
   8023     SSNM SSCR SM ; %SSNM: 1491
   8024     DS1 := 0 ;
   8025     IF ABS(S1)<1E-5 ;
   8026       DS1 := L/2-20*D ;
   8027       ENDIF ;
   8028     IF ABS(S1)<1E-5 ;
   8029       DLACT MS DS1 ; %DLACT: 6497
   8030       ELSEIF TRUE ;
   8031       DS1 := S1 ;
   8032       ENDIF ;
   8033     IF ABS(S2-L)<1E-5 ;
   8034       DS2 := 20*D+L/2 ;
   8035       ELSEIF TRUE ;
   8036       DS2 := S2 ;
   8037       ENDIF ;
   8038     LOCSET 0 DS1 0 DS1 0 0 ; %LOCSET: 1059
   8039     SDELE DS1 DS2 1E-4*D (20*D-L/2)/100 3*D D ; %SDELE: 6532
   8040     UPDATEMAP MSC MS MSC SSCR SM SSCR ; %UPDATEMAP: 1170
   8041     IF ABS(S2-L)<1E-5 ;
   8042       DLACT MSC L/2-20*D ; %DLACT: 6497
   8043       ZLOC := ZLOC-(L/2-20*D) ;
   8044       ENDIF ;
   8045     SLOC := S2-S1 ;
   8046     UPDATE 1 1 ; %UPDATE: 1206
   8047     ENDPROCEDURE ;
   8048   PROCEDURE CMST NI R1 R2 L ;
   8049     VARIABLE MU 1 ;
   8050     MU := 1.2566E-6 ;
   8051     IF (R1<0)+(R1=0) ;
   8052       WRITE 6 ' *** ERROR in CMST, R1 < 0 or R1 = 0' ;
   8053       QUIT 0 ;
   8054       ELSEIF (R2<R1)+(R2=R1) ;
   8055       WRITE 6 ' *** ERROR in CMST, R2 < R1 or R2 = R1' ;
   8056       QUIT 0 ;
   8057       ENDIF ;
   8058     CE := 'CMST' ;
   8059     NPOL := 1 ;
   8060     PPOL(1) := MU*NI/4/(R2-R1) ;
   8061     PPOL(2) := L ;
   8062     PPOL(3) := R1 ;
   8063     PPOL(4) := R2 ;
   8064     MPOL(1) := 20 ;
   8065     NSDP := 13 ;
   8066     LOFF := 1 ;
   8067     DSDED 200*R2 L 1E-4*R1 R1 3*R1 R1 ; %DSDED: 6616
   8068     ENDPROCEDURE ;
   8069   PROCEDURE CMSTP N NI R1 R2 L X S1 S2 ;
   8070     VARIABLE MU 1 ;
   8071     VARIABLE F 1 ;
   8072     VARIABLE D 1 ;
   8073     VARIABLE IS 1 ;
   8074     CE := 'CMSTP' ;
   8075     MU := 1.2566E-6 ;
   8076     D := 1D8 ;
   8077     PPOL(1) := N ;
   8078     LOOP IS 1 N ;
   8079       D := MIN(D,R1(IS)) ; %MIN:  174
   8080       IF (R2(IS)<R1(IS))+(R2(IS)=R1(IS))+(L(IS)<0) ;
   8081         PPOL(1) := -1 ;
   8082         ENDIF ;
   8083       MFD(IS,1) := MU*NI(IS)/4/(R2(IS)-R1(IS)) ;
   8084       MFD(IS,2) := L(IS) ;
   8085       MFD(IS,3) := R1(IS) ;
   8086       MFD(IS,4) := R2(IS) ;
   8087       MFD(IS,5) := X(IS) ;
   8088       ENDLOOP ;
   8089     IF (D<0)+(D=0)+(D=1D8) ;
   8090       WRITE 6 ' *** ERROR in CMSTP, R1<0 or R1=0 or R1 too large' ;
   8091       QUIT 0 ;
   8092       ELSEIF PPOL(1)=-1 ;
   8093       WRITE 6 ' *** ERROR in CMSTP, R2<R1 or R2=R1 or L<0' ;
   8094       QUIT 0 ;
   8095       ENDIF ;
   8096     F := 200*D ;
   8097     NPOL := 1 ;
   8098     MPOL(1) := 20 ;
   8099     NSDP := 14 ;
   8100     LOFF := 1 ;
   8101     LOCSET 0 S1 0 S1 0 0 ; %LOCSET: 1059
   8102     SDELE S1 S2 1E-4*D D 3*D D ; %SDELE: 6532
   8103     UPDATE 1 1 ; %UPDATE: 1206
   8104     ENDPROCEDURE ;
   8105   PROCEDURE WI B K L D K1 IA A ;
   8106     VARIABLE L1 1 ;
   8107     VARIABLE LS 1 ;
   8108     VARIABLE I 1 ;
   8109     VARIABLE X 1 ;
   8110     VARIABLE XLOC0 1 ;
   8111     VARIABLE ZLOC0 1 ;
   8112     VARIABLE PLOC0 1 ;
   8113     VARIABLE SLOC0 1 ;
   8114     VARIABLE LLPI 1 ;
   8115     VARIABLE MS NM1 MAX(8,NV) ; %MAX:  171
   8116     VARIABLE SM NM2 3 3 ;
   8117     VARIABLE SCE 1 ;
   8118     SCE := 2E-5 ;
   8119     PPOL(1) := B ;
   8120     PPOL(2) := 2*PI/K ;
   8121     PPOL(3) := D ;
   8122     PPOL(4) := L ;
   8123     PPOL(5) := K1 ;
   8124     PPOL(6) := IA ;
   8125     NSDP := -3 ;
   8126     LOFF := 2 ;
   8127     CE := 'WI' ;
   8128     IF IA=0 ;
   8129       LOOP I 1 10 ;
   8130         PPOL(I+6) := 0 ;
   8131         ENDLOOP ;
   8132       PPOL(8) := 8 ;
   8133       L1 := 5*D ;
   8134       ELSEIF IA=1 ;
   8135       LOOP I 1 10 ;
   8136         PPOL(I+6) := A(I) ;
   8137         ENDLOOP ;
   8138       L1 := 10*D ;
   8139       ELSEIF TRUE ;
   8140       WRITE 6 ' *** ERROR in WI fringe field mode' ;
   8141       ENDIF ;
   8142     DR := D ;
   8143     LOCSET 0 0 0 SCE 0 0 ; %LOCSET: 1059
   8144     UPDATE 0 0 ; %UPDATE: 1206
   8145     SPOS := SPOS-SCE ;
   8146     LLPI := LPI ;
   8147     LPI := 0 ;
   8148     LS := L+4*L1 ;
   8149     UMS ; %UMS: 1414
   8150     DLACT MSC -L1 ; %DLACT: 6497
   8151     SNM MSC MS ; %SNM: 1476
   8152     SSNM SSCR SM ; %SSNM: 1491
   8153     LRKO := -LRKO ;
   8154     X := L ;
   8155     FIT X ;
   8156       LOCSET 0 -L1 0 0 0 0 ; %LOCSET: 1059
   8157       SDELEREF -L1 X K/500 K/10 K D ; %SDELEREF: 6590
   8158       ENDFIT L*1E-5 100 1 ABS(ZLOC-L) ;
   8159     LRKO := -LRKO ;
   8160     XLOC0 := XLOC ;
   8161     ZLOC0 := ZLOC ;
   8162     PLOC0 := PLOC ;
   8163     SLOC0 := SLOC ;
   8164     LOCSET 0 -L1 0 0 0 0 ; %LOCSET: 1059
   8165     SDELE 0 LS K/500 K/10 K D ; %SDELE: 6532
   8166     UPDATEMAP MSC MS MSC SSCR SM SSCR ; %UPDATEMAP: 1170
   8167     DLACT MSC -(ZLOC-L) ; %DLACT: 6497
   8168     LOCSET XLOC0 ZLOC0 PLOC0 SLOC0 0 0 ; %LOCSET: 1059
   8169     UPDATE 1 1 ; %UPDATE: 1206
   8170     LPI := LLPI ;
   8171     PS D ; %PS: 6527
   8172     ENDPROCEDURE ;
   8173   PROCEDURE MF L A NX NZ DX DZ SIGMA D SX SZ SPHI ;
   8174     VARIABLE DS1 1 ;
   8175     VARIABLE IX 1 ;
   8176     VARIABLE IZ 1 ;
   8177     IF (SIGMA<0.5)+(SIGMA>5.0) ;
   8178       WRITE 6 ' *** ERROR in MF, SIGMA < 0.5  or  SIGMA > 5.0' ;
   8179       ENDIF ;
   8180     IF (DX<0)+(DX=0)+(DZ<0)+(DZ=0) ;
   8181       WRITE 6 ' *** ERROR in MF, DX =< 0  or  DZ =< 0' ;
   8182       ENDIF ;
   8183     MFP(1) := 0 ;
   8184     LOOP IX 1 NX ;
   8185       LOOP IZ 1 NZ ;
   8186         MFD(IX,IZ) := A(IX,IZ) ;
   8187         ENDLOOP ;
   8188       ENDLOOP ;
   8189     PPOL(1) := NX ;
   8190     PPOL(2) := NZ ;
   8191     PPOL(3) := DX ;
   8192     PPOL(4) := DZ ;
   8193     PPOL(5) := SIGMA ;
   8194     NSDP := -5 ;
   8195     LOFF := 2 ;
   8196     DS1 := MIN(DX,DZ) ; %MIN:  174
   8197     LOCSET SX SZ -SPHI*DEGRAD 0 0 0 ; %LOCSET: 1059
   8198     CE := 'MF' ;
   8199     SDELE 0 L DS1/100 SQRT(DS1*L/5) L/5 D ; %SDELE: 6532
   8200     UPDATE 1 1 ; %UPDATE: 1206
   8201     IF MFP(1)>0 ;
   8202       WRITE 6 (' --- WARNING in MF, out of range of data at '&        
                  SF(MFP(1),'(I8)')&' points') ; %SF:  230
   8203       ENDIF ;
   8204     ENDPROCEDURE ;
   8205   PROCEDURE MFFLD XMIN ZMIN XMAX ZMAX DX DZ ;
   8206     VARIABLE NX 1 ;
   8207     VARIABLE NZ 1 ;
   8208     NX := INT((XMAX-XMIN)/DX+1.00001) ;
   8209     NZ := INT((ZMAX-ZMIN)/DZ+1.00001) ;
   8210     IF (NX<2)+(NZ<2) ;
   8211       WRITE 6 ' *** ERROR in MFFLD, NX < 2 or NZ < 2' ;
   8212       QUIT 0 ;
   8213       ENDIF ;
   8214     IF LFR#3 ;
   8215       WRITE 6 ' *** ERROR in MFFLD, call FR 3 before MFFLD' ;
   8216       ENDIF ;
   8217     MFP(2) := 1 ;
   8218     OPENF 98 'MFFLD.DAT' 'UNKNOWN' ;
   8219     WRITE 98 ' MIN (X,Z) = ('&SF(XMIN,'(G16.9)')&','&SF(ZMIN,'(G16.9)'
                  )&')' ; %SF:  230 %SF:  230
   8220     WRITE 98 ' MAX (X,Z) = ('&SF(XMAX,'(G16.9)')&','&SF(ZMAX,'(G16.9)'
                  )&')' ; %SF:  230 %SF:  230
   8221     WRITE 98 ' DX = '&SF(DX,'(D16.9)')&',  DZ = '&SF(DZ,'(D16.9)') ; %
                  SF:  230 %SF:  230
   8222     WRITE 98 ' NX = '&SF(NX,'(I6)')&',  NZ = '&SF(NZ,'(I6)') ; %SF:  2
                  30 %SF:  230
   8223     MFP(3) := XMIN ;
   8224     MFP(4) := XMAX ;
   8225     MFP(5) := DX ;
   8226     MFP(6) := ZMIN ;
   8227     MFP(7) := ZMAX ;
   8228     MFP(8) := DZ ;
   8229     ENDPROCEDURE ;
   8230   PROCEDURE MFFLDIN A NX NZ DX DZ ;
   8231     VARIABLE STR 80 ;
   8232     VARIABLE IX 1 ;
   8233     VARIABLE IZ 1 ;
   8234     VARIABLE ADT 1 ;
   8235     OPENF 98 'MFFLD.DAT' 'OLD' ;
   8236     READ 98 STR ;
   8237     READ 98 STR ;
   8238     READ 98 STR ;
   8239     DX := R(STR,7,22) ; %R:  224
   8240     DZ := R(STR,31,46) ; %R:  224
   8241     READ 98 STR ;
   8242     NX := R(STR,7,12) ; %R:  224
   8243     NZ := R(STR,21,26) ; %R:  224
   8244     LOOP IX 1 NX ;
   8245       LOOP IZ 1 NZ ;
   8246         READ 98 ADT ;
   8247         A(IX,IZ) := ADT ;
   8248         ENDLOOP ;
   8249       ENDLOOP ;
   8250     CLOSEF 98 ;
   8251     ENDPROCEDURE ;
   8252   FUNCTION FGDATCHECK DUMMY;
   8253     VARIABLE IB 1;
   8254     VARIABLE IL 1;
   8255     VARIABLE NB 1;
   8256     VARIABLE NS0 1;
   8257     VARIABLE DR 1;
   8258     VARIABLE OR 1;
   8259     FGDATCHECK := LO(1) ;
   8260     NB := MFD(1,1) ;
   8261     IF NB<2 ;
   8262       FGDATCHECK := LO(0) ;
   8263       WRITE 6         ' *** ERROR in FGDATCHECK, at least two radius b
                  locks required';
   8264       ENDIF;
   8265     IF FGDATCHECK ;
   8266       LOOP IB 2 NB+1 ;
   8267         IF MFD(IB,1)<2 ;
   8268           FGDATCHECK := LO(0) ;
   8269           WRITE 6 (' *** ERROR in '&            'FGDATCHECK, block hea
                  der and one Fourier mode required') ;
   8270           ELSEIF LENGTH(MFD(IB,2))<2 ;
   8271           FGDATCHECK := LO(0) ;
   8272           WRITE 6            ' *** ERROR in FGDATCHECK, block header t
                  oo short' ;
   8273           ELSEIF LENGTH(MFD(IB,2))>2 ;
   8274           WRITE 6            ' --- WARNING in FGDATCHECK, block header
                   contains extra data' ;
   8275           ENDIF ;
   8276         ENDLOOP ;
   8277       ENDIF ;
   8278     IF FGDATCHECK ;
   8279       DR := ABS(MFD(3,2)|1 - MFD(2,2)|1) ;
   8280       NS0 := MFD(2,2)|2 ;
   8281       OR := MFD(2,2)|1 - DR ;
   8282       LOOP IB 2 NB+1 ;
   8283         IF (MFD(IB,2)|1 - OR - DR)>1E-14 ;
   8284           FGDATCHECK := LO(0) ;
   8285           WRITE 6            ' *** ERROR in FGDATCHECK, radii not even
                  ly spaced and increasing' ;
   8286           ENDIF;
   8287         IF MFD(IB,2)|2#NS0 ;
   8288           FGDATCHECK := LO(0) ;
   8289           WRITE 6            ' *** ERROR in FGDATCHECK, number of sect
                  ors not constant' ;
   8290           ENDIF ;
   8291         OR := MFD(IB,2)|1 ;
   8292         ENDLOOP ;
   8293       ENDIF ;
   8294     IF FGDATCHECK ;
   8295       LOOP IB 2 NB+1 ;
   8296         IF MFD(IB,3)|1<0 ;
   8297           WRITE 6            ' --- WARNING in FGDATCHECK, negative con
                  stant Fourier coefficient';
   8298           ENDIF ;
   8299         LOOP IL 3 MFD(IB,1)+1 ;
   8300           IF LENGTH(MFD(IB,IL))<2 ;
   8301             FGDATCHECK := LO(0) ;
   8302             WRITE 6            ' *** ERROR in FGDATCHECK, Fourier coef
                  ficent and phase required' ;
   8303             ELSEIF LO(1) ;
   8304             IF LENGTH(MFD(IB,IL))>2 ;
   8305               WRITE 6                  ' --- WARNING in FGDATCHECK, da
                  ta line contains extra data' ;
   8306               ENDIF ;
   8307             IF ABS(MFD(IB,IL)|2)>PI+1E-14 ;
   8308               WRITE 6                  ' --- WARNING in FGDATCHECK, ph
                  ase not in [-pi,pi]'                  MFD(IB,IL);
   8309               ENDIF ;
   8310             ENDIF ;
   8311           ENDLOOP ;
   8312         ENDLOOP ;
   8313       ENDIF ;
   8314     ENDFUNCTION ;
   8315   PROCEDURE EQ L VV D ;
   8316     NPOL := 1 ;
   8317     PPOL(1) := VV/D/D ;
   8318     MPOL(1) := -2 ;
   8319     LOFF := 1 ;
   8320     FFELE L D 0 1 2 'EQ' ; %FFELE: 6816
   8321     ENDPROCEDURE ;
   8322   PROCEDURE EH L VV D ;
   8323     NPOL := 1 ;
   8324     PPOL(1) := VV/D/D/D ;
   8325     MPOL(1) := -3 ;
   8326     LOFF := 1 ;
   8327     FFELE L D 0 1 2 'EH' ; %FFELE: 6816
   8328     ENDPROCEDURE ;
   8329   PROCEDURE EO L VV D ;
   8330     NPOL := 1 ;
   8331     PPOL(1) := VV/D/D/D/D ;
   8332     MPOL(1) := -4 ;
   8333     LOFF := 1 ;
   8334     FFELE L D 0 1 2 'EO' ; %FFELE: 6816
   8335     ENDPROCEDURE ;
   8336   PROCEDURE ED L VV D ;
   8337     NPOL := 1 ;
   8338     PPOL(1) := VV/D/D/D/D/D ;
   8339     MPOL(1) := -5 ;
   8340     LOFF := 1 ;
   8341     FFELE L D 0 1 2 'ED' ; %FFELE: 6816
   8342     ENDPROCEDURE ;
   8343   PROCEDURE EZ L VV D ;
   8344     NPOL := 1 ;
   8345     PPOL(1) := VV/D/D/D/D/D/D ;
   8346     MPOL(1) := -6 ;
   8347     LOFF := 1 ;
   8348     FFELE L D 0 1 2 'EZ' ; %FFELE: 6816
   8349     ENDPROCEDURE ;
   8350   PROCEDURE E5 L VQ VH VO VD VZ D ;
   8351     NPOL := 5 ;
   8352     PPOL(1) := VQ/D/D ;
   8353     MPOL(1) := -2 ;
   8354     PPOL(2) := VH/D/D/D ;
   8355     MPOL(2) := -3 ;
   8356     PPOL(3) := VO/D/D/D/D ;
   8357     MPOL(3) := -4 ;
   8358     PPOL(4) := VD/D/D/D/D/D ;
   8359     MPOL(4) := -5 ;
   8360     PPOL(5) := VZ/D/D/D/D/D/D ;
   8361     MPOL(5) := -6 ;
   8362     LOFF := 1 ;
   8363     FFELE L D 0 1 2 'E5' ; %FFELE: 6816
   8364     ENDPROCEDURE ;
   8365   PROCEDURE EM L VA NVA D ;
   8366     VARIABLE I 1 ;
   8367     VARIABLE DP NM2 ;
   8368     DP := 1/D ;
   8369     LOOP I 1 NVA ;
   8370       DP := DP/D ;
   8371       PPOL(I) := VA(I)*DP ;
   8372       MPOL(I) := -(I+1) ;
   8373       ENDLOOP ;
   8374     LOFF := 1 ;
   8375     NPOL := NVA ;
   8376     FFELE L D 0 1 2 'EM' ; %FFELE: 6816
   8377     ENDPROCEDURE ;
   8378   PROCEDURE EMS L VA VS NV D ;
   8379     VARIABLE I 1 ;
   8380     VARIABLE DP NM2 ;
   8381     DP := 1/D ;
   8382     LOOP I 1 NV ;
   8383       DP := DP/D ;
   8384       PPOL(I   ) := VA(I)*DP ;
   8385       MPOL(I   ) := -(I+1) ;
   8386       ENDLOOP ;
   8387     DP := 1/D ;
   8388     LOOP I 1 NV ;
   8389       DP := DP/D ;
   8390       PPOL(I+NV) := -VS(I)*DP*(I+1) ;
   8391       MPOL(I+NV) := -(I+1+20) ;
   8392       ENDLOOP ;
   8393     LOFF := 1 ;
   8394     NPOL := 2*NV ;
   8395     FFELE L D 0 1 2 'EMS' ; %FFELE: 6816
   8396     ENDPROCEDURE ;
   8397   PROCEDURE EBEND R PHI D N NT CI ;
   8398     VARIABLE RPP 1 ;
   8399     VARIABLE LDL 1 ;
   8400     VARIABLE I 1 ;
   8401     VARIABLE MS NM1 MAX(8,NV) ; %MAX:  171
   8402     VARIABLE SM NM2 3 3 ;
   8403     CE := CI ;
   8404     DR := D ;
   8405     LOFF := 2 ;
   8406     IF CONS(R)<0 ;
   8407       WRITE 6 ' *** ERROR in '&CE&', negative radius' ;
   8408       QUIT 0 ;
   8409       ELSEIF CONS(PHI)<0 ;
   8410       WRITE 6 ' *** ERROR in '&CE&', negative angle' ;
   8411       QUIT 0 ;
   8412       ENDIF ;
   8413     IF LFR=0 ;
   8414       NPOL := NT+1 ;
   8415       PPOL(1) := CONS(CHIE)/R/1000 ;
   8416       RPP := 1 ;
   8417       LOOP I 1 NT ;
   8418         RPP := RPP*R ;
   8419         PPOL(I+1) := -PPOL(1)*N(I)/RPP/(I+1) ;
   8420         ENDLOOP ;
   8421       LOOP I 1 NPOL ;
   8422         MPOL(I) := -I ;
   8423         ENDLOOP ;
   8424       SIELE R*PHI D ; %SIELE: 6638
   8425       LOCSET R*(COS(PHI)-1) R*SIN(PHI) PHI R*PHI 0 0 ; %LOCSET: 1059
   8426       UPDATE 1 1 ; %UPDATE: 1206
   8427       ELSEIF (LFR=3)+(LFR=2.5) ;
   8428       NSDP := -11 ;
   8429       LOOP I 1 36 ;
   8430         PPOL(I) := 0 ;
   8431         ENDLOOP ;
   8432       PPOL(1) := CONS(CHIE)/R/1000 ;
   8433       PPOL(2) := -R ;
   8434       PPOL(4) := D ;
   8435       PPOL(8) := 1 ;
   8436       PPOL(9) := R*(COS(PHI)-1) ;
   8437       PPOL(10) := R*SIN(PHI) ;
   8438       PPOL(11) := PPOL(9)+SIN(PHI) ;
   8439       PPOL(12) := PPOL(10)-COS(PHI) ;
   8440       IF NT>16 ;
   8441         WRITE 6 ' --- WARNING in '&CE&', NT is too large.' ;
   8442         ENDIF ;
   8443       PPOL(20) := MIN(NT,16) ; %MIN:  174
   8444       LOOP I 1 PPOL(20) ;
   8445         PPOL(20+I) := N(I)/(I+1) ;
   8446         ENDLOOP ;
   8447       LDL := 10*D ;
   8448       LOCSET 0 -LDL 0 0 0 0 ; %LOCSET: 1059
   8449       IF LFR=3 ;
   8450         LOCSET R*(COS(0.5*PHI)-1) R*SIN(0.5*PHI) 0.5*PHI 0.5*R*PHI 0 0
                   ; %LOCSET: 1059
   8451         SDELEREF 0.5*R*PHI -LDL D/200 D 7*D D ; %SDELEREF: 6590
   8452         ENDIF ;
   8453       UMS ; %UMS: 1414
   8454       DLACT MSC -LDL ; %DLACT: 6497
   8455       SNM MSC MS ; %SNM: 1476
   8456       SSNM SSCR SM ; %SSNM: 1491
   8457       LOCSET XLOC ZLOC PLOC 0 0 0 ; %LOCSET: 1059
   8458       SDELE 0 R*PHI+2*LDL MIN(R/10000,D/200) MIN(R/20,D) MIN(R,7*D) D 
                  ; %SDELE: 6532 %MIN:  174 %MIN:  174 %MIN:  174
   8459       UPDATEMAP MSC MS MSC SSCR SM SSCR ; %UPDATEMAP: 1170
   8460       DLACT MSC -LDL ; %DLACT: 6497
   8461       SLOC := R*PHI ;
   8462       XLOC := XLOC+LDL*SIN(PLOC) ;
   8463       ZLOC := ZLOC-LDL*COS(PLOC) ;
   8464       UPDATE 1 1 ; %UPDATE: 1206
   8465       ELSEIF LO(1) ;
   8466       WRITE 6         ' *** ERROR in '&CE&', FR '&S(LFR)&' not support
                  ed.' ; %S:  227
   8467       QUIT 0 ;
   8468       ENDIF ;
   8469     ENDPROCEDURE ;
   8470   PROCEDURE EC R PHID D N NT ;
   8471     EBEND R PHID*DEGRAD D N NT 'EC' ; %EBEND: 8397
   8472     ENDPROCEDURE ;
   8473   PROCEDURE ES R PHID D N1 N2 N3 N4 N5 ;
   8474     VARIABLE NT 1 ;
   8475     VARIABLE N 1 5 ;
   8476     NT := 5 ;
   8477     N(1) := N1 ;
   8478     N(2) := N2 ;
   8479     N(3) := N3 ;
   8480     N(4) := N4 ;
   8481     N(5) := N5 ;
   8482     EBEND R PHID*DEGRAD D N NT 'ES' ; %EBEND: 8397
   8483     ENDPROCEDURE ;
   8484   PROCEDURE ECL R PHID D ;
   8485     VARIABLE NT 1 ;
   8486     VARIABLE N 1 MAX(5,NO+1) ; %MAX:  171
   8487     VARIABLE I 1 ;
   8488     NT := MAX(5,NO+1) ; %MAX:  171
   8489     LOOP I 1 NT ;
   8490       N(I) := 1 ;
   8491       ENDLOOP ;
   8492     LOOP I 2 NT 2 ;
   8493       N(I) := -N(I) ;
   8494       ENDLOOP ;
   8495     EBEND R PHID*DEGRAD D N NT 'ECL' ; %EBEND: 8397
   8496     ENDPROCEDURE ;
   8497   PROCEDURE ESP R PHID D ;
   8498     VARIABLE NT 1 ;
   8499     VARIABLE N 1 MAX(5,NO+1) ; %MAX:  171
   8500     VARIABLE I 1 ;
   8501     NT := MAX(5,NO+1) ; %MAX:  171
   8502     LOOP I 1 NT ;
   8503       N(I) := I+1 ;
   8504       ENDLOOP ;
   8505     LOOP I 2 NT 2 ;
   8506       N(I) := -N(I) ;
   8507       ENDLOOP ;
   8508     EBEND R PHID*DEGRAD D N NT 'ESP' ; %EBEND: 8397
   8509     ENDPROCEDURE ;
   8510   PROCEDURE WC RE RM L D NE NM NT ;
   8511     VARIABLE I 1 ;
   8512     NPOL := 2+2*NT ;
   8513     PPOL(1) := -CONS(CHIE)/RE/1000 ;
   8514     MPOL(1) := -1 ;
   8515     PPOL(2) :=  CONS(CHIM)/RM      ;
   8516     MPOL(2) := +1 ;
   8517     LOOP I 1 NT ;
   8518       PPOL(2+I) := PPOL(1)*NE(I)/(I+1) ;
   8519       MPOL(2+I) := -I-1 ;
   8520       PPOL(2+I+NT) := PPOL(2)*NM(I) ;
   8521       MPOL(2+I+NT) := I+1 ;
   8522       ENDLOOP ;
   8523     LOFF := 2 ;
   8524     FFELE L D 1/RM-1/RE -1 -2 'WC' ; %FFELE: 6816
   8525     ENDPROCEDURE ;
   8526   PROCEDURE WF RE RM L D ;
   8527     WC RE RM L D 0 0 0 ; %WC: 8510
   8528     ENDPROCEDURE ;
   8529   PROCEDURE MSEM R PHI DM NB DE EV N CI ;
   8530     VARIABLE I 1 ;
   8531     VARIABLE NM 1 ;
   8532     VARIABLE F NMP ;
   8533     VARIABLE LDL 1 ;
   8534     VARIABLE MS NM1 MAX(8,NV) ; %MAX:  171
   8535     VARIABLE SM NM2 3 3 ;
   8536     CE := CI ;
   8537     DR := DE ;
   8538     LOFF := 2 ;
   8539     IF LUM#1 ;
   8540       WRITE 6 ' *** ERROR, call UM before MSEM' ;
   8541       QUIT 0 ;
   8542       ELSEIF CONS(R)<0 ;
   8543       WRITE 6 ' *** ERROR in '&CE&', negative radius' ;
   8544       QUIT 0 ;
   8545       ELSEIF CONS(PHI)<0 ;
   8546       WRITE 6 ' *** ERROR in '&CE&', negative angle';
   8547       QUIT 0 ;
   8548       ENDIF ;
   8549     NPOL := 1 ;
   8550     PPOL(1) := CONS(CHIM)/R ;
   8551     MPOL(1) := 1 ;
   8552     F := 1 ;
   8553     LOOP I 1 N ;
   8554       F := F/R ;
   8555       IF ABS(NB(I))#0 ;
   8556         NPOL := NPOL+1 ;
   8557         MPOL(NPOL) := I+1 ;
   8558         PPOL(NPOL) := -PPOL(1)*NB(I)*F ;
   8559         ENDIF ;
   8560       ENDLOOP ;
   8561     NM := NPOL ;
   8562     F := 1/DE ;
   8563     LOOP I 1 N ;
   8564       F := F/DE ;
   8565       IF ABS(EV(I))#0 ;
   8566         NPOL := NPOL+1 ;
   8567         MPOL(NPOL) := -(I+1) ;
   8568         PPOL(NPOL) := EV(I)*F ;
   8569         ENDIF ;
   8570       ENDLOOP ;
   8571     MPOL(NPOL+1) := NM ;
   8572     PPOL(NPOL+1) := R ;
   8573     PPOL(NPOL+2) := R*(COS(PHI)-1) ;
   8574     PPOL(NPOL+4) := PPOL(NPOL+2)+SIN(PHI) ;
   8575     PPOL(NPOL+3) := R*SIN(PHI) ;
   8576     PPOL(NPOL+5) := PPOL(NPOL+3)-COS(PHI) ;
   8577     MPOL(NPOL+2) := 1 ;
   8578     IF (LFR=0)+(NPOL=NM) ;
   8579       SIELE R*PHI DE ; %SIELE: 6638
   8580       LOCSET R*(COS(PHI)-1) R*SIN(PHI) PHI R*PHI 0 0 ; %LOCSET: 1059
   8581       UPDATE 1 1 ; %UPDATE: 1206
   8582       ELSEIF (LFR=3)+(LFR=2.5) ;
   8583       NSDP := -21 ;
   8584       LDL := 10*DE ;
   8585       LOCSET 0 0 0 0 0 0 ; %LOCSET: 1059
   8586       IF LFR=3 ;
   8587         LOCSET R*(COS(0.5*PHI)-1) R*SIN(0.5*PHI) 0.5*PHI 0.5*R*PHI 0 0
                   ; %LOCSET: 1059
   8588         SDELEREF 0.5*R*PHI 0 DE/200 DE 7*DE DE ; %SDELEREF: 6590
   8589         ENDIF ;
   8590       MPOL(NPOL+2) := 0 ;
   8591       SDELE 0 -LDL MIN(R/10000,DE/200) MIN(R/20,DE) MIN(R,7*DE) DE ; %
                  SDELE: 6532 %MIN:  174 %MIN:  174 %MIN:  174
   8592       SNM MSC MS ; %SNM: 1476
   8593       SSNM SSCR SM ; %SSNM: 1491
   8594       MPOL(NPOL+2) := 1 ;
   8595       SDELE 0 R*PHI+2*LDL MIN(R/10000,DE/200) MIN(R/20,DE) MIN(R,7*DE)
                   DE ; %SDELE: 6532 %MIN:  174 %MIN:  174 %MIN:  174
   8596       UPDATEMAP MSC MS MS SSCR SM SM ; %UPDATEMAP: 1170
   8597       MPOL(NPOL+2) := 0 ;
   8598       SDELE 0 -LDL MIN(R/10000,DE/200) MIN(R/20,DE) MIN(R,7*DE) DE ; %
                  SDELE: 6532 %MIN:  174 %MIN:  174 %MIN:  174
   8599       UPDATEMAP MSC MS MSC SSCR SM SSCR ; %UPDATEMAP: 1170
   8600       SLOC := R*PHI ;
   8601       UPDATE 1 1 ; %UPDATE: 1206
   8602       ELSEIF LO(1) ;
   8603       WRITE 6         ' *** ERROR in MSEM, FR '&S(LFR)&' not supported
                  .' ; %S:  227
   8604       QUIT 0 ;
   8605       ENDIF ;
   8606     ENDPROCEDURE ;
   8607   PROCEDURE CEG V D ;
   8608     NPOL := 1 ;
   8609     PPOL(1) := V ;
   8610     MPOL(1) := -20 ;
   8611     NSDP := 3 ;
   8612     CE := 'CEG' ;
   8613     LOFF := 1 ;
   8614     DSDED 5*D 0 1E-4*D D 10*D D ; %DSDED: 6616
   8615     ENDPROCEDURE ;
   8616   PROCEDURE CEL V D L C ;
   8617     VARIABLE O 1 ;
   8618     O := 1.315 ;
   8619     NPOL := 1 ;
   8620     MPOL(1) := -20 ;
   8621     NSDP := 6 ;
   8622     DR := D/O ;
   8623     LOFF := 1 ;
   8624     CE := 'CEL' ;
   8625     PPOL(1) := -V/(2*O/D*C) ;
   8626     PPOL(2) := O*L/2/D ;
   8627     PPOL(3) := O*(C+L/2)/D ;
   8628     DSDED 5*D+C+L/2 0 1E-4*D D 10*D D/O ; %DSDED: 6616
   8629     ENDPROCEDURE ;
   8630   PROCEDURE CEA V D L C ;
   8631     NPOL := 1 ;
   8632     MPOL(1) := -20 ;
   8633     NSDP := 9 ;
   8634     LOFF := 1 ;
   8635     CE := 'CEA' ;
   8636     PPOL(1) := V/(PI*C) ;
   8637     PPOL(2) := L/2 ;
   8638     PPOL(3) := C+L/2 ;
   8639     DSDED 15*D+C+L/2 0 1E-4*D D 10*D D ; %DSDED: 6616
   8640     ENDPROCEDURE ;
   8641   PROCEDURE DC V D L ;
   8642     VARIABLE S1 1 ;
   8643     NPOL := 1 ;
   8644     MPOL(1) := -20 ;
   8645     NSDP := 11 ;
   8646     LOFF := 1 ;
   8647     CE := 'DC' ;
   8648     PPOL(1) := -V/L ;
   8649     LOCSET 0 0 0 0 0 0 ; %LOCSET: 1059
   8650     SDELE 0 L 1E-4*D D 10*D D ; %SDELE: 6532
   8651     UPDATE 1 1 ; %UPDATE: 1206
   8652     ENDPROCEDURE ;
   8653   PROCEDURE RF V N W PHI D ;
   8654     VARIABLE VV NM1 ;
   8655     VARIABLE VV0 100 ;
   8656     VARIABLE PP0 1 ;
   8657     VARIABLE PH 100 ;
   8658     VARIABLE EE0 1 ;
   8659     VARIABLE T NM1 ;
   8660     VARIABLE I 1 ;
   8661     PROCEDURE RFM  M ;
   8662       T := M(5)*(-PP0/EE0/CLIGHT) ;
   8663       VV := POLY(M(1),M(3),V,N)*SIN(W*2*PI*T+PH)*(1+M(8))*.001*Z0 ; %P
                  OLY:  515
   8664       M(2) := M(2)*PP0/CONS(P0) ;
   8665       IF ND>1 ;
   8666         M(4) := M(4)*PP0/CONS(P0) ;
   8667         ENDIF ;
   8668       IF ND>2 ;
   8669         M(5) := T*(-CONS(E0)/CONS(P0))*CLIGHT ;
   8670         M(6) := ( M(6)+(VV-CONS(VV0))/EE0)/(1+CONS(VV0)/EE0) ;
   8671         ENDIF ;
   8672       ENDPROCEDURE ;
   8673     IF LRP#1 ;
   8674       WRITE 6 ' *** ERROR, call RP before RF ' ;
   8675       QUIT 0 ;
   8676       ENDIF ;
   8677     PP0 := CONS(P0) ;
   8678     EE0 := CONS(E0) ;
   8679     PH := PHI*DEGRAD ;
   8680     VV0 := POLY(0,0,V,N)*SIN(PH)*.001*Z0 ; %POLY:  515
   8681     RP E0+VV0 M0 Z0 ; %RP: 6282
   8682     IF CONS(E0)<1E-10 ;
   8683       WRITE 6 ' *** RF TOO HIGH ' ;
   8684       QUIT 0 ;
   8685       ENDIF ;
   8686     RFM MAP ; %RFM: 8661
   8687     IF NRAY#0 ;
   8688       UMS ; %UMS: 1414
   8689       RFM MSC ; %RFM: 8661
   8690       ENDIF ;
   8691     LOCSET 0 0 0 0 0 0 ; %LOCSET: 1059
   8692     DR := D ;
   8693     CE := 'RF' ;
   8694     UPDATE 0 1 ; %UPDATE: 1206
   8695     ENDPROCEDURE ;
   8696   PROCEDURE GLASS IS0 P1 IS1 P2 IS2 N D AA ;
   8697     VARIABLE X NM1 ;
   8698     VARIABLE A NM1 ;
   8699     VARIABLE Y NM1 ;
   8700     VARIABLE B NM1 ;
   8701     VARIABLE TANA NM1 ;
   8702     VARIABLE TANB NM1 ;
   8703     VARIABLE L NM1 ;
   8704     VARIABLE NOM 1 ;
   8705     VARIABLE XL 1 ;
   8706     VARIABLE ZL 1 ;
   8707     VARIABLE PL 1 ;
   8708     PROCEDURE TRANS1 A B TANA TANB ;
   8709       VARIABLE SCR NM1 ;
   8710       SCR := ISRT(1-A*A-B*B) ;
   8711       TANA := A*SCR ;
   8712       TANB := B*SCR ;
   8713       ENDPROCEDURE ;
   8714     PROCEDURE TRANS2 TANA TANB A B ;
   8715       VARIABLE SCR NM1 ;
   8716       SCR := ISRT(1+TANA*TANA+TANB*TANB) ;
   8717       A := TANA*SCR ;
   8718       B := TANB*SCR ;
   8719       ENDPROCEDURE ;
   8720     PROCEDURE LL X TANA Y TANB P L IS ;
   8721       VARIABLE C1 NM1 ;
   8722       VARIABLE C2 NM1 ;
   8723       VARIABLE C3 NM1 ;
   8724       VARIABLE L1 NM1 ;
   8725       VARIABLE L2 NM1 ;
   8726       VARIABLE CS NM1 ;
   8727       VARIABLE Z1 NM1 ;
   8728       IF IS=0 ;
   8729         C1 := 1+TANA*TANA+TANB*TANB ;
   8730         C2 := TANA*X+TANB*Y-P ;
   8731         C3 := X*X+Y*Y ;
   8732         CS := C2*C2-C1*C3 ;
   8733         IF CONS(C2)*P>0 ;
   8734           WRITE 6 ' @@@ COSY CODE ERROR in GLASS, contact programer' ;

   8735           ENDIF ;
   8736         IF CONS(CS)<0 ;
   8737           WRITE 6 ' *** RAY CANNOT TOUCH THE LENS ' ;
   8738           ENDIF ;
   8739         L1 := (-C2-SQRT(CS))/C1 ;
   8740         L2 := (-C2+SQRT(CS))/C1 ;
   8741         L  := L1 ;
   8742         IF ABS(CONS(L1))>ABS(CONS(L2)) ;
   8743           L := L2 ;
   8744           ENDIF ;
   8745         X := X+TANA*L ;
   8746         Y := Y+TANB*L ;
   8747         ELSEIF IS>0 ;
   8748         Z1 := 0 ;
   8749         L := POLY(X,Y,P,IS) ; %POLY:  515
   8750         WHILE ABS(L-Z1)>1E-13 ;
   8751           X := X+TANA*(L-Z1) ;
   8752           Y := Y+TANB*(L-Z1) ;
   8753           Z1 := L ;
   8754           L := POLY(X,Y,P,IS) ; %POLY:  515
   8755           ENDWHILE ;
   8756         ENDIF ;
   8757       ENDPROCEDURE ;
   8758     PROCEDURE ANG X TANA Y TANB N P L IS IS0 ;
   8759       VARIABLE CA1 NM1 ;
   8760       VARIABLE CA2 NM1 ;
   8761       VARIABLE CA3 NM1 ;
   8762       VARIABLE CB1 NM1 ;
   8763       VARIABLE CB2 NM1 ;
   8764       VARIABLE CB3 NM1 ;
   8765       VARIABLE CC1 NM1 ;
   8766       VARIABLE CC2 NM1 ;
   8767       VARIABLE CC3 NM1 ;
   8768       VARIABLE C1 NM1 ;
   8769       VARIABLE C2 NM1 ;
   8770       VARIABLE CD NM1 ;
   8771       VARIABLE S1 NM1 ;
   8772       VARIABLE S2 NM1 ;
   8773       VARIABLE S3 NM1 ;
   8774       VARIABLE S4 NM1 ;
   8775       VARIABLE I 1 ;
   8776       VARIABLE J 1 ;
   8777       VARIABLE P0 1 IS IS ;
   8778       IF IS=0 ;
   8779         CA1 := X/ABS(P) ;
   8780         CB1 := Y/ABS(P) ;
   8781         CC1 := (L-P)/ABS(P) ;
   8782         ELSEIF IS>0 ;
   8783         LOOP I 1 IS ;
   8784           LOOP J 1 IS ;
   8785             P0(I,J) := P(I+1,J)*I ;
   8786             ENDLOOP ;
   8787           ENDLOOP ;
   8788         CA1 := POLY(X,Y,P0,IS-1) ; %POLY:  515
   8789         LOOP I 1 IS ;
   8790           LOOP J 1 IS ;
   8791             P0(I,J) := P(I,J+1)*J ;
   8792             ENDLOOP ;
   8793           ENDLOOP ;
   8794         CB1 := POLY(X,Y,P0,IS-1) ; %POLY:  515
   8795         C1 := ISRT(CA1*CA1+CB1*CB1+1) ;
   8796         CC1 := -1*C1 ;
   8797         CA1 := CA1*C1 ;
   8798         CB1 := CB1*C1 ;
   8799         ENDIF ;
   8800       CC2 := ISRT(TANA*TANA+TANB*TANB+1) ;
   8801       CA2 := TANA*CC2 ;
   8802       CB2 := TANB*CC2 ;
   8803       S1 := CC1*CB2-CC2*CB1 ;
   8804       S2 := CC1*CA2-CC2*CA1 ;
   8805       C1 := (S1*CB1+S2*CA1)/N ;
   8806       C2 := (S1*S1+S2*S2)/N/N-CC1*CC1 ;
   8807       CD := C1*C1-C2 ;
   8808       IF CONS(CD)<0 ;
   8809         WRITE 6 ' *** TOT REFLECTION' ;
   8810         ENDIF ;
   8811       CC3 := -C1+SQRT(CD) ;
   8812       CB3 := (S1/N+CB1*CC3)/CC1 ;
   8813       CA3 := (S2/N+CA1*CC3)/CC1 ;
   8814       S3 := CA2*CA3+CB2*CB3+CC2*CC3 ;
   8815       TANA := CA3/CC3 ;
   8816       TANB := CB3/CC3 ;
   8817       CC3 := -C1-SQRT(CD) ;
   8818       CB3 := (S1/N+CB1*CC3)/CC1 ;
   8819       CA3 := (S2/N+CA1*CC3)/CC1 ;
   8820       S4 := CA2*CA3+CB2*CB3+CC2*CC3 ;
   8821       CA3 := CA3/CC3 ;
   8822       CB3 := CB3/CC3 ;
   8823       IF IS0<0 ;
   8824         IF CONS(S3)>CONS(S4) ;
   8825           TANA := CA3 ;
   8826           TANB := CB3 ;
   8827           ENDIF ;
   8828         ENDIF ;
   8829       IF IS0>0 ;
   8830         IF CONS(S3)<CONS(S4) ;
   8831           TANA := CA3 ;
   8832           TANB := CB3 ;
   8833           ENDIF ;
   8834         ENDIF ;
   8835       ENDPROCEDURE ;
   8836     NOM := NOC ;
   8837     IF IS1+IS2>0 ;
   8838       CO NOM+1 ; %CO:  910
   8839       ENDIF ;
   8840     X := AA(1) ;
   8841     A := AA(2) ;
   8842     Y := AA(3) ;
   8843     B := AA(4) ;
   8844     TRANS1 A B TANA TANB ; %TRANS1: 8708
   8845     LL X TANA Y TANB P1 L IS1 ; %LL: 8720
   8846     ANG X TANA Y TANB N P1 L IS1 IS0 ; %ANG: 8758
   8847     IF IS0>0 ;
   8848       X := X+TANA*(D-L) ;
   8849       Y := Y+TANB*(D-L) ;
   8850       LL X TANA Y TANB P2 L IS2 ; %LL: 8720
   8851       ANG X TANA Y TANB 1/N P2 L IS2 IS0 ; %ANG: 8758
   8852       PL := ATAN(CONS(TANA)) ;
   8853       ZL := CONS(L) ;
   8854       XL := CONS(X) ;
   8855       X := (X-XL)-TANA*(L-ZL) ;
   8856       Y := Y-TANB*(L-ZL) ;
   8857       ELSEIF IS0<0 ;
   8858       TANA := -TANA ;
   8859       TANB := -TANB ;
   8860       X := X+TANA*L ;
   8861       Y := Y+TANB*L ;
   8862       PL := ATAN(CONS(TANA)) ;
   8863       ZL := CONS(L) ;
   8864       ENDIF ;
   8865     TRANS2 TANA TANB A B ; %TRANS2: 8714
   8866     TANB := B*ISRT(1-SQR(B))/COS(ATAN(TANA)-PL) ;
   8867     A := SQRT(1-SQR(B))*SIN(ATAN(TANA)-PL) ;
   8868     Y := Y-X*SIN(PL)*TANB ;
   8869     X := X*(COS(PL)-SIN(PL)*TAN(ATAN(TANA)-PL)) ;
   8870     AA(1) := X ;
   8871     AA(2) := A ;
   8872     AA(3) := Y ;
   8873     AA(4) := B ;
   8874     CO NOM ; %CO:  910
   8875     ENDPROCEDURE ;
   8876   PROCEDURE GLS R1 R2 N L D ;
   8877     VARIABLE I 1 ;
   8878     GLASS 1 R1 0 R2 0 N L MAP ; %GLASS: 8696
   8879     IF NRAY#0 ;
   8880       UMS ; %UMS: 1414
   8881       GLASS 1 R1 0 R2 0 N L MSC ; %GLASS: 8696
   8882       ENDIF ;
   8883     LOCSET 0 L 0 L 0 0 ; %LOCSET: 1059
   8884     DR := D ;
   8885     CE := 'GLS' ;
   8886     UPDATE 0 1 ; %UPDATE: 1206
   8887     ENDPROCEDURE ;
   8888   PROCEDURE GL  P1 I1 P2 I2 N L D ;
   8889     VARIABLE I 1 ;
   8890     GLASS 1 P1 I1 P2 I2 N L MAP ; %GLASS: 8696
   8891     IF NRAY#0 ;
   8892       UMS ; %UMS: 1414
   8893       GLASS 1 P1 I1 P2 I2 N L MSC ; %GLASS: 8696
   8894       ENDIF ;
   8895     LOCSET 0 L 0 L 0 0 ; %LOCSET: 1059
   8896     DR := D ;
   8897     CE := 'GL' ;
   8898     UPDATE 0 1 ; %UPDATE: 1206
   8899     ENDPROCEDURE ;
   8900   PROCEDURE GP PHI1 PHI2 N L D ;
   8901     VARIABLE P 1 2 2 ;
   8902     VARIABLE Q 1 2 2 ;
   8903     VARIABLE I 1 ;
   8904     VARIABLE J 1 ;
   8905     LOOP I 1 2 ;
   8906       LOOP J 1 2 ;
   8907         P(I,J) := 0 ;
   8908         Q(I,J) := 0 ;
   8909         ENDLOOP ;
   8910       ENDLOOP ;
   8911     P(2,1) := TAN(PHI1*DEGRAD) ;
   8912     Q(2,1) := TAN(PHI2*DEGRAD) ;
   8913     GLASS 2 P 1 Q 1 N L MAP ; %GLASS: 8696
   8914     IF NRAY#0 ;
   8915       UMS ; %UMS: 1414
   8916       GLASS 2 P 1 Q 1 N L MSC ; %GLASS: 8696
   8917       ENDIF ;
   8918     LOCSET 0 L 0 L 0 0 ; %LOCSET: 1059
   8919     DR := D ;
   8920     CE := 'GP' ;
   8921     UPDATE 0 1 ; %UPDATE: 1206
   8922     ENDPROCEDURE ;
   8923   PROCEDURE GMS R D ;
   8924     VARIABLE I 1 ;
   8925     GLASS -1 R 0 0 0 1 0 MAP ; %GLASS: 8696
   8926     IF NRAY#0 ;
   8927       UMS ; %UMS: 1414
   8928       GLASS -1 R 0 0 0 1 0 MSC ; %GLASS: 8696
   8929       ENDIF ;
   8930     LOCSET 0 0 0 0 0 0 ; %LOCSET: 1059
   8931     DR := D ;
   8932     CE := 'GMS' ;
   8933     UPDATE 0 1 ; %UPDATE: 1206
   8934     ENDPROCEDURE ;
   8935   PROCEDURE GMP R D ;
   8936     VARIABLE P 1 3 3 ;
   8937     VARIABLE I 1 ;
   8938     VARIABLE J 1 ;
   8939     LOOP I 1 3 ;
   8940       LOOP J 1 3 ;
   8941         P(I,J) := 0 ;
   8942         ENDLOOP ;
   8943       ENDLOOP ;
   8944     P(3,1) := .5/R ;
   8945     P(1,3) := .5/R ;
   8946     GLASS -1 P 2 0 0 1 0 MAP ; %GLASS: 8696
   8947     IF NRAY#0 ;
   8948       UMS ; %UMS: 1414
   8949       GLASS -1 P 2 0 0 1 0 MSC ; %GLASS: 8696
   8950       ENDIF ;
   8951     LOCSET 0 0 0 0 0 0 ; %LOCSET: 1059
   8952     DR := D ;
   8953     CE := 'GMP' ;
   8954     UPDATE 0 1 ; %UPDATE: 1206
   8955     ENDPROCEDURE ;
   8956   PROCEDURE GMF PHI D ;
   8957     VARIABLE P 1 2 2 ;
   8958     VARIABLE I 1 ;
   8959     VARIABLE J 1 ;
   8960     LOOP I 1 2 ;
   8961       LOOP J 1 2 ;
   8962         P(I,J) := 0 ;
   8963         ENDLOOP ;
   8964       ENDLOOP ;
   8965     P(2,1) := TAN((90-PHI)*DEGRAD) ;
   8966     GLASS -1 P 1 0 0 1 0 MAP ; %GLASS: 8696
   8967     IF NRAY#0 ;
   8968       UMS ; %UMS: 1414
   8969       GLASS -1 P 1 0 0 1 0 MSC ; %GLASS: 8696
   8970       ENDIF ;
   8971     LOCSET 0 0 0 0 0 0 ; %LOCSET: 1059
   8972     DR := D ;
   8973     CE := 'GMF' ;
   8974     UPDATE 0 1 ; %UPDATE: 1206
   8975     ENDPROCEDURE ;
   8976   PROCEDURE GM  P N D ;
   8977     VARIABLE I 1 ;
   8978     GLASS -1 P N 0 0 1 0 MAP ; %GLASS: 8696
   8979     IF NRAY#0 ;
   8980       UMS ; %UMS: 1414
   8981       GLASS -1 P N 0 0 1 0 MSC ; %GLASS: 8696
   8982       ENDIF ;
   8983     LOCSET 0 0 0 0 0 0 ; %LOCSET: 1059
   8984     DR := D ;
   8985     CE := 'GM' ;
   8986     UPDATE 0 1 ; %UPDATE: 1206
   8987     ENDPROCEDURE ;
   8988   PROCEDURE SA DX DY ;
   8989     UMS ; %UMS: 1414
   8990     MSC(1) := MSC(1) - DX ;
   8991     MSC(3) := MSC(3) - DY ;
   8992     LOCSET 0 0 0 0 0 0 ; %LOCSET: 1059
   8993     DR := 0 ;
   8994     CE := 'SA' ;
   8995     UPDATE 1 1 ; %UPDATE: 1206
   8996     ENDPROCEDURE ;
   8997   PROCEDURE TA AX AY ;
   8998     VARIABLE PF NM1 ;
   8999     VARIABLE A NM1 ;
   9000     VARIABLE AXR 1 ;
   9001     VARIABLE AYR 1 ;
   9002     VARIABLE SCR NM1 ;
   9003     PROCEDURE TAX M ;
   9004       A := ATAN(M(2)*ISRT(PF-SQR(M(2))-SQR(M(4)))) ;
   9005       SCR := -SIN(AXR)/COS(A-AXR)*ISRT(PF-SQR(M(4)))*M(1) ;
   9006       M(3) := M(3)+M(4)*SCR ;
   9007       IF ND>2 ;
   9008         M(5) := M(5)-SCR*(P0/CONS(P0))*(TFAC/V0) ;
   9009         ENDIF ;
   9010       M(2) := SQRT(PF-SQR(M(4)))*SIN(A-AXR) ;
   9011       M(1) := M(1)*(COS(AXR)-SIN(AXR)*TAN(A-AXR)) ;
   9012       ENDPROCEDURE ;
   9013     PROCEDURE TAY M ;
   9014       A := ATAN(M(4)*ISRT(PF-SQR(M(2))-SQR(M(4)))) ;
   9015       SCR := -SIN(AYR)/COS(A-AYR)*ISRT(PF-SQR(M(2)))*M(3) ;
   9016       M(1) := M(1)+M(2)*SCR ;
   9017       IF ND>2 ;
   9018         M(5) := M(5)-SCR*(P0/CONS(P0))*(TFAC/V0) ;
   9019         ENDIF ;
   9020       M(4) := SQRT(PF-SQR(M(2)))*SIN(A-AYR) ;
   9021       M(3) := M(3)*(COS(AYR)-SIN(AYR)*TAN(A-AYR)) ;
   9022       ENDPROCEDURE ;
   9023     AXR := AX*DEGRAD ;
   9024     AYR := AY*DEGRAD ;
   9025     PF := SQR(P0/CONS(P0)) ;
   9026     TAX MAP ; %TAX: 9003
   9027     TAY MAP ; %TAY: 9013
   9028     IF NRAY#0 ;
   9029       UMS ; %UMS: 1414
   9030       TAX MSC ; %TAX: 9003
   9031       TAY MSC ; %TAY: 9013
   9032       ENDIF ;
   9033     LOCSET 0 0 0 0 0 0 ; %LOCSET: 1059
   9034     DR := 0 ;
   9035     CE := 'TA' ;
   9036     UPDATE 0 1 ; %UPDATE: 1206
   9037     ENDPROCEDURE ;
   9038   PROCEDURE RA PHI ;
   9039     VARIABLE ANG NM2 ;
   9040     IF LPG#0 ;
   9041       WRITE 6 ' --- WARNING in RA, PTY # 0' ;
   9042       ENDIF ;
   9043     ANG := PHI*DEGRAD ;
   9044     UMS ; %UMS: 1414
   9045     MSC(1) :=  COS(ANG)*DD(1) + SIN(ANG)*DD(3) ;
   9046     MSC(3) := -SIN(ANG)*DD(1) + COS(ANG)*DD(3) ;
   9047     MSC(2) :=  COS(ANG)*DD(2) + SIN(ANG)*DD(4) ;
   9048     MSC(4) := -SIN(ANG)*DD(2) + COS(ANG)*DD(4) ;
   9049     LOCSET 0 0 0 0 0 0 ; %LOCSET: 1059
   9050     LOCTRA 0 0 0 0 0 ANG LTRA ; %LOCTRA: 1027
   9051     DR := 0 ;
   9052     CE := 'RA' ;
   9053     UPDATE 1 1 ; %UPDATE: 1206
   9054     ENDPROCEDURE ;
   9055   PROCEDURE WSM IU L B A ;
   9056     VARIABLE LIN 80 ;
   9057     VARIABLE NAP NM1 NV ;
   9058     VARIABLE C NM1 TWOND ;
   9059     VARIABLE ML NM1 NV ;
   9060     VARIABLE P NM1 ;
   9061     VARIABLE F NM1 ;
   9062     VARIABLE I 10 ;
   9063     VARIABLE J 1 ;
   9064     IF (ND>2)*(NP<1)+(ND<3)*(NP<2) ;
   9065       WRITE 6 ' *** ERROR in WSM, too few parameters' ;
   9066       QUIT 0 ;
   9067       ENDIF ;
   9068     LOOP I 1 NV ;
   9069       NAP(I) := MAP(I) ;
   9070       ENDLOOP ;
   9071     IF ND>2 ;
   9072       EDEP NAP L PARA(1) ; %EDEP: 3475 %PARA:  989
   9073       ELSEIF ND<3 ;
   9074       EDEP NAP L PARA(2) ; %EDEP: 3475 %PARA:  989
   9075       LOOP I 1 TWOND ;
   9076         DAPLU NAP(I) TWOND+1 0 F ;
   9077         NAP(I) := F ;
   9078         ENDLOOP ;
   9079       ENDIF ;
   9080     I := '(E23.16)' ;
   9081     LIN := '     OV'&SF(NOC,'(I3)')&SF(ND,'(I3)')      &SF(NP,'(I3)')&
                  ' ;' ; %SF:  230 %SF:  230 %SF:  230
   9082     WRITE IU LIN ;
   9083     LIN := '     RP'&SF(CONS(E0),I)      &SF(CONS(M0),I)&SF(CONS(Z0),I
                  )&' ;' ; %SF:  230 %SF:  230 %SF:  230
   9084     WRITE IU LIN ;
   9085     LIN := '     UM ; FR'      &SF(LFR,'(I3)')&' ; ESET'&SF(EPS,I)&' ;
                   WSET'&SF(WAF,I)&' ;' ; %SF:  230 %SF:  230 %SF:  230
   9086     WRITE IU LIN ;
   9087     LIN := '     CE'&SF(L,I)&SF(B,I)&SF(A,I)&' ;' ; %SF:  230 %SF:  23
                  0 %SF:  230
   9088     WRITE IU LIN ;
   9089     WRITE IU '  ' ;
   9090     MLF NAP C ML P -1 ; %MLF: 3062
   9091     I := -1 ;
   9092     MGF ML F I J ; %MGF: 3298
   9093     IF J#0 ;
   9094       WRITE 6 ' *** ERROR in WSM, no gen. f.' ;
   9095       QUIT 0 ;
   9096       ENDIF ;
   9097     LIN := '     GENERATING FUNCTION OF TYPE  '&SF(I,'(I2)') ; %SF:  2
                  30
   9098     WRITE IU LIN ;
   9099     LIN := '     LIE EXPONENT        OF TYPE  '&SF(-1,'(I2)') ; %SF:  
                  230
   9100     WRITE IU LIN ;
   9101     WRITE IU '  ' ;
   9102     CO NOC+1 ; %CO:  910
   9103     IF ND=3 ;
   9104       J := TWOND+1 ;
   9105       ELSEIF ND<3 ;
   9106       J := TWOND+2 ;
   9107       ENDIF ;
   9108     LOOP I 0 NOC ;
   9109       DAPEW IU F J I ;
   9110       DAPEW IU P J I ;
   9111       ENDLOOP ;
   9112     CO NOC-1 ; %CO:  910
   9113     ENDPROCEDURE ;
   9114   PROCEDURE CRSYSCA ;
   9115     WRITE 6 ' This is going to take very long, do you really want to d
                  o this?'             ' If you only need the fringe fields of
                   selected multipoles, it'             ' would be faster to c
                  ompute and store them separately in a'             ' referen
                  ce file using WSM and RSM.' ;
   9116     OPENF 99 'SYSCA.DAT' 'NEW' ;
   9117     OV  5  3  1 ; %OV:  914
   9118     RP 400 16 3 ; %RP: 6282
   9119     UM ; %UM: 1433
   9120     FR -1 ; %FR: 5390
   9121     ESET 1E-12 ; %ESET:  645
   9122     WSET 1 ; %WSET:  642
   9123     DI 2 30 .0254 0 0 0 0 ; %DI: 7752
   9124     WSM 99 0 (CONS(P0/Z0)/CLIGHT*1E6/2) .0254 ; %WSM: 9055
   9125     UM ; %UM: 1433
   9126     FR -2 ; %FR: 5390
   9127     ESET 1E-12 ; %ESET:  645
   9128     WSET 1 ; %WSET:  642
   9129     DI 2 30 .0254 0 0 0 0 ; %DI: 7752
   9130     WSM 99 0 (CONS(P0/Z0)/CLIGHT*1E6/2) .0254 ; %WSM: 9055
   9131     OV  6  3  1 ; %OV:  914
   9132     RP 400 16 3 ; %RP: 6282
   9133     UM ; %UM: 1433
   9134     FR -1 ; %FR: 5390
   9135     ESET 1E-12 ; %ESET:  645
   9136     WSET 1 ; %WSET:  642
   9137     MQ 0 1 .0254 ; %MQ: 7032
   9138     WSM 99 0 1 .0254 ; %WSM: 9055
   9139     UM ; %UM: 1433
   9140     FR -2 ; %FR: 5390
   9141     ESET 1E-12 ; %ESET:  645
   9142     WSET 1 ; %WSET:  642
   9143     MQ 0 1 .0254 ; %MQ: 7032
   9144     WSM 99 0 1 .0254 ; %WSM: 9055
   9145     OV  6  3  1 ; %OV:  914
   9146     RP 400 16 3 ; %RP: 6282
   9147     UM ; %UM: 1433
   9148     FR -1 ; %FR: 5390
   9149     ESET 1E-12 ; %ESET:  645
   9150     WSET 1 ; %WSET:  642
   9151     MH 0 .5 .0254 ; %MH: 7109
   9152     WSM 99 0 .5 .0254 ; %WSM: 9055
   9153     UM ; %UM: 1433
   9154     FR -2 ; %FR: 5390
   9155     ESET 1E-12 ; %ESET:  645
   9156     WSET 1 ; %WSET:  642
   9157     MH 0 .5 .0254 ; %MH: 7109
   9158     WSM 99 0 .5 .0254 ; %WSM: 9055
   9159     OV  6  3  1 ; %OV:  914
   9160     RP 400 16 3 ; %RP: 6282
   9161     UM ; %UM: 1433
   9162     FR -1 ; %FR: 5390
   9163     ESET 1E-12 ; %ESET:  645
   9164     WSET 1 ; %WSET:  642
   9165     MO 0 .25 .0254 ; %MO: 7154
   9166     WSM 99 0 .25 .0254 ; %WSM: 9055
   9167     UM ; %UM: 1433
   9168     FR -2 ; %FR: 5390
   9169     ESET 1E-12 ; %ESET:  645
   9170     WSET 1 ; %WSET:  642
   9171     MO 0 .25 .0254 ; %MO: 7154
   9172     WSM 99 0 .25 .0254 ; %WSM: 9055
   9173     OV  6  3  1 ; %OV:  914
   9174     RP 400 16 3 ; %RP: 6282
   9175     UM ; %UM: 1433
   9176     FR -1 ; %FR: 5390
   9177     ESET 1E-12 ; %ESET:  645
   9178     WSET 1 ; %WSET:  642
   9179     MD 0 .125 .0254 ; %MD: 7161
   9180     WSM 99 0 .125 .0254 ; %WSM: 9055
   9181     UM ; %UM: 1433
   9182     FR -2 ; %FR: 5390
   9183     ESET 1E-12 ; %ESET:  645
   9184     WSET 1 ; %WSET:  642
   9185     MD 0 .125 .0254 ; %MD: 7161
   9186     WSM 99 0 .125 .0254 ; %WSM: 9055
   9187     OV  6  3  1 ; %OV:  914
   9188     RP 400 16 3 ; %RP: 6282
   9189     UM ; %UM: 1433
   9190     FR -1 ; %FR: 5390
   9191     ESET 1E-12 ; %ESET:  645
   9192     WSET 1 ; %WSET:  642
   9193     MZ 0 .25 .0254 ; %MZ: 7168
   9194     WSM 99 0 .25 .0254 ; %WSM: 9055
   9195     UM ; %UM: 1433
   9196     FR -2 ; %FR: 5390
   9197     ESET 1E-12 ; %ESET:  645
   9198     WSET 1 ; %WSET:  642
   9199     MZ 0 .25 .0254 ; %MZ: 7168
   9200     WSM 99 0 .25 .0254 ; %WSM: 9055
   9201     CLOSEF 99 ;
   9202     ENDPROCEDURE ;
   9203   PROCEDURE MAKEINV A E INV ;
   9204     VARIABLE I 1 ;
   9205     CO NOC+1 ; %CO:  910
   9206     INV := 0 ;
   9207     LOOP I 1 ND ;
   9208       INV := INV + (SQR(A(2*I-1))+SQR(A(2*I)))/E(I) ;
   9209       ENDLOOP ;
   9210     CO NOC-1 ; %CO:  910
   9211     ENDPROCEDURE ;
   9212   PROCEDURE WL SS1 SS2 N S1 S2 LF ;
   9213     VARIABLE FLOW NM1 MAX(8,NV) ; %MAX:  171
   9214     VARIABLE ARG NM1 NV ;
   9215     VARIABLE RES NM1 NV ;
   9216     VARIABLE CSTR NM1 1 ;
   9217     VARIABLE FNL NM1 2 3 ;
   9218     VARIABLE SCR NM1 ;
   9219     VARIABLE L 1 2 ;
   9220     VARIABLE I 1 ;
   9221     VARIABLE J 1 ;
   9222     VARIABLE IER 1 ;
   9223     IF LWA#1 ;
   9224       WRITE 6 ' *** ERROR in WL, call WAS 1 before OV' ;
   9225       QUIT 0 ;
   9226       ELSEIF LRP=0 ;
   9227       WRITE 6 ' *** ERROR, call RP before WL' ;
   9228       QUIT 0 ;
   9229       ELSEIF (SS1(1,1)#0)+(SS2(1,1)#0) ;
   9230       WRITE 6         ' *** ERROR in WL, SS1(1,1) and SS2(1,1) must be
                   0' ;
   9231       QUIT 0 ;
   9232       ELSEIF ABS(S2-S1)<1.D-12 ;
   9233       WRITE 6         ' *** ERROR in WL, S2-S1 must be non zero' ;
   9234       QUIT 0 ;
   9235       ENDIF ;
   9236     CO NO+1 ; %CO:  910
   9237     IF LCO=0 ;
   9238       LOOP I 1 8 ;
   9239         FLOW(I) := XX(I)+0*DD(1) ;
   9240         ENDLOOP ;
   9241       DLACT FLOW DD(NV) ; %DLACT: 6497
   9242       ELSEIF LCO=1 ;
   9243       LOOP I 1 8 ;
   9244         FLOW(I) := XX(I)+0*DD(1) ;
   9245         ENDLOOP ;
   9246       FLOW(1) := FLOW(1)+FLOW(2)*DD(NV) ;
   9247       FLOW(3) := FLOW(3)+FLOW(4)*DD(NV) ;
   9248       ENDIF ;
   9249     LOOP I MIN(9,NV) NV ; %MIN:  174
   9250       FLOW(I) := DD(I) ;
   9251       ENDLOOP ;
   9252     LOOP I 1 NV-1 ;
   9253       ARG(I) := DD(I) ;
   9254       ENDLOOP ;
   9255     L(1) := S1 ;
   9256     L(2) := S2 ;
   9257     LOOP J 1 2 ;
   9258       ARG(NV) := DD(NV)+L(J) ;
   9259       POLVAL 1 FLOW NV ARG NV RES NV ;
   9260       IF     J=1 ;
   9261         CSTR(1) :=  POLY(DD(1),DD(3),SS1,N) ; %POLY:  515
   9262         ELSEIF J=2 ;
   9263         CSTR(1) := -POLY(DD(1),DD(3),SS2,N) ; %POLY:  515
   9264         ENDIF ;
   9265       CSTR(1) := CSTR(1)-DD(NV)+L(J) ;
   9266       POLVAL 1 CSTR 1 RES NV CSTR 1 ;
   9267       ARG(NV) := CSTR(1) ;
   9268       MI ARG RES NV IER NOC NV NM1 ; %MI:  375
   9269       IF IER#0 ;
   9270         WRITE 6 ' *** ERROR in WL, inversion failed' ;
   9271         QUIT 0 ;
   9272         ENDIF ;
   9273       DAPLU RES(NV) NV 0 SCR ;
   9274       ARG(NV) := SCR+L(J) ;
   9275       RES(1) := FLOW(1) ;
   9276       RES(2) := FLOW(3) ;
   9277       RES(3) := FLOW(NV) ;
   9278       POLVAL 1 RES 3 ARG NV RES 3 ;
   9279       LOOP I 1 3 ;
   9280         FNL(J,I) := RES(I) ;
   9281         ENDLOOP ;
   9282       ENDLOOP ;
   9283     CO NO ; %CO:  910
   9284     LF := 0 ;
   9285     LOOP I 1 3 ;
   9286       LF := LF+SQR(FNL(2,I)-FNL(1,I)) ;
   9287       ENDLOOP ;
   9288     LF := SQRT(LF) ;
   9289     ENDPROCEDURE ;
   9290   PROCEDURE BBC Z A RHO I DELTA C ;
   9291     BETHEBLOCHC(1) := Z ;
   9292     BETHEBLOCHC(2) := A ;
   9293     BETHEBLOCHC(3) := RHO ;
   9294     BETHEBLOCHC(4) := I ;
   9295     BETHEBLOCHC(5) := DELTA ;
   9296     BETHEBLOCHC(6) := C ;
   9297     ENDPROCEDURE ;
   9298   FUNCTION BETHEBLOCH ETOT ;
   9299     VARIABLE BETA NM1 ;
   9300     VARIABLE GAMMA NM1 ;
   9301     VARIABLE MECC 1 ;
   9302     VARIABLE MEM0 NM1 ;
   9303     VARIABLE TMAXN NM1 ;
   9304     VARIABLE TMAXD NM1 ;
   9305     GAMMA := ETOT/(M0*AMUMEV) ;
   9306     IF CONS(GAMMA)<1 ;
   9307       WRITE 6         ' *** ERROR in BETHEBLOCH, kinetic energy lost t
                  o negative' ;
   9308       QUIT 0 ;
   9309       ENDIF ;
   9310     BETA := SQRT((GAMMA+1)*(GAMMA-1))/GAMMA ;
   9311     MECC := 0.510998918 ;
   9312     MEM0 := MECC/(M0*AMUMEV) ;
   9313     TMAXD := 1+2*GAMMA*MEM0+SQR(MEM0) ;
   9314     TMAXN := 2*MECC*(GAMMA+1)*(GAMMA-1) ;
   9315     BETHEBLOCH := -15.35375*BETHEBLOCHC(1)/BETHEBLOCHC(2)*BETHEBLOCHC(
                  3)         *SQR(Z0/BETA) * ( LOG(SQR(TMAXN/BETHEBLOCHC(4))/T
                  MAXD)-2*SQR(BETA)         -BETHEBLOCHC(5)-2*BETHEBLOCHC(6)/B
                  ETHEBLOCHC(1) ) ;
   9316     ENDFUNCTION ;
   9317   PROCEDURE EODE Y S YP ;
   9318     YP(1) := BETHEBLOCH(Y(1)) ; %BETHEBLOCH: 9298
   9319     YP(2) := ISRT(1-SQR(M0*AMUMEV/Y(1))) ;
   9320     ENDPROCEDURE ;
   9321   PROCEDURE RK4 N X0 X1 Y0 NS Z Y1 ;
   9322     VARIABLE H 1 ;
   9323     VARIABLE HH 1 4 ;
   9324     VARIABLE X 1 ;
   9325     VARIABLE Y NM1 N ;
   9326     VARIABLE YP NM1 N ;
   9327     VARIABLE I 1 ;
   9328     VARIABLE J 1 ;
   9329     VARIABLE K 1 ;
   9330     LOOP J 1 N ;
   9331       Y1(J) := Y0(J) ;
   9332       ENDLOOP ;
   9333     X := X0 ;
   9334     H := (X1-X0)/NS ;
   9335     HH(1) := 0 ;
   9336     HH(2) := 0.5*H ;
   9337     HH(3) := 0.5*H ;
   9338     HH(4) := H ;
   9339     LOOP I 1 NS ;
   9340       EODE Y1 X+HH(1) YP ; %EODE: 9317
   9341       LOOP J 1 N ;
   9342         Z(J,1) := YP(J) ;
   9343         ENDLOOP ;
   9344       LOOP K 2 4 ;
   9345         LOOP J 1 N ;
   9346           Y(J) := Y1(J)+HH(K)*Z(J,K-1) ;
   9347           ENDLOOP ;
   9348         EODE Y X+HH(K) YP ; %EODE: 9317
   9349         LOOP J 1 N ;
   9350           Z(J,K) := YP(J) ;
   9351           ENDLOOP ;
   9352         ENDLOOP ;
   9353       LOOP J 1 N ;
   9354         Y1(J) := Y1(J)+H/6*(Z(J,1)+2*Z(J,2)+2*Z(J,3)+Z(J,4)) ;
   9355         ENDLOOP ;
   9356       X := X+H ;
   9357       ENDLOOP ;
   9358     ENDPROCEDURE ;
   9359   PROCEDURE EL EI TI L EF TF ;
   9360     VARIABLE Y0 NM1 2 ;
   9361     VARIABLE Y NM1 2 ;
   9362     VARIABLE YP NM1 2 ;
   9363     VARIABLE Z NM1 2 4 ;
   9364     VARIABLE SCR NM1 ;
   9365     VARIABLE I 1 ;
   9366     VARIABLE J 1 ;
   9367     IF LWA#1 ;
   9368       WRITE 6 ' *** ERROR in EL, call WAS 1 before OV' ;
   9369       QUIT 0 ;
   9370       ELSEIF LRP=0 ;
   9371       WRITE 6 ' *** ERROR, call RP before EL' ;
   9372       QUIT 0 ;
   9373       ELSEIF (BETHEBLOCHC(1)*BETHEBLOCHC(2)*BETHEBLOCHC(4))=0 ;
   9374       WRITE 6 ' *** ERROR, call BBC properly before EL' ;
   9375       QUIT 0 ;
   9376       ENDIF ;
   9377     Y0(1) := EI+M0*AMUMEV ;
   9378     Y0(2) := TI ;
   9379     RK4 2 0 L Y0 10 Z Y ; %RK4: 9321
   9380     LOOP J 1 2 ;
   9381       Y0(J) := Y(J) ;
   9382       ENDLOOP ;
   9383     LOOP I 1 NO+1 ;
   9384       EODE Y L YP ; %EODE: 9317
   9385       LOOP J 1 2 ;
   9386         DAINT NV YP(J) SCR ;
   9387         Y(J) := Y0(J)+SCR ;
   9388         ENDLOOP ;
   9389       ENDLOOP ;
   9390     EF := Y(1)-M0*AMUMEV ;
   9391     TF := Y(2) ;
   9392     ENDPROCEDURE ;
   9393   FUNCTION VELC KE ;
   9394     VARIABLE ETA0 NM1 ;
   9395     ETA0 := KE/(M0*AMUMEV) ;
   9396     VELC := SQRT(ETA0*(2+ETA0))/(1+ETA0) ;
   9397     ENDFUNCTION ;
   9398   PROCEDURE COSY2TR MC ;
   9399     VARIABLE I 1 ;
   9400     VARIABLE SCR NM1 ;
   9401     SCR := ISRT( SQR(P0/CONS(P0))-SQR(XX(2))-SQR(XX(4)) ) ;
   9402     LOOP I 1 TWOND ;
   9403       MC(I) := XX(I) ;
   9404       ENDLOOP ;
   9405     LOOP I 2 4 2 ;
   9406       MC(I) := MC(I)*SCR ;
   9407       ENDLOOP ;
   9408     MC(5) := -CONS(P0)/CONS(E0)*MC(5) ;
   9409     ENDPROCEDURE ;
   9410   PROCEDURE WA SS1 SS2 N L D ;
   9411     VARIABLE SS0 1 N+1 N+1 ;
   9412     VARIABLE XX0 NM1 NV ;
   9413     VARIABLE MC NM1 NV ;
   9414     VARIABLE LF NM1 ;
   9415     VARIABLE LF1 NM1 ;
   9416     VARIABLE LF2 NM1 ;
   9417     VARIABLE IER 1 ;
   9418     VARIABLE TF NM1 ;
   9419     VARIABLE EF NM1 ;
   9420     VARIABLE I 1 ;
   9421     VARIABLE J 1 ;
   9422     IF L<1.D-12 ;
   9423       WRITE 6  ' *** ERROR in WA, L must be positive' ;
   9424       QUIT 0 ;
   9425       ELSEIF LUM#1 ;
   9426       WRITE 6  ' *** ERROR, call UM before WA' ;
   9427       QUIT 0 ;
   9428       ELSEIF ND#3 ;
   9429       WRITE 6 (' *** ERROR in WA, '&         'call OV with phase space
                   dimension 3') ;
   9430       QUIT 0 ;
   9431       ENDIF ;
   9432     LOOP I 1 N+1 ;
   9433       LOOP J 1 N+1 ;
   9434         SS0(I,J) := 0 ;
   9435         ENDLOOP ;
   9436       ENDLOOP ;
   9437     LCO := 1 ;
   9438     WL SS1 SS0 MIN(N,NO) 0 0.5*L LF1 ; %WL: 9212 %MIN:  174
   9439     WL SS0 SS2 MIN(N,NO) 0.5*L L LF2 ; %WL: 9212 %MIN:  174
   9440     LCO := 0 ;
   9441     LF := LF1+LF2 ;
   9442     EL E0 DD(5) L EF TF ; %EL: 9359
   9443     MC(1) := TF ;
   9444     MC(2) := EF ;
   9445     LOOP I 1 NV-1 ;
   9446       XX0(I) := DD(I) ;
   9447       ENDLOOP ;
   9448     XX0(NV) := LF-CONS(LF) ;
   9449     POLVAL 1 MC 2 XX0 NV MC 2 ;
   9450     EF := MC(2) ;
   9451     TF := MC(1) ;
   9452     LF := 0.5*L*SQRT(1+SQR(XX(2))+SQR(XX(4))) ;
   9453     TF := TF + (LF-LF1)/VELC(E0) + (LF-LF2)/VELC(EF) ; %VELC: 9393 %VE
                  LC: 9393
   9454     XX0(1) := XX(1)+L*XX(2) ;
   9455     XX0(2) := XX(2) ;
   9456     XX0(3) := XX(3)+L*XX(4) ;
   9457     XX0(4) := XX(4) ;
   9458     XX0(5) := TF-CONS(TF) ;
   9459     XX0(6) := (EF-CONS(EF))/CONS(EF) ;
   9460     LOOP I 7 NV ;
   9461       XX0(I) := DD(I) ;
   9462       ENDLOOP ;
   9463     COSY2TR MC ; %COSY2TR: 9398
   9464     LOOP I 7 NV ;
   9465       MC(I) := DD(I) ;
   9466       ENDLOOP ;
   9467     POLVAL 1 XX0 NV MC NV XX0 NV ;
   9468     RP CONS(EF) M0 Z0 ; %RP: 6282
   9469     COSY2TR MC ; %COSY2TR: 9398
   9470     LOOP I 7 NV ;
   9471       MC(I) := DD(I) ;
   9472       ENDLOOP ;
   9473     MI MC MC NV IER NOC NV NM1 ; %MI:  375
   9474     IF IER#0 ;
   9475       WRITE 6 ' *** ERROR in WA, MI inversion failed' ;
   9476       QUIT 0 ;
   9477       ENDIF ;
   9478     POLVAL 1 MC NV XX0 NV XX0 NV ;
   9479     LOOP I 1 6 ;
   9480       MSC(I) := XX0(I) ;
   9481       ENDLOOP ;
   9482     LOOP I 7 8 ;
   9483       MSC(I) := XX(I) ;
   9484       ENDLOOP ;
   9485     LOCSET 0 L 0 L 0 0 ; %LOCSET: 1059
   9486     DR := D ;
   9487     CE := 'WA' ;
   9488     UPDATE 1 1 ; %UPDATE: 1206
   9489     ENDPROCEDURE ;
   9490   FUNCTION NUMEXP X ;
   9491     VARIABLE ABX 1 ;
   9492     ABX := ABS(X) ;
   9493     IF ABX=0 ;
   9494       NUMEXP := -300 ;
   9495       ELSEIF ABX<1 ;
   9496       NUMEXP := INT(LOG(ABX)/LOG(10))-1 ;
   9497       ELSEIF LO(1) ;
   9498       NUMEXP := INT(LOG(ABX)/LOG(10)) ;
   9499       ENDIF ;
   9500     ENDFUNCTION ;
   9501   FUNCTION TICSINC XDIF ;
   9502     VARIABLE SMP 1 ;
   9503     VARIABLE NX 1 ;
   9504     SMP := ABS(XDIF) ;
   9505     NX := NUMEXP(SMP) ; %NUMEXP: 9490
   9506     IF     SMP<(2*10^NX+0.01*SMP) ;
   9507       TICSINC := 2*10^(NX-1) ;
   9508       ELSEIF SMP<(5*10^NX+0.01*SMP) ;
   9509       TICSINC := 5*10^(NX-1) ;
   9510       ELSEIF LO(1) ;
   9511       TICSINC := 10^NX ;
   9512       ENDIF ;
   9513     ENDFUNCTION ;
   9514   PROCEDURE TICSTR X TIC CHAR DIG ;
   9515     VARIABLE STR 40 ;
   9516     VARIABLE FORM 40 ;
   9517     VARIABLE NX 1 ;
   9518     VARIABLE NTIC 1 ;
   9519     VARIABLE WORD 2 2 ;
   9520     VARIABLE NC 1 ;
   9521     NX := NUMEXP(X) ; %NUMEXP: 9490
   9522     NTIC := NUMEXP(TIC) ; %NUMEXP: 9490
   9523     IF ABS(X)<1.D-300 ;
   9524       STR := '0' ;
   9525       ELSEIF ABS(NX)<5 ;
   9526       IF NOT(NTIC<0) ;
   9527         STR := SI(X) ; %SI:  233
   9528         ELSEIF LO(1) ;
   9529         IF NX<0 ;
   9530           FORM := '(F'&SI(-NTIC+3)&'.'&SI(-NTIC)&')' ; %SI:  233 %SI: 
                   233
   9531           ELSEIF LO(1) ;
   9532           FORM := '(F'&SI(NX-NTIC+3)&'.'&SI(-NTIC)&')' ; %SI:  233 %SI
                  :  233
   9533           ENDIF ;
   9534         STR := SF(X,FORM) ; %SF:  230
   9535         ENDIF ;
   9536       ELSEIF LO(1) ;
   9537       FORM := '(G'&SI(NX-NTIC+8)&'.'&SI(NX-NTIC+1)&')' ; %SI:  233 %SI
                  :  233
   9538       STR := SF(X,FORM) ; %SF:  230
   9539       ENDIF ;
   9540     WORDS STR NC WORD ' ' ; %WORDS:  323
   9541     CHAR := STR|WORD(1) ;
   9542     DIG := LENGTH(CHAR) ;
   9543     ENDPROCEDURE ;
   9544   PROCEDURE FILE2VE FN NC C VEC ;
   9545     VARIABLE LIN 1000 ;
   9546     VARIABLE WORD 2 20 ;
   9547     VARIABLE NW 1 ;
   9548     VARIABLE N 1 ;
   9549     VARIABLE I 1 ;
   9550     OPENF 77 FN 'OLD' ;
   9551     LIN := 'start' ;
   9552     N := 0 ;
   9553     WHILE LIN#'' ;
   9554       READS 77 LIN ;
   9555       IF LIN#'' ;
   9556         IF ((LIN|1)#'#')*(LIN#' ') ;
   9557           WORDS LIN NW WORD ' ' ; %WORDS:  323
   9558           IF NW>0 ;
   9559             IF N=0 ;
   9560               N := MIN(NC,NW) ; %MIN:  174
   9561               LOOP I 1 N ;
   9562                 VEC(I) := RE(LIN|WORD(C(I))) ;
   9563                 ENDLOOP ;
   9564               ELSEIF LO(1) ;
   9565               LOOP I 1 N ;
   9566                 VEC(I) := VEC(I)&RE(LIN|WORD(C(I))) ;
   9567                 ENDLOOP ;
   9568               ENDIF ;
   9569             ENDIF ;
   9570           ENDIF ;
   9571         ENDIF ;
   9572       ENDWHILE ;
   9573     CLOSEF 77 ;
   9574     ENDPROCEDURE ;
   9575   PROCEDURE RFILT RMAX FN FNF ;
   9576     VARIABLE LIN 1000 ;
   9577     VARIABLE WORD 2 20 ;
   9578     VARIABLE NW 1 ;
   9579     VARIABLE X 1 ;
   9580     VARIABLE Y 1 ;
   9581     VARIABLE RMAX2 1 ;
   9582     OPENF 77 FN 'OLD' ;
   9583     OPENF 78 FNF 'UNKNOWN' ;
   9584     WRITE 78 '# The original file: '&FN               '# Filter to sta
                  y inside the radius RMAX = '&S(RMAX) ; %S:  227
   9585     RMAX2 := SQR(RMAX*(1+1D-8)) ;
   9586     LIN := 'start' ;
   9587     WHILE LIN#'' ;
   9588       READS 77 LIN ;
   9589       IF LIN#'' ;
   9590         IF (LIN|1)='#' ;
   9591           WRITE 78 LIN ;
   9592           ELSEIF LIN#' ' ;
   9593           WORDS LIN NW WORD ' ' ; %WORDS:  323
   9594           IF NW>0 ;
   9595             X := RE(LIN|WORD(1)) ;
   9596             Y := RE(LIN|WORD(2)) ;
   9597             IF (SQR(X)+SQR(Y))<RMAX2 ;
   9598               WRITE 78 LIN ;
   9599               ENDIF ;
   9600             ENDIF ;
   9601           ENDIF ;
   9602         ENDIF ;
   9603       ENDWHILE ;
   9604     CLOSEF 77 ;
   9605     CLOSEF 78 ;
   9606     ENDPROCEDURE ;
   9607   PROCEDURE TSC WX WY NX NY DELTA FN ;
   9608     VARIABLE MU NM1 3 ;
   9609     VARIABLE MA 2*NM1 8 ;
   9610     VARIABLE DX 1 ;
   9611     VARIABLE DY 1 ;
   9612     VARIABLE X 1 MAX(5,NV) ; %MAX:  171
   9613     VARIABLE R 1 MAX(5,NV) ; %MAX:  171
   9614     VARIABLE T 1 MAX(5,NV) ; %MAX:  171
   9615     VARIABLE I 1 ;
   9616     VARIABLE J 1 ;
   9617     VARIABLE K 1 ;
   9618     TS MU ; %TS: 3845
   9619     NF 1D-7 MA ; %NF: 3840
   9620     WRITE 6 'TUNESCAN, ORBITAL TUNES FROM TS: ' MU(1) MU(2) ;
   9621     LOOP I 1 NV ;
   9622       X(I) := 0 ;
   9623       R(I) := 0 ;
   9624       T(I) := 0 ;
   9625       ENDLOOP ;
   9626     X(5) := DELTA ;
   9627     R(5) := DELTA ;
   9628     DX := 2*WX/(NX-1) ;
   9629     DY := 2*WY/(NY-1) ;
   9630     OPENF 77 FN 'UNKNOWN' ;
   9631     WRITE 77 ('#   x                        y                        '
                  &                'x-tnue                   y-tune') ;
   9632     LOOP I 1 NX ;
   9633       X(1) := DX*(I-1)-WX ;
   9634       LOOP J 1 NY ;
   9635         X(3) := DY*(J-1)-WY ;
   9636         POLVAL 1 MA TWOND X NV T TWOND ;
   9637         LOOP K 1 ND ;
   9638           R(2*K-1) := SQRT(SQR(T(2*K-1))+SQR(T(2*K))) ;
   9639           ENDLOOP ;
   9640         POLVAL 1 MU ND R NV T ND ;
   9641         WRITE 77 (SF(X(1),'(E25.17)')&SF(X(3),'(E25.17)')&            
                         SF(T(1),'(E25.17)')&SF(T(2),'(E25.17)')) ; %SF:  230 
                  %SF:  230 %SF:  230 %SF:  230
   9642         ENDLOOP ;
   9643       ENDLOOP ;
   9644     CLOSEF 77 ;
   9645     ENDPROCEDURE ;
 --- BIN FILE WRITTEN: COSY
   9646   SAVE 'COSY' ;
